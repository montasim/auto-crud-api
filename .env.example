######################################################################
#                      Introduction to .env.example                     #
######################################################################
# This `.env.example` file serves as a comprehensive guide and template for
# configuring your application's environment variables. Environment variables
# are crucial for managing application settings that vary across different
# deployments (development, staging, production) and are essential for security
# by keeping sensitive information like API keys and database credentials
# outside of your codebase.

# **Important:** This file is intended for guidance and should **NOT** be used
# directly as your application's `.env` file.  It provides detailed descriptions
# of each configuration variable, their purpose, impact, and typical usage examples
# to help you understand and correctly set up your own `.env` file.

# **Your Next Steps:**
# 1. **Create a `.env` file:** In the same directory as this `.env.example` file,
#    create a new file named exactly `.env`. This is where you will store your
#    actual, environment-specific configuration values.
# 2. **Populate `.env` with your values:** Go through each section of this
#    `.env.example` and for every variable, determine the appropriate value for
#    your current environment (e.g., development environment).  Enter these
#    values into your newly created `.env` file, mirroring the variable names
#    exactly as they are defined in this template, but replacing the example
#    values with your real configurations.
# 3. **Security First:**  **NEVER** commit your actual `.env` file to source control.
#    Ensure that `.env` is listed in your `.gitignore` file to prevent accidental
#    exposure of your secrets.
# 4. **Understand the Categories:** This template is organized into logical
#    sections to cover different aspects of application configuration, including:
#      - Application Environment Settings
#      - Server Configuration
#      - Database Configurations (MongoDB, Prisma)
#      - Caching
#      - Authentication & Security
#      - Rate Limiting
#      - and more...
#    Carefully review each section and configure the variables according to
#    your application's needs and the descriptions provided.

# By properly configuring your environment variables using this template and
# following secure practices, you will ensure your application is robust,
# secure, and adaptable to various deployment environments.  Dive into the
# sections below to start configuring your application!
######################################################################


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                APPLICATION ENVIRONMENT                       // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings that define the overall operating environment of the application.
# Purpose: To configure environment-specific behaviors and features, such as logging levels and database connections based on whether the application is running in development, staging, or production.
# Impact: Determines the fundamental operational mode of the application, influencing performance, security, and available features. Incorrect settings can lead to misbehavior or vulnerabilities in different environments.
# Use: Used throughout the application code to conditionally execute environment-specific logic and configurations.
######################################################################

# NODE_ENV: Specifies the environment in which the application runs (String - 'development', 'staging', 'production').
# Description:  Indicates the current operational context of the application.
# (Mandatory)
# Purpose:  To differentiate between development, staging, and production setups, enabling environment-specific configurations (e.g., logging verbosity, database connections).
# Impact:  Controls application behavior and feature sets based on the environment. Incorrect setting may lead to unexpected behavior or security vulnerabilities in different environments.
# Typical values:
# - 'development': Enables detailed error logging and debugging features.
# - 'staging': Used for staging deployments, mimicking production but for testing.
# - 'production': Optimizes the application for performance and security in a live setting.
# Example: Set this to 'development' during local development.
# Use:  `process.env.NODE_ENV` in your application code to conditionally execute environment-specific logic.
NODE_ENV='development'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                SERVER CONFIGURATION                          // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for configuring the server that hosts the application, including network and request handling.
# Purpose: To define server-level parameters such as port, timeouts, and payload limits, which are essential for the application's network accessibility, responsiveness, and security against common web vulnerabilities.
# Impact: Directly affects the server's ability to handle requests, its performance under load, and its security posture. Incorrect settings can lead to server unavailability, performance bottlenecks, or security weaknesses.
# Use: Utilized by server libraries (like Express, Koa, etc.) during server initialization to configure the underlying HTTP server and middleware.
######################################################################

# SERVER_PORT: The port number on which the server will listen for incoming requests (Number - Integer).
# Description:  Defines the network port for the server to accept client connections.
# (Mandatory)
# Purpose:  To make the application accessible over the network at a specific port.
# Impact:  Determines the URL used to access the application. Conflicts with other services using the same port will prevent the application from starting.
# Typical values:
# - '3000': Default development port for web applications.
# - '80': Standard HTTP port (generally used in production behind a proxy).
# - '443': Standard HTTPS port (used in production for secure connections).
# Example: Use '4000' if port 3000 is already in use on your system.
# Use:  Server libraries like Express use this to bind to a specific network port.
SERVER_PORT=3000

# SERVER_TIMEOUT_SECONDS: Maximum time in seconds the server will wait for request processing (Number - Integer).
# Description:  Sets a limit on the maximum processing time for incoming requests.
# (Optional - Default: 30 seconds)
# Purpose:  To prevent indefinite request processing and protect against slow or stalled requests, improving server responsiveness and preventing resource exhaustion.
# Impact:  Requests taking longer than this timeout will be terminated, potentially leading to incomplete operations if set too low. Setting it too high can tie up server resources.
# Typical values:
# - '30': A reasonable default for most web applications.
# - '60': For applications expected to handle longer processing requests.
# Example: Increase to '60' if experiencing timeouts with complex operations.
# Use:  Used in server configuration to set request timeout limits.
SERVER_TIMEOUT_SECONDS=30

# SERVER_JSON_PAYLOAD_LIMIT_KB: Maximum size in kilobytes (KB) allowed for JSON request payloads (Number - Integer).
# Description:  Limits the size of JSON data that the server will accept in request bodies.
# (Optional - Default: 100 KB)
# Purpose:  To protect the server from excessively large JSON payloads, preventing denial-of-service attacks and resource exhaustion due to large data uploads.
# Impact:  Requests with JSON payloads exceeding this limit will be rejected, returning an error to the client. Setting it too low may reject legitimate requests with moderate data size.
# Typical values:
# - '100': Suitable for applications with typical JSON payload sizes.
# - '500': Increase if your application needs to handle larger JSON data.
# Example: Adjust to '200' if you expect slightly larger JSON payloads.
# Use:  Middleware like `body-parser` uses this to limit the size of JSON payloads.
SERVER_JSON_PAYLOAD_LIMIT_KB=100


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                DATABASE - MONGODB CONFIGURATION              // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Connection settings for MongoDB database, specifying how the application connects to and authenticates with a MongoDB instance.
# Purpose: To enable the application to persist and retrieve data from a MongoDB database, which is crucial for data-driven applications that require persistent storage.
# Impact: Determines the application's ability to interact with the MongoDB database. Incorrect connection settings will result in database connection failures and data-related functionality being unusable.
# Use: Used by MongoDB drivers (like Mongoose, MongoDB Node.js driver) to establish and manage connections to the MongoDB database instance.
######################################################################

# MONGODB_CONNECTION_URI: The Uniform Resource Identifier (URI) for connecting to the MongoDB database (String - MongoDB Connection URI).
# Description:  Contains all the necessary information for establishing a connection to a MongoDB database server.
# (Mandatory)
# Purpose:  To allow the application to locate and connect to the MongoDB database for data persistence and retrieval.
# Impact:  Without a valid URI, the application cannot connect to the database, rendering data-dependent features unusable. Incorrect URI will prevent database connections.
# Typical values:
# - 'mongodb://localhost:27017/your-database-name': For local MongoDB instance.
# - 'mongodb+srv://<user>:<password>@<cluster>.<mongodb.net>/<database>?retryWrites=true&w=majority': For MongoDB Atlas.
# Example: Replace placeholders in the Atlas URI with your actual credentials and cluster details.
# Use:  Used by MongoDB drivers (e.g., `mongoose`, `mongodb` Node.js driver) to establish database connections.
MONGODB_CONNECTION_URI='mongodb://localhost:27017/your-database-name'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                DATABASE - PRISMA CONFIGURATION               // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Configuration for Prisma ORM, specifying the database provider and connection details used by Prisma to interact with the database.
# Purpose: To set up Prisma ORM for database access, allowing developers to use Prisma's features for data modeling, querying, and database migrations.
# Impact: Determines how Prisma interacts with the database. Incorrect settings will cause Prisma to fail to connect or generate incompatible queries, leading to application errors during database operations.
# Use: Used by Prisma CLI and Prisma Client to configure database interactions and establish connections based on the specified provider and URL.
######################################################################

# PRISMA_PROVIDER: Specifies the database provider that Prisma will use (String - Database Provider Name).
# Description:  Indicates the type of database system that Prisma ORM will interact with.
# (Mandatory)
# Purpose:  To inform Prisma which database adapter to use for generating database queries and managing connections.
# Impact:  Must match the actual database being used (e.g., PostgreSQL, MySQL, MongoDB). Incorrect provider will cause Prisma to fail to connect or generate incompatible queries.
# Typical values:
# - 'postgresql': For PostgreSQL databases.
# - 'mysql': For MySQL databases.
# - 'sqlite': For SQLite databases (file-based).
# - 'sqlserver': For SQL Server databases.
# - 'mongodb': For MongoDB databases.
# - 'cockroachdb': For CockroachDB databases.
# Example: Set to 'postgresql' if using a PostgreSQL database.
# Use:  Prisma CLI and Prisma Client use this to configure database interactions.
PRISMA_PROVIDER='mongodb'

# PRISMA_DATABASE_URL: The connection URL for the database system specified by PRISMA_PROVIDER (String - Database Connection URL).
# Description:  Provides the specific connection details for the database chosen via `PRISMA_PROVIDER`.
# (Mandatory)
# Purpose:  To enable Prisma to establish a connection to the chosen database system, allowing ORM operations like data modeling and querying.
# Impact:  Must be a valid connection string compatible with the specified `PRISMA_PROVIDER`. Incorrect URL will prevent Prisma from connecting, causing application errors during database operations.
# Typical values:
# - 'mongodb://localhost:27017/your-database-name': For local MongoDB.
# - 'postgresql://user:password@host:port/database': For PostgreSQL.
# Example: Ensure this URL matches the database type specified in PRISMA_PROVIDER.
# Use: Prisma CLI and Prisma Client use this to configure database connections.
PRISMA_DATABASE_URL='mongodb://localhost:27017/your-database-name'


######################################################################
# //////////////////////////////////////////////////////////////// #
# //                CACHE CONFIGURATION                         // #
# //////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for the application's data caching mechanism, used to improve performance and reduce database load.
# Purpose: To configure parameters of the caching system, such as default expiration times for cached data, which helps in optimizing data retrieval and application responsiveness.
# Impact: Affects application performance and data freshness. Incorrect cache settings can lead to serving stale data or not effectively reducing database load.
# Use: Used by caching libraries or modules within the application to manage and configure the caching behavior and storage.
######################################################################

# CACHE_DEFAULT_TTL_SECONDS: Default Time-To-Live (TTL) in seconds for cached data (Number - Integer).
# Description:  Defines the default duration for which cached data remains valid before being considered stale and requiring a refresh.
# (Optional - Default: 3600 seconds (1 hour))
# Purpose:  To improve application performance by reducing database load and speeding up data access for frequently requested but infrequently changing information.
# Impact:  Influences the balance between data freshness and application performance. Lower TTLs mean more frequent updates (fresher data but higher load), higher TTLs reduce load but may serve stale data for longer periods.
# Typical values:
# - '3600': 1 hour - a common default for general-purpose caching.
# - '600': 10 minutes - for more frequently updated data.
# - '86400': 24 hours - for less frequently changing data.
# Example: Set to '1800' (30 minutes) for caching data updated every half hour.
# Use: Caching libraries use this value to set the expiry for cached items.
CACHE_DEFAULT_TTL_SECONDS=3600


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //       AUTHENTICATION - ATTEMPTS & LOCKOUT CONFIGURATION      // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings that define limits for login, password reset, and verification attempts, along with lockout durations for security purposes.
# Purpose: To protect user accounts against brute-force attacks and unauthorized access attempts by implementing lockout mechanisms and limiting the number of failed attempts for sensitive operations.
# Impact: Enhances security by reducing the risk of account compromise but may temporarily lock out legitimate users who make mistakes during login or password recovery processes if settings are too restrictive.
# Use: Authentication middleware or services within the application use these settings to enforce attempt limits and lockout policies.
######################################################################

# AUTH_MAX_LOGIN_ATTEMPTS: Maximum number of failed login attempts before lockout (Number - Integer).
# Description:  Specifies the threshold of unsuccessful login attempts permitted from a user before their account is temporarily locked.
# (Optional - Default: 5 attempts)
# Purpose:  To protect user accounts from brute-force password guessing attacks by limiting the number of login tries.
# Impact:  Users exceeding this limit will be temporarily locked out from logging in, enhancing security but potentially inconveniencing legitimate users who mistype passwords. Too low a value can increase user lockout frequency.
# Typical values:
# - '5': A common setting for moderate security.
# - '3': For higher security, reduce the number of attempts.
# Example: Set to '4' to allow four failed login attempts.
# Use: Authentication middleware or services utilize this value to track and limit login attempts.
AUTH_MAX_LOGIN_ATTEMPTS=5

# AUTH_MAX_RESET_PASSWORD_ATTEMPTS: Maximum number of failed reset password attempts (Number - Integer).
# Description:  Defines the maximum allowed attempts to request a password reset within a certain timeframe.
# (Optional - Default: 3 attempts)
# Purpose:  To secure the password reset process against abuse and potential denial-of-service attempts by limiting reset requests.
# Impact:  Limits attempts to prevent automated or malicious reset password requests, improving security but potentially causing lockout for users legitimately struggling with the reset process if set too low.
# Typical values:
# - '3': Reasonable limit to prevent abuse of password reset.
# - '2': For tighter security on password reset attempts.
# Example: Keep at '3' for a balance between security and usability.
# Use: Password reset logic uses this to limit the number of reset attempts.
AUTH_MAX_RESET_PASSWORD_ATTEMPTS=3

# AUTH_MAX_VERIFY_EMAIL_ATTEMPTS: Maximum number of failed email verification attempts (Number - Integer).
# Description:  Sets the maximum allowed attempts to verify an email address (e.g., clicking a verification link multiple times).
# (Optional - Default: 3 attempts)
# Purpose:  To secure the email verification process by preventing abuse and potential manipulation of the verification mechanism.
# Impact:  Limits attempts to prevent abuse of email verification process, enhancing security of email verification, but could lock out users if verification links are repeatedly accessed incorrectly.
# Typical values:
# - '3':  Limit to prevent abuse of email verification process.
# - '2': For stricter control over email verification attempts.
# Example: Use '3' as a default limit.
# Use: Email verification flow uses this to track and limit verification attempts.
AUTH_MAX_VERIFY_EMAIL_ATTEMPTS=3

# AUTH_MAX_CHANGE_EMAIL_ATTEMPTS: Maximum number of failed change email attempts (Number - Integer).
# Description:  Specifies the maximum number of attempts allowed to change an email address (e.g., verifying the new email).
# (Optional - Default: 3 attempts)
# Purpose:  To secure the email changing process from unauthorized attempts or abuse.
# Impact:  Limits attempts to prevent abuse of email change process, improving account security but could lock out users if legitimate email changes are repeatedly attempted incorrectly.
# Typical values:
# - '3': Limit for change email attempts to prevent abuse.
# - '2': For tighter control over email changing.
# Example: Use '3' as a default limit.
# Use: Email change process uses this to limit attempts to change email.
AUTH_MAX_CHANGE_EMAIL_ATTEMPTS=3

# AUTH_MAX_CHANGE_PASSWORD_ATTEMPTS: Maximum number of failed change password attempts (Number - Integer).
# Description:  Defines the maximum allowed attempts to change a password (e.g., verifying current password).
# (Optional - Default: 3 attempts)
# Purpose:  To secure the password changing process against unauthorized attempts or abuse.
# Impact:  Limits attempts to prevent abuse of password change process, enhancing account security but could lock out users if legitimate password changes are attempted incorrectly multiple times.
# Typical values:
# - '3': Limit for change password attempts to prevent abuse.
# - '2': For tighter control over password changing.
# Example: Use '3' as a default limit.
# Use: Password change process uses this to limit attempts to change password.
AUTH_MAX_CHANGE_PASSWORD_ATTEMPTS=3

# AUTH_MAX_ACTIVE_SESSIONS: Maximum number of concurrent active sessions allowed per user (Number - Integer).
# Description:  Sets a limit on the number of simultaneous login sessions a user can maintain across different devices or browsers.
# (Optional - Default: 5 sessions)
# Purpose:  To enhance security by limiting the potential damage from compromised credentials, controlling session sprawl, and improving account security.
# Impact:  Once this limit is reached, creating a new session might invalidate older sessions. Setting it too low might inconvenience users who legitimately use multiple devices.
# Typical values:
# - '5': Allows users to be logged in from multiple devices/browsers.
# - '3':  Reduces the number of concurrent sessions for enhanced security.
# - '1':  Restricts users to a single active session at a time.
# Example: Set to '2' to limit users to two concurrent sessions.
# Use: Session management logic enforces this limit when creating new user sessions.
AUTH_MAX_ACTIVE_SESSIONS=5

# AUTH_LOCK_DURATION_LOGIN_SECONDS: Lockout duration in seconds after exceeding login attempts (Number - Integer).
# Description:  Specifies the duration for which a user account is temporarily locked after exceeding the maximum login attempts.
# (Optional - Default: 300 seconds (5 minutes))
# Purpose:  To temporarily prevent further login attempts after too many failures, effectively deterring brute-force password attacks and increasing security.
# Impact:  Users are unable to log in for this duration after being locked out. Longer durations increase security but can also inconvenience legitimate users.
# Typical values:
# - '300': 5 minutes - a standard lockout duration.
# - '600': 10 minutes - longer lockout for increased security.
# Example: Set to '180' (3 minutes) for a slightly shorter lockout.
# Use: Authentication middleware or services use this to set lockout timers after too many failed logins.
AUTH_LOCK_DURATION_LOGIN_SECONDS=300

# AUTH_LOCK_DURATION_RESET_PASSWORD_SECONDS: Lockout duration after exceeding reset password attempts (Number - Integer).
# Description:  Defines the time period for which a user is prevented from requesting password resets after exceeding the allowed attempt limit.
# (Optional - Default: 600 seconds (10 minutes))
# Purpose:  To temporarily disable password reset requests after too many failed attempts, deterring abuse and securing the password reset process.
# Impact:  Users are unable to initiate password reset for this duration after lockout. Longer durations increase security but might frustrate users legitimately needing to reset passwords if locked out.
# Typical values:
# - '600': 10 minutes - typical lockout for password reset attempts.
# - '900': 15 minutes - longer lockout for increased security.
# Example: Keep at '600' for a standard lockout.
# Use: Password reset logic uses this to set lockout timers after too many reset attempts.
AUTH_LOCK_DURATION_RESET_PASSWORD_SECONDS=600

# AUTH_LOCK_DURATION_VERIFY_EMAIL_SECONDS: Lockout duration after exceeding verify email attempts (Number - Integer).
# Description:  Specifies the duration of lockout after a user exceeds the maximum allowed attempts to verify their email.
# (Optional - Default: 600 seconds (10 minutes))
# Purpose:  To temporarily prevent further email verification attempts after too many failures, securing the verification process against potential abuse.
# Impact: Users are unable to initiate email verification for this duration after lockout. Longer durations increase security but could delay legitimate users needing to verify their emails if they are locked out.
# Typical values:
# - '600': 10 minutes - typical lockout for email verification attempts.
# - '900': 15 minutes - longer lockout for increased security.
# Example: Keep at '600' for a standard lockout.
# Use: Email verification flow uses this to set lockout timers after too many verification attempts.
AUTH_LOCK_DURATION_VERIFY_EMAIL_SECONDS=600

# AUTH_LOCK_DURATION_CHANGE_EMAIL_SECONDS: Lockout duration after exceeding change email attempts (Number - Integer).
# Description:  Defines the lockout duration after a user exceeds the maximum attempts to change their email.
# (Optional - Default: 600 seconds (10 minutes))
# Purpose:  To temporarily prevent further email change attempts after too many failures, securing the email change process from potential abuse.
# Impact: Users are unable to initiate email change for this duration after lockout. Longer durations increase security but might frustrate users who legitimately need to change emails if they get locked out due to errors.
# Typical values:
# - '600': 10 minutes - typical lockout for change email attempts.
# - '900': 15 minutes - longer lockout for increased security.
# Example: Keep at '600' for a standard lockout.
# Use: Email change process uses this to set lockout timers after too many change email attempts.
AUTH_LOCK_DURATION_CHANGE_EMAIL_SECONDS=600

# AUTH_LOCK_DURATION_CHANGE_PASSWORD_SECONDS: Lockout duration after exceeding change password attempts (Number - Integer).
# Description:  Sets the lockout duration after a user exceeds the maximum allowed attempts to change their password.
# (Optional - Default: 600 seconds (10 minutes))
# Purpose:  To temporarily prevent further password change attempts after too many failures, securing the password change process against potential abuse.
# Impact: Users are unable to initiate password change for this duration after lockout. Longer durations increase security but could frustrate users who legitimately need to change their password if they are locked out due to errors.
# Typical values:
# - '600': 10 minutes - typical lockout for change password attempts.
# - '900': 15 minutes - longer lockout for increased security.
# Example: Keep at '600' for a standard lockout.
# Use: Password change process uses this to set lockout timers after too many change password attempts.
AUTH_LOCK_DURATION_CHANGE_PASSWORD_SECONDS=600


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                RATE LIMITING CONFIGURATION                   // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for rate limiting mechanisms to protect the application from excessive usage and abuse.
# Purpose: To configure rate limits, defining the maximum number of requests allowed within a specific time window, which helps in preventing denial-of-service attacks and managing resource usage.
# Impact: Affects the responsiveness of the application under high load and its resilience against abusive traffic. Incorrect rate limit settings can either be too restrictive, impacting legitimate users, or too lenient, failing to protect against abuse.
# Use: Rate limiting middleware is configured using these settings to monitor and control the rate of incoming requests, typically based on IP addresses.
######################################################################

# RATE_LIMIT_MAX_REQUESTS_PER_WINDOW: Maximum number of requests allowed within the rate limit window (Number - Integer).
# Description:  Specifies the maximum number of HTTP requests a client (typically identified by IP address) can make within a defined time window.
# (Optional - Default: 100 requests)
# Purpose:  To protect the application from abuse, denial-of-service attacks, and excessive usage by limiting the rate of incoming requests.
# Impact:  Requests exceeding this limit within the window will be rejected, typically returning a 429 Too Many Requests error. Setting it too low might affect legitimate users during traffic spikes.
# Typical values:
# - '100': Suitable for basic rate limiting, allowing 100 requests per window.
# - '50':  More restrictive rate limiting, allowing fewer requests.
# Example: Set to '150' to allow slightly more requests per window.
# Use: Rate limiting middleware uses this value to enforce request limits.
RATE_LIMIT_MAX_REQUESTS_PER_WINDOW=100

# RATE_LIMIT_WINDOW_MS: The time window in milliseconds for rate limiting (Number - Integer).
# Description:  Defines the duration of the time window over which request counts are tracked for rate limiting.
# (Optional - Default: 60000 milliseconds (1 minute))
# Purpose:  To establish the timeframe for enforcing the request limit, creating a moving window for rate limiting enforcement.
# Impact:  Rate limits are calculated and enforced over this time window. Shorter windows are more restrictive but may impact legitimate burst traffic. Longer windows are less restrictive but might be less effective against sustained attacks.
# Typical values:
# - '60000': 1 minute - a standard rate limiting window.
# - '30000': 30 seconds - shorter window for more aggressive rate limiting.
# - '300000': 5 minutes - longer window for less aggressive rate limiting.
# Example: Use '120000' (2 minutes) for a slightly longer rate limit window.
# Use: Rate limiting middleware uses this window to track request counts over time.
RATE_LIMIT_WINDOW_MS=60000

# RATE_LIMIT_EXPOSE_HEADERS: Comma-separated list of headers to expose in rate limit responses (String - Comma-separated Header Names).
# Description:  A comma-separated list of HTTP headers that will be included in the response when a client is rate-limited.
# (Optional - Default: 'X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Retry-After')
# Purpose:  To provide clients with information about their rate limit status, allowing them to understand and adapt to rate limits, and improve user experience by allowing clients to anticipate rate limits.
# Impact:  Allows clients to see headers like `X-RateLimit-Limit`, `X-RateLimit-Remaining`, `X-RateLimit-Reset`, and `Retry-After` in rate limit responses. Standard headers are recommended for client-side compatibility and predictable rate limit behavior.
# Typical values:
# - 'X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Retry-After': Standard rate limit headers.
# Example: Keep the standard headers for client-side rate limit awareness.
# Use: Rate limiting middleware configuration to expose rate limit related headers in responses.
RATE_LIMIT_EXPOSE_HEADERS='X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, Retry-After'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                COOKIE - USER SESSION CONFIGURATION           // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for cookies used to manage user sessions, controlling cookie names, lifespan, and security attributes to maintain user authentication and session state.
# Purpose: To configure user session cookies, balancing user convenience (session duration) with security best practices (HTTPS-only, HttpOnly, SameSite) to protect user sessions from common web vulnerabilities.
# Impact: Determines how user sessions are maintained and secured. Incorrect cookie settings can lead to session fixation, session hijacking, or Cross-Site Request Forgery (CSRF) vulnerabilities, or negatively impact user experience if sessions are too short or frequently interrupted.
# Use: Cookie setting libraries or session management middleware use these configurations to set cookie attributes when establishing user sessions.
######################################################################

# COOKIE_USER_NAME: The name of the cookie used to store user session information (String - Cookie Name).
# Description:  The identifier for the cookie that stores the user's session token or session ID in the browser.
# (Optional - Default: 'user_session')
# Purpose:  To uniquely name the cookie responsible for managing user authentication sessions, preventing conflicts with other cookies and facilitating session identification on the server-side.
# Impact:  Changing this name might invalidate existing user sessions as clients will no longer recognize the old cookie. Choose a descriptive and secure name to avoid ambiguity.
# Typical values:
# - 'user_session': Descriptive name for user session cookie.
# - 'session_id':  Generic name if preferred.
# Example: Use 'app_session' for a more application-specific name.
# Use: Server-side session management libraries use this name when setting and retrieving session cookies.
COOKIE_USER_NAME='user_session'

# COOKIE_USER_MAX_AGE_SECONDS: Maximum age in seconds for the user session cookie (Number - Integer).
# Description:  Specifies the lifespan of the user session cookie in seconds, after which the cookie expires and the session is considered invalid.
# (Optional - Default: 86400 seconds (24 hours))
# Purpose:  To control the duration of user sessions, balancing user convenience with security. Shorter max-age reduces the window of opportunity for session hijacking.
# Impact:  Longer max age means sessions persist longer, improving user experience by keeping users logged in for longer periods, but potentially increasing security risks if sessions are not properly invalidated. Shorter max age enhances security but may require more frequent logins.
# Typical values:
# - '86400': 24 hours - a common duration for user sessions.
# - '43200': 12 hours - shorter duration for tighter session control.
# - '604800': 7 days - longer duration for "remember me" functionality.
# Example: Set to '172800' (48 hours) for a two-day user session.
# Use: Cookie setting libraries use this value to set the `Max-Age` attribute of the cookie.
COOKIE_USER_MAX_AGE_SECONDS=86400

# COOKIE_USER_SECURE: Indicates if the user session cookie should only be transmitted over HTTPS (Boolean - true/false).
# Description:  A boolean flag that determines whether the user session cookie should only be sent over secure HTTPS connections.
# (Optional - Default: true)
# Purpose:  To enhance security by ensuring session cookies are only transmitted over encrypted connections, protecting against man-in-the-middle attacks and preventing session data from being intercepted in transit.
# Impact:  Should be set to 'true' in production environments for optimal security. Setting to 'false' might be acceptable in development environments over HTTP, but is not recommended for production. Browsers will enforce this setting and not send the cookie over non-HTTPS connections if set to 'true'.
# Typical values:
# - 'true':  Always use 'true' in production for security.
# - 'false': Can be used in development over HTTP (less secure).
# Example: Ensure this is set to 'true' for production deployments.
# Use: Cookie setting libraries use this boolean to set the `Secure` attribute of the cookie.
COOKIE_USER_SECURE=true

# COOKIE_USER_HTTP_ONLY: Indicates if the user session cookie should be accessible only by the server (Boolean - true/false).
# Description:  A boolean flag determining if the user session cookie should be accessible only by the server and inaccessible to client-side JavaScript.
# (Optional - Default: true)
# Purpose:  To mitigate the risk of cross-site scripting (XSS) attacks by preventing malicious client-side scripts from accessing the session cookie and potentially stealing session information.
# Impact:  Should be set to 'true' for security reasons, as it significantly reduces the risk of XSS attacks. If set to 'true', client-side JavaScript code (e.g., in browsers) cannot access the cookie via `document.cookie`.
# Typical values:
# - 'true':  Always use 'true' for enhanced security against XSS.
# Example: Always keep this set to 'true' for security best practices with session cookies.
# Use: Cookie setting libraries use this boolean to set the `HttpOnly` attribute of the cookie.
COOKIE_USER_HTTP_ONLY=true

# COOKIE_USER_SAME_SITE: The 'SameSite' attribute of the user session cookie (String - 'Strict', 'Lax', 'None').
# Description:  Controls how user session cookies are handled in cross-site requests, providing defense against Cross-Site Request Forgery (CSRF) attacks.
# (Optional - Default: 'Strict')
# Purpose:  To protect against CSRF attacks by restricting when session cookies are sent with cross-site requests, aligning with modern security best practices for cookie handling.
# Impact:
#   - 'Strict': Best protection against CSRF but might impact user experience in some cross-site navigation scenarios, as cookies are only sent in same-site contexts.
#   - 'Lax': Good balance between security and usability, allowing cookies for "safe" cross-site requests (like navigation to the site from an external link) but still provides CSRF protection for unsafe requests.
#   - 'None': Least secure in terms of CSRF protection, sends cookies in all cross-site contexts. Requires `Secure=true` and should be used with caution only when absolutely necessary for specific cross-site interactions.
# Typical values:
# - 'Strict': Recommended for maximum CSRF protection in most cases.
# - 'Lax':  Good balance of security and usability.
# - 'None': Use with caution and only if necessary for specific cross-site scenarios (requires Secure=true).
# Example: Start with 'Strict' for best CSRF protection, and adjust to 'Lax' if user experience is negatively affected by strict same-site restrictions in typical use cases. Avoid 'None' unless you have a very specific cross-site interaction requirement and understand the CSRF risks.
# Use: Cookie setting libraries use this string value to set the `SameSite` attribute of the cookie.
COOKIE_USER_SAME_SITE='Strict'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                COOKIE - ADMIN SESSION CONFIGURATION          // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for cookies used to manage admin sessions, separate from user sessions, with potentially stricter security configurations due to elevated privileges.
# Purpose: To configure admin session cookies, typically with shorter lifespans and stricter security attributes (HTTPS-only, HttpOnly, SameSite) to protect admin accounts from unauthorized access and session-based attacks.
# Impact: Determines how admin sessions are maintained and secured, which is critical for protecting administrative functionalities and sensitive data. Incorrect admin cookie settings can lead to severe security vulnerabilities.
# Use: Cookie setting libraries or admin session management middleware use these configurations to set cookie attributes specifically for admin sessions.
######################################################################

# COOKIE_ADMIN_NAME: The name of the cookie used to store admin session information (String - Cookie Name).
# Description:  Identifier for the cookie storing admin session data, separate from user session cookies.
# (Optional - Default: 'admin_session')
# Purpose:  To uniquely identify the admin session cookie, allowing for distinct management and security policies for admin vs. user sessions.
# Impact:  Changing this name might invalidate existing admin sessions.  Use a distinct and descriptive name, different from the user session cookie name.
# Typical values:
# - 'admin_session': Descriptive name for admin session cookie.
# - 'admin_sid': Shortened name if preferred.
# Example: Use 'backend_session' for a backend admin panel session cookie.
# Use: Server-side admin session management logic uses this name for admin session cookies.
COOKIE_ADMIN_NAME='admin_session'

# COOKIE_ADMIN_MAX_AGE_SECONDS: Maximum age in seconds for the admin session cookie (Number - Integer).
# Description:  Sets the lifespan for admin session cookies, defining how long admin sessions remain valid without re-authentication.
# (Optional - Default: 3600 seconds (1 hour))
# Purpose:  To control admin session duration, typically shorter than user sessions for enhanced security, minimizing the window of opportunity for unauthorized admin access.
# Impact:  Shorter max age is generally preferred for admin sessions for security. Admin sessions expiring more frequently can increase security but might also require admins to log in more often.
# Typical values:
# - '3600': 1 hour - shorter duration for admin sessions for security.
# - '7200': 2 hours - slightly longer admin session if needed.
# Example: Reduce to '1800' (30 minutes) for even shorter admin sessions.
# Use: Cookie setting libraries use this value to set the `Max-Age` attribute for admin session cookies.
COOKIE_ADMIN_MAX_AGE_SECONDS=3600

# COOKIE_ADMIN_SECURE: Indicates if the admin session cookie should only be transmitted over HTTPS (Boolean - true/false).
# Description:  A boolean flag ensuring admin session cookies are transmitted exclusively over HTTPS.
# (Optional - Default: true)
# Purpose:  Mandatory for admin cookies due to their sensitive nature, protecting against interception of admin session data during transmission.
# Impact:  Should always be 'true' in production environments for admin session security. Browsers will not send admin cookies over HTTP if set to 'true'.
# Typical values:
# - 'true': Always use 'true' in production for security.
# Example: Always keep this set to 'true' for admin session security.
# Use: Cookie setting libraries use this boolean to set the `Secure` attribute for admin session cookies.
COOKIE_ADMIN_SECURE=true

# COOKIE_ADMIN_HTTP_ONLY: Indicates if the admin session cookie should be accessible only by the server (Boolean - true/false).
# Description:  A boolean flag preventing client-side JavaScript from accessing admin session cookies.
# (Optional - Default: true)
# Purpose:  Crucial for admin cookies to mitigate Cross-Site Scripting (XSS) attacks, as admin sessions often have elevated privileges and require stricter protection.
# Impact:  Should always be 'true' for enhanced security of admin sessions. Setting to 'true' prevents client-side scripts from reading or manipulating the admin session cookie.
# Typical values:
# - 'true': Always use 'true' for enhanced security against XSS.
# Example: Always keep this set to 'true' for admin session security.
# Use: Cookie setting libraries use this boolean to set the `HttpOnly` attribute for admin session cookies.
COOKIE_ADMIN_HTTP_ONLY=true

# COOKIE_ADMIN_SAME_SITE: The 'SameSite' attribute for the admin session cookie (String - 'Strict', 'Lax', 'None').
# Description:  Controls cross-site cookie behavior for admin sessions, defending against Cross-Site Request Forgery (CSRF) attacks.
# (Optional - Default: 'Strict')
# Purpose:  To protect admin interfaces, which often involve sensitive operations, from CSRF attacks by restricting when admin session cookies are sent with cross-site requests.
# Impact: 'Strict' is generally recommended for admin cookies for maximum CSRF protection. 'Lax' might be considered if very specific cross-site admin workflows require it, but 'Strict' offers the best security posture for admin sessions.
# Typical values:
# - 'Strict': Recommended for maximum CSRF protection for admin sessions.
# Example: 'Strict' is generally the most secure and recommended option for admin cookies to prevent CSRF vulnerabilities.
# Use: Cookie setting libraries use this string value to set the `SameSite` attribute for admin session cookies.
COOKIE_ADMIN_SAME_SITE='Strict'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                JWT - ACCESS TOKEN CONFIGURATION              // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for JSON Web Tokens (JWT) used as access tokens, which are short-lived credentials for API authorization.
# Purpose: To configure JWT access tokens, defining the secret key for signing and verification, and the expiration time, which are crucial for securing API endpoints and managing user sessions.
# Impact: Determines the security and validity of JWT access tokens. Incorrect settings, especially insecure secrets or overly long expiry times, can compromise the security of API authentication.
# Use: JWT libraries (like `jsonwebtoken`) use these settings to generate, sign, and verify access tokens during authentication and authorization processes.
######################################################################

# JWT_ACCESS_TOKEN_SECRET: Secret key used to sign and verify JWT access tokens (String - Secret Key).
# Description:  A highly sensitive secret key used to digitally sign and verify the integrity and authenticity of JSON Web Tokens (JWTs) used as access tokens.
# (Mandatory)
# **SECURITY: Keep this secret VERY secure. Never commit to source control.**
# Purpose:  To cryptographically secure access tokens, ensuring that they cannot be tampered with or forged by unauthorized parties, thereby protecting API endpoints and user data.
# Impact:  **Critical security variable.** Keep this secret extremely secure and never expose it in client-side code or commit it to public repositories. Compromising this secret allows anyone to generate valid access tokens and impersonate legitimate users, severely compromising application security.
# Typical values:
# - '**REPLACE_ME_WITH_A_STRONG_SECRET**': Placeholder - **MUST be replaced with a strong, unique secret.** Generate a cryptographically strong random string of sufficient length and complexity.  Do not use default or easily guessable secrets.
# Example: Generate a cryptographically strong random string for this secret using a secure random number generator. Store it securely and manage access tightly.
# Use: JWT libraries (e.g., `jsonwebtoken` in Node.js) use this secret to sign access tokens upon creation and verify them when processing requests.
JWT_ACCESS_TOKEN_SECRET='**REPLACE_ME_WITH_A_STRONG_SECRET**'

# JWT_ACCESS_TOKEN_EXPIRY_MINUTES: Expiration time in minutes for JWT access tokens (Number - Integer).
# Description:  Specifies the duration, in minutes, after which a JWT access token is considered expired and invalid.
# (Optional - Default: 15 minutes)
# Purpose:  To limit the validity period of access tokens, reducing the window of opportunity for their misuse if they are compromised or intercepted. Short-lived tokens enhance security by forcing more frequent token refreshes or re-authentication.
# Impact:  Shorter expiry times are generally more secure, as they limit the lifespan of a potentially compromised token, but they may require more frequent token refreshes, potentially impacting user experience with session timeouts if set too short. Longer expiry times reduce refresh frequency but increase the risk if a token is compromised.
# Typical values:
# - '15': A common expiry for access tokens, balancing security and usability.
# - '30': Slightly longer expiry if needed for less frequent refreshes.
# - '5':  Shorter expiry for very security-sensitive applications demanding more frequent re-authorization.
# Example: Use '20' minutes for a slightly longer access token lifespan, balancing security and user convenience.
# Use: JWT signing and verification logic uses this value to set the `exp` (expiration) claim in JWTs and check token expiry during verification.
JWT_ACCESS_TOKEN_EXPIRY_MINUTES=15


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                JWT - REFRESH TOKEN CONFIGURATION             // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for JSON Web Tokens (JWT) used as refresh tokens, which are long-lived credentials used to obtain new access tokens.
# Purpose: To configure JWT refresh tokens, including the secret key for signing and verification, and the expiration time, enabling "remember me" functionality and persistent user sessions securely.
# Impact: Determines the security and validity of JWT refresh tokens. Compromising the refresh token secret is a critical security risk as it allows indefinite access token generation. Long refresh token expiry increases the window of risk if tokens are compromised.
# Use: JWT libraries are used with these settings to generate, sign, and verify refresh tokens, and to exchange them for new access tokens, extending user sessions.
######################################################################

# JWT_REFRESH_TOKEN_SECRET: Secret key used to sign and verify JWT refresh tokens (String - Secret Key).
# Description:  A highly sensitive secret key used to sign and verify JWT refresh tokens, which are used to obtain new access tokens.
# (Mandatory)
# **SECURITY: Keep this secret VERY secure. Never commit to source control. Must be different from ACCESS TOKEN SECRET.**
# Purpose:  To secure refresh tokens, which are used to extend user sessions without requiring full re-authentication, enabling "remember me" functionality and maintaining user sessions over longer periods securely.
# Impact:  **Also a critical security variable.** Keep this secret secure, separate from the access token secret, and manage access tightly. Compromise of this secret allows attackers to generate new valid access tokens indefinitely, even if access tokens expire quickly, undermining the entire token-based authentication system.
# Typical values:
# - '**REPLACE_ME_WITH_A_STRONG_SECRET**': Placeholder - **MUST be replaced with a strong, unique secret.**  Generate a cryptographically strong random string, distinct from the access token secret and other secrets.
# Example: Generate a different, strong random string, distinct from the access token secret, and store it securely with restricted access.
# Use: JWT libraries are used with this secret to sign refresh tokens upon generation and to verify them when exchanging refresh tokens for new access tokens.
JWT_REFRESH_TOKEN_SECRET='**REPLACE_ME_WITH_A_STRONG_SECRET**'

# JWT_REFRESH_TOKEN_EXPIRY_MINUTES: Expiration time in minutes for JWT refresh tokens (Number - Integer).
# Description:  Sets the expiration duration, in minutes, for JWT refresh tokens, determining how long they remain valid and can be used to obtain new access tokens.
# (Optional - Default: 10080 minutes (7 days))
# Purpose:  To define the maximum lifespan of refresh tokens, controlling the persistence of user sessions and the validity period of "remember me" functionality.
# Impact:  Longer expiry times for refresh tokens provide extended session durations and improve "remember me" user experience but increase the risk if a refresh token is compromised, as it remains valid for a longer period. Shorter expiry times are more secure but require users to re-authenticate more frequently.
# Typical values:
# - '10080': 7 days (in minutes) - common for "remember me" functionality, providing a week-long session persistence.
# - '43200': 30 days (in minutes) - longer duration if extended session persistence is desired.
# - '2880': 2 days (in minutes) - shorter duration for enhanced security, limiting refresh token validity.
# Example: Set to '20160' (14 days) for a two-week refresh token lifespan, balancing user convenience and security.
# Use: JWT signing and verification logic utilizes this value to set the `exp` (expiration) claim for refresh tokens and to check their validity upon use for access token renewal.
JWT_REFRESH_TOKEN_EXPIRY_MINUTES=10080


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                JWT - RESET PASSWORD TOKEN CONFIGURATION      // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for JSON Web Tokens (JWT) used specifically for the password reset process.
# Purpose: To configure JWT password reset tokens, defining the secret key and expiration time, ensuring a secure and time-limited password reset mechanism to prevent unauthorized password changes.
# Impact: Determines the security of the password reset process. Compromised secrets or overly long token expiry can lead to account takeover vulnerabilities.
# Use: Password reset logic uses these settings to generate, sign, and verify password reset tokens, ensuring secure password recovery processes.
######################################################################

# JWT_RESET_PASSWORD_TOKEN_SECRET: Secret key used to sign and verify JWT reset password tokens (String - Secret Key).
# Description:  A secret key used to sign and verify JWTs specifically created for the password reset process.
# (Mandatory)
# **SECURITY: Keep this secret VERY secure. Never commit to source control. Must be different from other JWT secrets.**
# Purpose:  To cryptographically secure password reset tokens, ensuring that only authorized users with a valid token can initiate the password reset procedure, preventing unauthorized password changes.
# Impact: **Security variable.** Keep this secret confidential and manage access carefully. Compromise of this secret could allow malicious actors to forge valid password reset tokens and potentially take over user accounts.
# Typical values:
# - '**REPLACE_ME_WITH_A_STRONG_SECRET**': Placeholder - **MUST be replaced with a strong, unique secret key.** Generate a cryptographically strong random string.
# Example: Generate a unique, strong random string for this specific secret, ensuring it is different from other JWT secrets to isolate security risks.
# Use: Password reset token generation and verification logic employs this secret to ensure the integrity and authenticity of password reset tokens.
JWT_RESET_PASSWORD_TOKEN_SECRET='**REPLACE_ME_WITH_A_STRONG_SECRET**'

# JWT_RESET_PASSWORD_TOKEN_EXPIRY_MINUTES: Expiration time in minutes for JWT reset password tokens (Number - Integer).
# Description:  Specifies the time limit, in minutes, within which a password reset token remains valid and can be used to reset a user's password.
# (Optional - Default: 15 minutes)
# Purpose:  To limit the validity of password reset tokens, ensuring that they are used within a short timeframe after being requested, mitigating the risk of password reset links being intercepted and used later by unauthorized parties.
# Impact:  Short expiry times enhance security by making the reset process time-sensitive, reducing the window of vulnerability. If set too short, it might inconvenience users who need slightly more time to complete the password reset process.
# Typical values:
# - '15': Short expiry for security-sensitive password resets, requiring users to act promptly.
# - '10': Even shorter expiry for stricter time limits.
# Example: Keep at '15' minutes for a reasonable reset window that balances security and user convenience.
# Use: Password reset token generation and verification logic uses this value to set the `exp` (expiration) claim and to check if the token is still valid upon use.
JWT_RESET_PASSWORD_TOKEN_EXPIRY_MINUTES=15


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                JWT - VERIFY EMAIL TOKEN CONFIGURATION        // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for JSON Web Tokens (JWT) used for email verification processes, ensuring user email addresses are legitimate.
# Purpose: To configure JWT email verification tokens, including secret key and expiration, securing the email verification process and preventing abuse of the system by ensuring only valid users with verified emails are granted access.
# Impact: Determines the security and time sensitivity of email verification. Compromised secrets or overly long expiry times can undermine the integrity of email verification and potentially lead to unauthorized account access.
# Use: Email verification logic uses these settings to generate, sign, and verify email verification tokens, ensuring secure email address confirmation.
######################################################################

# JWT_VERIFY_EMAIL_TOKEN_SECRET: Secret key used to sign and verify JWT email verification tokens (String - Secret Key).
# Description:  A secret key employed to sign and verify JWTs that are used for email verification processes, ensuring email addresses are genuinely owned by the users claiming them.
# (Mandatory)
# **SECURITY: Keep this secret VERY secure. Never commit to source control. Must be different from other JWT secrets.**
# Purpose:  To secure email verification tokens, ensuring that only legitimate users can verify their email addresses, preventing abuse of the verification system and enhancing the integrity of user email data.
# Impact: **Security variable.**  Keep this secret confidential and manage access securely. Compromise could allow malicious actors to forge valid email verification tokens, potentially leading to unauthorized account access or manipulation.
# Typical values:
# - '**REPLACE_ME_WITH_A_STRONG_SECRET**': Placeholder - **MUST be replaced with a strong, unique secret key.** Generate a robust, unpredictable random string.
# Example: Generate a unique, strong random string for this specific secret, and ensure it is distinct from other JWT secrets to isolate any potential security breaches.
# Use: Email verification token generation and verification logic utilizes this secret to guarantee the authenticity and integrity of email verification tokens.
JWT_VERIFY_EMAIL_TOKEN_SECRET='**REPLACE_ME_WITH_A_STRONG_SECRET**'

# JWT_VERIFY_EMAIL_TOKEN_EXPIRY_MINUTES: Expiration time in minutes for JWT email verification tokens (Number - Integer).
# Description:  Specifies the duration, in minutes, for which JWT-based email verification tokens remain valid and can be used to verify an email address.
# (Optional - Default: 15 minutes)
# Purpose:  To limit the validity of email verification tokens, encouraging users to verify their email promptly after registration and reducing the timeframe during which a verification link could be misused or intercepted.
# Impact: Short expiry times enhance security, making the email verification process time-sensitive and reducing the risk of stale or compromised verification links being used maliciously. If set too short, it might inconvenience users who delay email verification for legitimate reasons.
# Typical values:
# - '15': Short expiry to encourage timely email verification and enhance security.
# - '30': Slightly longer expiry if a more generous verification window is preferred.
# Example: Keep at '15' minutes for a reasonable verification window that balances user convenience with security requirements.
# Use: Email verification token generation and verification logic uses this value to set the `exp` (expiration) claim and to check token validity upon use for email verification.
JWT_VERIFY_EMAIL_TOKEN_EXPIRY_MINUTES=15


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                CORS CONFIGURATION                            // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for Cross-Origin Resource Sharing (CORS), controlling which external origins are allowed to access the application's resources.
# Purpose: To configure CORS policies, specifying allowed HTTP methods, origins, and headers, which is essential for securing APIs and web applications against unauthorized cross-origin requests and potential security vulnerabilities.
# Impact: Determines which external domains can interact with the application's backend. Incorrect CORS settings can either block legitimate cross-origin requests or open up security vulnerabilities by allowing unauthorized access.
# Use: CORS middleware is configured with these settings to handle preflight requests and set appropriate CORS headers in responses, enforcing the defined CORS policy.
######################################################################

# CORS_ALLOWED_METHODS: Comma-separated list of HTTP methods allowed for cross-origin requests (String - Comma-separated HTTP Methods).
# Description:  A comma-separated list defining the HTTP methods (GET, POST, PUT, DELETE, etc.) that are permitted for cross-origin requests to your server.
# (Optional - Default: 'GET,POST,PUT,PATCH,DELETE,OPTIONS')
# Purpose:  To control the types of HTTP requests (e.g., GET, POST) that are allowed from origins outside of your server's domain, enhancing security by restricting potentially harmful request types from untrusted origins.
# Impact:  Only the HTTP methods listed in this variable will be accepted from cross-origin sources. Requests using methods not on this list will be blocked by CORS policy. Restrict this list to the methods actually needed by your frontend to minimize potential security risks.
# Typical values:
# - 'GET,POST,PUT,PATCH,DELETE,OPTIONS': Allow all common HTTP methods, suitable for many APIs but less restrictive.
# - 'GET,POST,OPTIONS': Restrict to GET and POST requests and preflight OPTIONS requests if possible, more secure if your API mainly uses these methods for cross-origin interactions.
# Example: If your API only uses GET and POST for cross-origin data retrieval and submission, limit to 'GET,POST,OPTIONS' for enhanced security.
# Use: CORS middleware configuration uses this list to validate the `Access-Control-Request-Method` header in preflight requests and to set the `Access-Control-Allow-Methods` response header.
CORS_ALLOWED_METHODS='GET,POST,PUT,PATCH,DELETE,OPTIONS'

# CORS_ALLOWED_ORIGINS: Comma-separated list of allowed origin URLs that can make cross-origin requests (String - Comma-separated URLs).
# Description:  A comma-separated list of fully qualified URLs representing the origins (domains) that are authorized to make cross-origin requests to your server.
# (Optional - Default: 'http://localhost:3000,http://localhost:3001')
# Purpose:  To whitelist specific domains or origins that are permitted to access your application's API, preventing unauthorized access from untrusted or malicious websites and enforcing origin-based access control.
# Impact:  Requests originating from domains not listed in `CORS_ALLOWED_ORIGINS` will be blocked by the browser's CORS policy. Be as specific as possible and avoid using wildcard '*' in production environments for security reasons. Incorrectly configured or overly permissive origins can lead to CORS vulnerabilities.
# Typical values:
# - 'http://localhost:3000,http://localhost:3001': For local development when frontend is served from ports 3000 and 3001.
# - 'https://your-frontend-domain.com': For a production frontend domain, ensuring only your frontend can access the backend API.
# - 'https://your-frontend-domain.com,https://another-domain.com': For allowing multiple frontend domains to access the API, useful for multi-site applications or partner integrations.
# Example: Replace these placeholders with your actual frontend domain in production and include `localhost` origins for local development testing.
# Use: CORS middleware configuration uses this list to check the `Origin` header of incoming requests and set the `Access-Control-Allow-Origin` response header accordingly, allowing or denying cross-origin access.
CORS_ALLOWED_ORIGINS='http://localhost:3000,http://localhost:3001'

# CORS_ALLOWED_HEADERS: Comma-separated list of HTTP headers allowed in cross-origin requests (String - Comma-separated Header Names).
# Description:  A comma-separated list of HTTP headers that a client is permitted to use in cross-origin requests to your server in addition to the "simple headers".
# (Optional - Default: 'Content-Type,Authorization,X-Site-Identifier')
# Purpose:  To specify which non-standard headers client-side JavaScript code in allowed origins can include in their requests, enabling applications to use custom headers or headers beyond the CORS-safelisted ones.
# Impact:  Only headers listed in `CORS_ALLOWED_HEADERS` will be accepted by the server in preflight requests (OPTIONS requests) from allowed origins. Headers not in this list will cause preflight requests to fail, blocking cross-origin requests using those headers. Include only the headers necessary for your API functionality to minimize potential security risks.
# Typical values:
# - 'Content-Type,Authorization,X-Site-Identifier': Common headers needed for typical API requests, including content type, authorization tokens, and custom identifiers.
# - 'Content-Type': If only standard content types like `application/json` are needed and no custom headers are used.
# Example: If your client application needs to send a custom header named `X-Custom-Header` in cross-origin requests, you would add 'X-Custom-Header' to this list.
# Use: CORS middleware configuration uses this list to validate the `Access-Control-Request-Headers` header in preflight requests and to set the `Access-Control-Allow-Headers` response header, indicating which headers are permitted for actual cross-origin requests.
CORS_ALLOWED_HEADERS='Content-Type,Authorization,X-Site-Identifier'

# CORS_SITE_IDENTIFIER_HEADER: Custom HTTP header name used to identify the site making the request (String - Header Name).
# Description:  A custom HTTP header name designated for identifying the specific site or application originating the request, often used in multi-tenant or multi-site architectures.
# (Optional - Default: 'X-Site-Identifier')
# Purpose:  To allow the server-side application to programmatically identify the source of the request beyond just the origin, especially useful in scenarios with multiple frontends or different clients accessing the same backend API, facilitating site-specific logic or access control.
# Impact:  If configured, client applications that need to be identified by the server must include this header in their requests with a designated value. The server-side application can then extract and use this header to determine the context or source of the incoming request. If not used by clients, the server-side application will not be able to rely on this header for site identification.
# Typical values:
# - 'X-Site-Identifier': A descriptive and common custom header name for site identification.
# Example: If you have a multi-site setup where different websites use the same backend API, you might configure this to 'X-Tenant-ID' and have each frontend application include this header with their tenant ID in requests.
# Use: Application logic within route handlers or middleware can access this header via request headers (e.g., `req.headers['x-site-identifier']` in Express.js) to perform site-specific actions or validations. CORS middleware typically does not directly use this header for access control but may allow it to pass through in preflight responses if listed in `CORS_ALLOWED_HEADERS`.
CORS_SITE_IDENTIFIER_HEADER='X-Site-Identifier'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                SYSTEM - LOCALIZATION CONFIGURATION           // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: System-wide localization settings to ensure consistent date, time, language, and regional formatting across the application.
# Purpose: To configure global localization settings such as timezone, locale, currency, and country, which are crucial for presenting information in a culturally relevant and consistent manner to users across different regions.
# Impact: Affects how dates, times, numbers, and currencies are displayed and interpreted throughout the application. Incorrect localization settings can lead to user confusion, data misrepresentation, and functional inconsistencies.
# Use: Used with internationalization (i18n) libraries and JavaScript's `Intl` APIs to format and localize data according to the specified regional settings.
######################################################################

# SYSTEM_TIMEZONE: System-wide timezone setting (using IANA timezone names) (String - IANA Timezone Name).
# Description:  Specifies the default timezone for the entire application, using the IANA Time Zone Database names (e.g., 'UTC', 'America/New_York').
# (Optional - Default: 'UTC')
# Purpose:  To ensure consistent date and time operations and display throughout the application, regardless of the server's or user's geographic location, facilitating accurate time-related calculations and user experience.
# Impact:   Affects how dates and times are displayed, parsed, and stored within the application. Setting an incorrect timezone can lead to time-related bugs and inconsistencies. It's crucial to choose a timezone that aligns with the application's primary operational context or user base.
# Typical values:
# - 'UTC': Coordinated Universal Time - recommended for server-side consistency and avoiding timezone-related complexities, especially for applications with a global user base.
# - 'America/New_York': For applications primarily serving users in the Eastern Time Zone (US).
# - 'Europe/London': For applications serving users in the UK or using British Summer Time/Greenwich Mean Time.
# Example: Set to 'Europe/Paris' for applications primarily targeting users in Central European Time.
# Use: Used with libraries for date and time manipulation (like `date-fns`, `moment-timezone`, or built-in JavaScript `Intl` APIs) to set the default timezone for date/time formatting and calculations throughout the application.
SYSTEM_TIMEZONE='UTC'

# SYSTEM_LOCALE: System-wide locale setting (String - Locale Code).
# Description:  Sets the default locale for the application, influencing language-specific formatting conventions for dates, numbers, currencies, and text.
# (Optional - Default: 'en-US')
# Purpose:  To ensure culturally appropriate formatting and presentation of data to users, enhancing user experience and making the application more accessible and user-friendly for different regions and languages.
# Impact:  Determines the default language and regional formats used by the application for display to users. Affects how dates, times, numbers, and currencies are displayed and formatted. Setting an incorrect locale can result in culturally inappropriate or confusing data presentation for users from different regions.
# Typical values:
# - 'en-US': English (United States) - a common default locale.
# - 'es-ES': Spanish (Spain).
# - 'fr-FR': French (France).
# Example: Set to 'de-DE' for German (Germany) locale if your primary user base is German-speaking.
# Use: Used with internationalization (i18n) libraries and JavaScript's `Intl` APIs to format dates, times, numbers, and currency values according to the specified locale.
SYSTEM_LOCALE='en-US'

# SYSTEM_CURRENCY: System-wide currency code (String - ISO 4217 Currency Code).
# Description:  Specifies the default currency code for the application, adhering to ISO 4217 currency codes (e.g., 'USD', 'EUR', 'GBP').
# (Optional - Default: 'USD')
# Purpose:  To set the default currency for financial operations and display within the application, ensuring consistent currency representation and facilitating financial calculations.
# Impact:  Determines the default currency symbol, decimal separator, and formatting used for monetary values throughout the application. Setting an incorrect currency code will lead to misrepresentation of financial information.
# Typical values:
# - 'USD': United States Dollar - a widely used default currency.
# - 'EUR': Euro - for Eurozone countries.
# - 'GBP': British Pound Sterling - for the United Kingdom.
# Example: Set to 'JPY' for Japanese Yen if your application deals primarily with Japanese currency.
# Use: Used with JavaScript's `Intl.NumberFormat` API or currency formatting libraries to format monetary values according to the specified currency code.
SYSTEM_CURRENCY='USD'

# SYSTEM_COUNTRY_CODE: System-wide country code (String - ISO 3166-1 alpha-2 Country Code).
# Description: System-wide country code, using ISO 3166-1 alpha-2 codes (e.g., "US", "GB", "ES").
# (Optional - Default: 'US')
# Purpose: Sets the default country for the application, often used in conjunction with locale and currency settings to define regional-specific defaults and configurations, and can be used to infer or set other region-dependent settings.
# Impact: Can influence regional settings and data formats beyond just currency and locale.  May be used for tasks like address formatting, tax calculations, or regional feature availability depending on the application's requirements. Incorrect country code may lead to incorrect regional defaults.
# Typical values:
# - 'US': United States - for applications primarily targeting users in the US.
# - 'GB': United Kingdom - for applications targeting UK users.
# - 'ES': Spain - for applications targeting Spanish users.
# Example: Set to 'CA' for Canada if your application is primarily focused on Canadian users.
# Use: Application logic may use this country code to apply country-specific rules, formats, or features throughout the application. It's often used in conjunction with locale and currency settings to provide a comprehensive localization context.
SYSTEM_COUNTRY_CODE='US'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                SYSTEM - ADMIN CONTACT CONFIGURATION          // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Contact information for the system administrator, used for critical system alerts and technical notifications.
# Purpose: To configure contact details for the system administrator, ensuring that system alerts, error reports, and critical notifications are sent to the appropriate personnel for timely response and issue resolution.
# Impact: Determines who receives critical system communications. Incorrect or unmonitored admin contact information can lead to missed alerts, delayed responses to critical issues, and potential system downtime.
# Use: Used within the application to send automated system notifications, error reports, and alerts to the designated administrator.
######################################################################

# SYSTEM_ADMIN_EMAIL: Email address of the system administrator (String - Email Address).
# Description:  Specifies the email address of the system administrator or technical contact responsible for the application's operation and maintenance.
# (Mandatory)
# Purpose:  To define the recipient for system alerts, error reports, security notifications, and other critical communications related to the application's backend and infrastructure.
# Impact:  Ensure this email address is actively monitored by the system administrator or operations team, as it will receive system-critical communications. Incorrect or unmonitored email address may lead to missed alerts and delayed response to critical issues.
# Typical values:
# - 'admin@example.com':  Placeholder - replace with the actual email address of the administrator or operations team.
# - 'sysadmin@yourdomain.com': A more specific and professional-sounding admin email address.
# Example: Set to the actual email address of the person or team responsible for system administration and operational alerts for your application.
# Use: Used within the application for sending automated system notifications, error reports, and alerts to the designated administrator email address.
SYSTEM_ADMIN_EMAIL='admin@example.com'

# SYSTEM_ADMIN_NAME: Name of the system administrator (String - Administrator Name).
# Description:  Specifies the name of the system administrator or technical contact.
# (Optional - Default: 'Admin User')
# Purpose:  To provide a human-readable name associated with the system administrator email, making notifications and logs more informative and personalized.
# Impact:  Primarily for informational purposes. Used in notifications, logs, or admin panels to identify the administrator contact. Incorrect name will only affect the clarity of communications but not system functionality.
# Typical values:
# - 'Admin User': Generic admin name placeholder.
# - 'IT Department': Department name if a team manages the system administration.
# - 'John Doe': Specific administrator's name for direct contact.
# Example: Use the actual name of the system administrator or a team name for better clarity in system communications.
# Use: Used in notification templates, logs, or admin dashboards to display the administrator's name, making system communications and information more user-friendly.
SYSTEM_ADMIN_NAME='Admin User'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                SYSTEM - DEBUGGING CONFIGURATION              // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings to control debugging features, logging verbosity, and access restrictions to debug functionalities.
# Purpose: To configure debugging parameters, such as logging levels and access controls, to facilitate development and troubleshooting while ensuring debug features are not unintentionally exposed or accessible in non-development environments.
# Impact: Affects the verbosity of application logs and the accessibility of debug functionalities. Incorrect debug settings can either hinder development by being too restrictive or create security vulnerabilities by being too permissive in production.
# Use: Logging libraries and application logic use these settings to control log output and conditionally enable or disable debug features based on the environment and request context.
######################################################################

# SYSTEM_DEBUG_LOG_LEVEL: Logging level for debug messages (String - Log Level: 'debug', 'info', 'warn', 'error', 'fatal', 'silent').
# Description:  Determines the verbosity level of application logs, controlling the amount of detail and types of messages that are logged by the application.
# (Optional - Default: 'debug')
# Purpose:  To manage the volume and detail of logs generated by the application, useful for development, troubleshooting, and monitoring. Different log levels allow filtering of log messages based on severity (debug, info, warn, error, fatal).
# Impact:  Controls the amount of information logged.
# - 'debug': Logs the most detailed information, including fine-grained debug messages. Useful during development but can be very verbose in production.
# - 'info': Logs general operational information, indicating application progress and events. Suitable for general monitoring in production.
# - 'warn': Logs warning messages indicating potential issues or non-critical problems. Useful for identifying potential problems before they become errors.
# - 'error': Logs error messages indicating application errors and failures that require attention. Critical for error tracking in production.
# - 'fatal': Logs only fatal errors that cause application crashes or severe failures. Reserved for the most critical issues.
# - 'silent': Disables almost all logging, minimizing log output. Useful for performance optimization in production when logging is not needed or managed externally.
# Typical values:
# - 'debug': Most verbose logging, useful for detailed debugging during development.
# - 'info': Standard informational logging, often used in staging and production for general monitoring.
# - 'warn', 'error', 'fatal': For more controlled logging of specific issue types.
# - 'silent': For disabling logging in performance-critical production environments.
# Example: Set to 'info' in staging and production environments to reduce verbosity and log only essential operational information.
# Use: Logging libraries (like `winston`, `pino`, `console.log`) use this value to filter log messages based on their severity level, controlling what gets logged and output.
SYSTEM_DEBUG_LOG_LEVEL='debug'

# SYSTEM_DEBUG_ALLOWED_USER_AGENTS: Comma-separated list of user agents allowed to trigger debug features (String - Comma-separated User-Agent Strings).
# Description:  A comma-separated list of User-Agent strings that, when present in an incoming HTTP request's User-Agent header, will enable specific debugging functionalities or endpoints in the application.
# (Optional - Default: 'Mozilla/5.0, curl/7.64.1')
# Purpose:  To restrict access to debug features and endpoints to requests originating from specific clients or tools, identified by their User-Agent header. This allows developers or testers to activate debug features without exposing them to general users or potentially malicious actors.
# Impact:  Debug features (if implemented to be controlled by this variable) will only be activated or accessible for requests where the User-Agent header matches one of the strings in this list. Requests from other user agents will not trigger debug functionality, enhancing security and preventing unintended exposure of debug interfaces in non-development environments.
# Typical values:
# - 'Mozilla/5.0, curl/7.64.1': Example user agents for a typical web browser and `curl` command-line tool. This would enable debug features when accessed via a browser or using `curl`.
# - Leave empty in production environments to completely disable debug access via User-Agent restriction.
# Example: Add specific User-Agent strings used by your development or testing tools (e.g., User-Agent of your Postman or Insomnia REST client) to enable debug mode only when using these tools.
# Use: Application code (middleware, route handlers, or debug utilities) checks the `User-Agent` header of incoming requests against this list to conditionally enable debug-related features or access.  This check is typically performed before executing debug code paths or granting access to debug endpoints.
SYSTEM_DEBUG_ALLOWED_USER_AGENTS='Mozilla/5.0, curl/7.64.1'

# SYSTEM_DEBUG_ALLOWED_IPS: Comma-separated list of IP addresses allowed to access debug endpoints (String - Comma-separated IP Addresses).
# Description:  A comma-separated list of IPv4 or IPv6 addresses that are permitted to access specific debug-related endpoints or functionalities within the application.
# (Optional - Default: '127.0.0.1,::1')
# Purpose:  To restrict access to sensitive debug interfaces to requests originating from known and trusted IP addresses, typically those of developers or testers, enhancing security by preventing unauthorized access to debug tools in non-development environments.
# Impact:  Debug features or endpoints controlled by this setting will only be accessible for requests coming from the IP addresses listed. Requests from IPs not on this list will be denied access to debug functionality.  This acts as an IP-based access control for debug features, significantly reducing the risk of unauthorized debugging access.
# Typical values:
# - '127.0.0.1,::1': Allow debug access only from localhost (both IPv4 and IPv6 addresses), suitable for local development.
# - Specific developer IP addresses for remote debugging in staging or testing environments (use with extreme caution and consider VPN or other secure access methods instead).
# - Leave empty in production environments to disable debug access via IP restrictions completely.
# Example: Add the public IP address of your office network to allow your team to debug in a staging environment (ensure other security measures like VPN are in place if exposing debug features to a staging environment).
# Use: Application code (middleware, route handlers, or debug utilities) checks the source IP address of incoming requests against this list to conditionally enable or grant access to debug features or endpoints. IP address checking is typically performed at the beginning of debug-related code execution or endpoint handling.
SYSTEM_DEBUG_ALLOWED_IPS='127.0.0.1,::1'

# SYSTEM_DEBUG_KEY: A secret key required to access debug endpoints or trigger debug functionalities (String - Secret Key).
# Description:  A secret, randomly generated key that acts as an additional authentication mechanism to control access to debug endpoints or to activate debugging features within the application.
# (Optional - Default: 'your-debug-key')
# **SECURITY: Keep this debug key VERY secure if used in non-development environments.**
# Purpose:  To provide an extra layer of security for debug access beyond IP or User-Agent restrictions, especially in staging or production environments where debug features should be strictly controlled. This key acts as a form of "secret token" required to unlock debug capabilities.
# Impact:  Debug endpoints or features that are protected by this setting will require this key to be provided, typically as a query parameter, header, or cookie, for access to be granted. Without the correct debug key, access is denied. This significantly reduces the risk of unintended or unauthorized use of debug functionalities, particularly in non-development environments. **It is crucial to keep this debug key secret and manage its distribution carefully. Do not leave debug endpoints unprotected in production.**
# Typical values:
# - '**REPLACE_ME_WITH_A_STRONG_SECRET**': Placeholder - **MUST be replaced with a strong, unique, and randomly generated secret key if debug features are enabled in non-development environments.**  Do not use default or easily guessable keys.
# - Leave empty or remove debug endpoints and related code entirely in production for maximum security if debugging in production is not needed or discouraged for security reasons.
# Example: Generate a strong random string (e.g., using `openssl rand -base64 32` or a similar tool) and securely share it only with developers or testers who need debug access in staging environments.
# Use: Application code (middleware, route handlers, or debug utilities) checks for the presence and correctness of this debug key in requests before enabling debug features or granting access to debug endpoints. The key can be checked in request headers, query parameters, or cookies, depending on the implementation. Debug endpoints should explicitly require and validate this key before executing any debug logic.
SYSTEM_DEBUG_KEY='your-debug-key'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                SYSTEM - GENERAL CONTACT CONFIGURATION        // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: General contact information for the organization, intended for public inquiries and general communication purposes.
# Purpose: To configure general contact details such as email and phone number, providing users and the public with readily available contact information for general inquiries and non-technical support.
# Impact: Determines the organization's public contact points. Incorrect contact information can misdirect user inquiries, leading to communication breakdowns and potentially affecting user satisfaction.
# Use: Displayed on public-facing parts of the application, such as contact pages, footers, and general information sections, to provide contact options for users.
######################################################################

# SYSTEM_CONTACT_EMAIL: General contact email address for the organization (String - Email Address).
# Description:  Specifies the primary email address for general inquiries, customer service, or public-facing communication for the organization or application.
# (Optional - Default: 'contact@example.com')
# Purpose:  To provide a point of contact for users, customers, or the general public to reach out for general inquiries, feedback, or non-technical support, improving communication and user support.
# Impact:  Users will use this email address for contacting the organization for general matters. Ensure this email address is actively monitored by a team or individual responsible for handling general inquiries. Incorrect email address will misdirect user communications.
# Typical values:
# - 'contact@example.com':  A standard and recognizable email for general inquiries.
# - 'info@yourcompany.com':  Another common email address for information requests.
# Example: Use the main public-facing contact email address for your organization, such as `hello@yourcompany.com` or `inquiries@yourdomain.org`.
# Use: Displayed on the application's contact page, in footers, or within communication templates as the primary email contact for general inquiries.
SYSTEM_CONTACT_EMAIL='contact@example.com'

# SYSTEM_CONTACT_PHONE: General contact phone number for the organization (String - Phone Number).
# Description:  Specifies the main phone number for general inquiries, customer service, or public contact for the organization.
# (Optional - Default: '+15551234567')
# Purpose:  To provide a readily available phone number for users, customers, or the public to contact the organization for general inquiries and support, offering an alternative contact method to email and improving accessibility.
# Impact:  Users can contact the organization via this phone number for general inquiries. Ensure this phone number is actively monitored or routed to the appropriate team or individual who handles general inquiries. Incorrect phone number will misdirect user calls.  Include the correct country code for international users.
# Typical values:
# - '+15551234567': Example phone number format including country code.  Replace with the actual phone number for your organization. Use E.164 format for international numbers if applicable.
# Example: Use the main public-facing contact phone number for your organization, ensuring it includes the correct country code, like `+442079460532` for a UK number.
# Use: Displayed on the application's contact page, in footers, or within communication materials as the primary phone number for general contact.
SYSTEM_CONTACT_PHONE='+15551234567'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                SYSTEM - SUPPORT CONTACT CONFIGURATION        // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Dedicated support contact information for technical assistance and application-related support inquiries.
# Purpose: To configure specific contact details for technical support, providing users with dedicated channels (email and phone) to seek assistance and report issues related to the application's functionality.
# Impact: Determines the contact points for technical support. Incorrect or unmonitored support contact information can lead to unresolved user issues, dissatisfaction, and increased support load due to misdirected inquiries.
# Use: Displayed on support pages, help sections, error messages, and support-related communication channels within the application to provide technical assistance options to users.
######################################################################

# SYSTEM_SUPPORT_EMAIL: Support email address for technical assistance (String - Email Address).
# Description:  Specifies a dedicated email address for users to contact for technical support, bug reports, or assistance with application issues.
# (Optional - Default: 'support@example.com')
# Purpose:  To provide a specific channel for users to seek technical help, report problems, and get support related to the application's functionality, ensuring efficient handling of support requests.
# Impact: Users will use this email address for technical support matters. Ensure this email address is monitored by a support team or individual responsible for technical support. Incorrect email address will misdirect user support requests, potentially leading to unresolved issues and user dissatisfaction.
# Typical values:
# - 'support@example.com': A standard and recognizable email for technical support.
# - 'helpdesk@yourcompany.com': A more formal helpdesk email address.
# Example: Use the specific email address that your technical support team monitors, such as `techsupport@yourdomain.org` or `help@yourproduct.com`.
# Use: Displayed on the application's support page, in help sections, error messages, or communication templates as the primary email contact for technical support.
SYSTEM_SUPPORT_EMAIL='support@example.com'

# SYSTEM_SUPPORT_PHONE: Support phone number for technical assistance (String - Phone Number).
# Description:  Specifies a dedicated phone number for users to call for technical support and assistance.
# (Optional - Default: '+15557654321')
# Purpose:  To offer a direct phone line for users to receive immediate technical support and help with application-related issues, providing a more direct and real-time support channel compared to email.
# Impact: Users can contact support via this phone number for technical assistance. Ensure this phone number is staffed by a support team or individual capable of providing technical assistance.  Incorrect phone number will misdirect user support calls, leading to user frustration and unresolved issues. Include the correct country code for international users.
# Typical values:
# - '+15557654321': Example phone number format including country code. Replace with the actual phone number for your support team. Use E.164 format if applicable.
# Example: Use the specific phone number for your technical support team, ensuring it includes the correct country code for international callers, like `+442081234567` for a UK support line.
# Use: Displayed on the application's support page, in help sections, or communication materials as the primary phone number for technical support.
SYSTEM_SUPPORT_PHONE='+15557654321'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                SOCIAL MEDIA LINKS CONFIGURATION              // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: URLs to the organization's official social media profiles, used for website integration and linking to social media presence.
# Purpose: To configure links to the organization's social media pages (LinkedIn, Facebook, X, Instagram, YouTube, GitHub), enhancing online presence and facilitating user engagement across different social media platforms.
# Impact: Improves online visibility and user engagement on social media platforms. Incorrect URLs will lead to broken links or misdirection to incorrect social media profiles, undermining the intended social media outreach.
# Use: Used in UI components, typically in footers or contact sections of the application's website, to display social media icons linking to the organization's social media profiles.
######################################################################

# SOCIAL_MEDIA_LINKEDIN_URL: URL to the organization's LinkedIn profile (String - URL).
# Description:  Specifies the full URL to the organization's official LinkedIn company page.
# (Optional - No Default)
# Purpose:  To provide a direct link to the company's LinkedIn profile, allowing users to easily find and follow the organization on LinkedIn for professional networking and updates.
# Impact: Used to display a LinkedIn icon or link on the application's website, typically in the footer or contact section, enhancing the organization's online presence and facilitating connections on LinkedIn. Incorrect URL will lead users to the wrong LinkedIn page or a broken link.
# Typical values:
# - 'https://linkedin.com/company/your-company':  Replace `your-company` with the actual handle of your LinkedIn company page.
# Example:  Enter the full URL to your LinkedIn company page as it appears in your browser's address bar when viewing your company's LinkedIn profile.
# Use: Used in UI components (e.g., social media icons in the footer) to create links to the organization's LinkedIn profile.
SOCIAL_MEDIA_LINKEDIN_URL='https://linkedin.com/company/your-company'

# SOCIAL_MEDIA_FACEBOOK_URL: URL to the organization's Facebook page (String - URL).
# Description:  Specifies the full URL to the organization's official Facebook page.
# (Optional - No Default)
# Purpose:  To provide a direct link to the company's Facebook page, enabling users to easily find and follow the organization on Facebook for social media engagement and updates.
# Impact: Used to display a Facebook icon or link on the application's website, typically in the footer or contact section, enhancing the organization's social media presence and facilitating connections on Facebook. Incorrect URL will lead users to the wrong Facebook page or a broken link.
# Typical values:
# - 'https://facebook.com/your-company': Replace `your-company` with the actual handle of your Facebook page.
# Example: Enter the full URL to your Facebook page as it appears in your browser's address bar when viewing your company's Facebook page.
# Use: Used in UI components to create links to the organization's Facebook page.
SOCIAL_MEDIA_FACEBOOK_URL='https://facebook.com/your-company'

# SOCIAL_MEDIA_X_URL: URL to the organization's X (formerly Twitter) profile (String - URL).
# Description:  Specifies the full URL to the organization's official X (Twitter) profile.
# (Optional - No Default)
# Purpose:  To provide a direct link to the company's X profile, allowing users to easily find and follow the organization on X for social media updates and engagement, particularly on a platform known for real-time updates and public communication.
# Impact: Used to display an X (Twitter) icon or link on the application's website, enhancing social media presence on X.  Incorrect URL will lead to the wrong X profile or a broken link.
# Typical values:
# - 'https://x.com/your-company': Replace `your-company` with the actual handle of your X profile.
# Example: Enter the full URL to your X profile as it appears in your browser's address bar.
# Use: Used in UI components to create links to the organization's X profile.
SOCIAL_MEDIA_X_URL='https://x.com/your-company'

# SOCIAL_MEDIA_INSTAGRAM_URL: URL to the organization's Instagram profile (String - URL).
# Description:  Specifies the full URL to the organization's official Instagram profile.
# (Optional - No Default)
# Purpose:  To provide a direct link to the company's Instagram profile, enabling users to easily find and follow the organization on Instagram for visual content and social media engagement, particularly on a platform focused on visual media.
# Impact: Used to display an Instagram icon or link on the application's website, enhancing visual social media presence. Incorrect URL will lead to the wrong Instagram profile or a broken link.
# Typical values:
# - 'https://instagram.com/your-company': Replace `your-company` with the actual handle of your Instagram profile.
# Example: Enter the full URL to your Instagram profile as it appears in your browser's address bar.
# Use: Used in UI components to create links to the organization's Instagram profile.
SOCIAL_MEDIA_INSTAGRAM_URL='https://instagram.com/your-company'

# SOCIAL_MEDIA_YOUTUBE_URL: URL to the organization's YouTube channel (String - URL).
# Description:  Specifies the full URL to the organization's official YouTube channel.
# (Optional - No Default)
# Purpose:  To provide a direct link to the company's YouTube channel, allowing users to easily access video content and subscribe to the organization's channel on YouTube, enhancing video content discoverability and engagement.
# Impact: Used to display a YouTube icon or link on the application's website, directing users to the organization's video content on YouTube. Incorrect URL will lead to the wrong YouTube channel or a broken link.
# Typical values:
# - 'https://youtube.com/your-company': Replace `your-company` with the actual handle or channel ID of your YouTube channel.
# Example: Enter the full URL to your YouTube channel as it appears in your browser's address bar.
# Use: Used in UI components to create links to the organization's YouTube channel.
SOCIAL_MEDIA_YOUTUBE_URL='https://youtube.com/your-company'

# SOCIAL_MEDIA_GITHUB_URL: URL to the organization's GitHub profile or repository (String - URL).
# Description:  Specifies the full URL to the organization's GitHub profile or a specific public repository, if relevant.
# (Optional - No Default)
# Purpose:  To provide a direct link to the company's GitHub presence, allowing developers, users, or the community to access code repositories, contribute to open-source projects, or explore the organization's technical work on GitHub, enhancing transparency and developer engagement.
# Impact: Used to display a GitHub icon or link, especially relevant for developer-centric applications or open-source projects. Incorrect URL will lead to the wrong GitHub profile or repository or a broken link.
# Typical values:
# - 'https://github.com/your-company': Replace `your-company` with your GitHub organization or profile name.
# - 'https://github.com/your-org/your-repo': Link to a specific repository if you want to highlight a particular project.
# Example: Enter the full URL to your organization's GitHub page or a specific public repository that is relevant to your application.
# Use: Used in UI components to create links to the organization's GitHub profile or relevant repositories, often in footers or developer-focused sections of the website.
SOCIAL_MEDIA_GITHUB_URL='https://github.com/your-company'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                EMAIL SERVICE - SMTP CONFIGURATION            // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for configuring the Simple Mail Transfer Protocol (SMTP) service to enable email sending capabilities within the application.
# Purpose: To configure the application to connect to and authenticate with an SMTP server, allowing it to send emails for user verification, notifications, password resets, and other email-based communications.
# Impact: Determines the application's ability to send emails. Incorrect SMTP settings will prevent email sending functionality, potentially disrupting user registration, password recovery, and important notifications.
# Use: Email sending libraries (like Nodemailer) use these settings to establish connections to the SMTP server and send emails programmatically from the application.
######################################################################

# EMAIL_SMTP_HOST: Hostname or IP address of the SMTP server (String - Hostname or IP Address).
# Description:  Specifies the hostname or IP address of the Simple Mail Transfer Protocol (SMTP) server that your application will use to send emails.
# (Mandatory)
# Guidance: Obtain this value from your email service provider's SMTP settings.
# Purpose:  To configure the connection to your email service provider's SMTP server, enabling the application to send emails for various purposes like user verification, notifications, and password resets.
# Impact:  Must be a valid and accessible SMTP server address. Incorrect host will prevent the application from connecting to the SMTP server and sending emails.
# Typical values:
# - 'smtp.gmail.com': For Gmail SMTP service (use with caution in production due to Gmail's sending limits and security policies for applications).
# - 'smtp.office365.com': For Office 365 SMTP service.
# - '**REPLACE_ME_WITH_SMTP_HOST**': Placeholder for your custom SMTP server hostname, typically provided by your email hosting or transactional email service.
# Example:  Enter the SMTP host provided by your email service provider, such as 'smtp.sendgrid.net' or 'email-smtp.us-west-2.amazonaws.com'.
# Use: Email sending libraries or modules (e.g., `nodemailer` in Node.js) use this value to establish a connection to the SMTP server.
EMAIL_SMTP_HOST='**REPLACE_ME_WITH_SMTP_HOST**'

# EMAIL_SMTP_PORT: Port number for the SMTP server (Number - Integer).
# Description:  Specifies the network port number used to connect to the SMTP server.
# (Mandatory)
# Guidance: Obtain this value from your email service provider's SMTP settings.
# Purpose:  To direct the application to the correct port on the SMTP server for communication. Common ports are used for different SMTP security and encryption protocols.
# Impact:  Must be the correct port number for the SMTP server and the chosen security protocol. Using an incorrect port will prevent successful connection to the SMTP server, causing email sending to fail.
# Typical values:
# - '587': Standard port for STARTTLS SMTP (recommended for secure SMTP connections that upgrade from plain text to TLS).
# - '465': Standard port for SMTPS (SMTP over SSL/TLS), for direct SSL/TLS encrypted connections.
# - '25':  Less secure port, traditionally used for unencrypted SMTP. Avoid using port 25 in production unless absolutely necessary and you understand the security implications.
# Example: Use '587' for STARTTLS SMTP if your email service provider supports and recommends it, as it is generally considered more secure than plain SMTP on port 25.
# Use: Email sending libraries use this port number along with the host to establish an SMTP connection.
EMAIL_SMTP_PORT=587

# EMAIL_SMTP_USERNAME: Username for SMTP server authentication (String - Username).
# Description:  The username required to authenticate with the SMTP server, if authentication is needed by your email service provider.
# (Mandatory if SMTP authentication is required by your provider)
# Guidance: Obtain this value from your email service provider's SMTP settings.
# Purpose:  To provide authentication credentials to the SMTP server, allowing the application to be authorized to send emails through the server.
# Impact:  Required if your SMTP server requires authentication (most modern SMTP services do). Providing an incorrect username will prevent successful authentication and email sending will fail.
# Typical values:
# - '**REPLACE_ME_WITH_SMTP_USERNAME**': Placeholder - Replace with the actual username provided by your email service provider. This is often an email address or a service-specific username.
# Example: Enter the username provided by your email service provider. This might be your full email address or a specific username created for application access.
# Use: Email sending libraries use this username for SMTP authentication when establishing a connection.
EMAIL_SMTP_USERNAME='**REPLACE_ME_WITH_SMTP_USERNAME**'

# EMAIL_SMTP_PASSWORD: Password for SMTP server authentication (String - Password).
# Description:  The password associated with the SMTP username, used for authenticating with the SMTP server.
# (Mandatory if SMTP authentication is required by your provider)
# **SECURITY: Keep this password VERY secure. Never commit to source control.**
# Guidance: Obtain this value from your email service provider's SMTP settings.  Consider using application-specific passwords if available.
# Purpose:  To provide the necessary password for SMTP server authentication, allowing the application to securely authenticate and send emails through the server.
# Impact:  Required if SMTP server authentication is enabled (which is generally the case). Providing an incorrect password will prevent successful authentication and email sending will fail. **Keep this password extremely secure and do not hardcode it directly into your application code.** Store it securely as an environment variable.
# Typical values:
# - '**REPLACE_ME_WITH_SMTP_PASSWORD**': Placeholder - **Replace with your actual SMTP password. Handle this secret with extreme care and ensure it is securely stored and never exposed in logs or client-side code.**
# Example: Enter the password for your SMTP account.  Use a strong, unique password and manage its access securely. Consider using application-specific passwords if your email provider supports them.
# Use: Email sending libraries use this password for SMTP authentication when establishing a connection.
EMAIL_SMTP_PASSWORD='**REPLACE_ME_WITH_SMTP_PASSWORD**'

# EMAIL_SMTP_MAX_CONNECTION_ATTEMPTS: Maximum number of connection attempts to the SMTP server before giving up (Number - Integer).
# Description:  Specifies the maximum number of times the application will try to connect to the SMTP server before considering the connection attempt as failed.
# (Optional - Default: 3 attempts)
# Purpose:  To set a limit on retries when attempting to connect to the SMTP server, preventing indefinite connection attempts in case of transient network issues or server unavailability, and improving resilience in email sending operations.
# Impact: If the application fails to establish a connection to the SMTP server after this number of attempts, email sending will fail and an error will be reported. Setting this value too low might cause email sending to fail unnecessarily due to temporary network hiccups. Setting it too high might delay error reporting in case of persistent connection issues.
# Typical values:
# - '3': A reasonable number of retry attempts for typical network scenarios, balancing responsiveness and resilience.
# - '5':  Allows slightly more retry attempts if your network environment is sometimes prone to temporary connection issues or if SMTP server connectivity is less reliable.
# Example: Keep at '3' for most scenarios, but consider increasing it slightly if you observe intermittent SMTP connection failures.
# Use: Email sending logic within the application uses this value to control the number of retries when attempting to establish an SMTP connection.
EMAIL_SMTP_MAX_CONNECTION_ATTEMPTS=3


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                GOOGLE DRIVE SERVICE CONFIGURATION            // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for integrating with Google Drive API, enabling the application to interact with Google Drive for file storage and retrieval.
# Purpose: To configure Google Drive API access using Service Account credentials and specify a designated folder in Google Drive, allowing the application to store and manage files within a specific Google Drive space.
# Impact: Determines the application's ability to integrate with Google Drive. Incorrect settings, especially invalid service account credentials or folder IDs, will prevent Google Drive integration and file-related functionalities from working.
# Use: Google Drive API client libraries (like `googleapis`) are configured with these settings to authenticate with Google Drive and perform file operations within the specified folder.
######################################################################

# GOOGLE_DRIVE_CLIENT_EMAIL: Client email address from the Google Service Account (String - Email Address).
# Description:  Specifies the client email address of the Google Service Account that you have created and configured to access the Google Drive API on behalf of your application.
# (Mandatory)
# Guidance: Find this email in your Google Cloud Console -> Service Accounts after creating a Service Account and downloading the JSON key file.
# Purpose:  To identify the Google Service Account to the Google Drive API, enabling authentication and authorization for your application to interact with Google Drive resources.
# Impact:  Required for authenticating the application with Google Drive API. Providing an incorrect client email will prevent successful authentication, and the application will not be able to access Google Drive resources.
# Typical values:
# - '**REPLACE_ME_WITH_GOOGLE_DRIVE_CLIENT_EMAIL**@developer.gserviceaccount.com': Placeholder - Replace this with the actual client email address of your Google Service Account. This is typically found in the JSON key file downloaded when creating the Service Account in Google Cloud Console.
# Example:  Locate and copy the `client_email` field from the JSON key file downloaded from your Google Cloud Console when you created your Service Account.
# Use: Google Drive API client libraries (like `googleapis` in Node.js) use this client email as part of the authentication process when connecting to Google Drive.
GOOGLE_DRIVE_CLIENT_EMAIL='**REPLACE_ME_WITH_GOOGLE_DRIVE_CLIENT_EMAIL**@developer.gserviceaccount.com'

# GOOGLE_DRIVE_PRIVATE_KEY: Private key from the Google Service Account in PEM format (String - PEM Encoded Private Key).
# Description:  Contains the private key associated with your Google Service Account, in PEM (Privacy Enhanced Mail) format. This key is used for cryptographic authentication with the Google Drive API.
# (Mandatory)
# **SECURITY: Keep this private key VERY secure. Never commit to source control.**
# Guidance: Find this key in the JSON key file downloaded from your Google Cloud Console -> Service Accounts after creating a Service Account. Ensure you copy the *entire* content, including `-----BEGIN PRIVATE KEY-----` and `-----END PRIVATE KEY-----`.
# Purpose:  To provide cryptographic authentication for the service account to securely access the Google Drive API, verifying the application's identity and authorizing its actions within Google Drive.
# Impact: **Critical security variable.** Keep this private key extremely secure and strictly control access to it. Compromise of this private key would allow unauthorized access to your Google Drive resources and any operations your application is authorized to perform. Ensure you retain the exact formatting, including newlines, as provided in the Google Service Account key file.
# Typical values:
# - "-----BEGIN PRIVATE KEY-----\n**REPLACE_ME_WITH_GOOGLE_DRIVE_PRIVATE_KEY**\n-----END PRIVATE KEY-----\n" : Placeholder - **Replace `YOUR_PRIVATE_KEY` with the entire content of your private key from the Google Service Account JSON key file.**  Ensure you include the `-----BEGIN PRIVATE KEY-----` and `-----END PRIVATE KEY-----` delimiters and preserve all newline characters exactly as they are in the key file.
# Example: Copy and paste the entire contents of the `private_key` field from the JSON key file you downloaded from Google Cloud Console when you created your Service Account. Ensure that you keep the newlines and the delimiters intact.
# Use: Google Drive API client libraries use this private key along with the client email to generate authentication tokens and authorize requests to Google Drive.
GOOGLE_DRIVE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\n**REPLACE_ME_WITH_GOOGLE_DRIVE_PRIVATE_KEY**\n-----END PRIVATE KEY-----\n"

# GOOGLE_DRIVE_SCOPE: Authorization scope required for Google Drive API access (String - Google Drive API Scope URL).
# Description:  Defines the level of access or permissions your application requests to Google Drive, specifying the scope of operations it is authorized to perform.
# (Optional - Default: 'https://www.googleapis.com/auth/drive')
# Guidance: Choose the narrowest scope that meets your application's Google Drive access needs.
# Purpose:  To restrict your application's access to only the necessary Google Drive functionalities, adhering to the principle of least privilege and enhancing security by limiting the potential impact of a compromised application.
# Impact:  Must match the permissions required by your application's Google Drive integration. Requesting insufficient scope will lead to API access errors and failed operations. Requesting overly broad scopes might increase security risks if the application is compromised. Choose the narrowest scope that still allows your application to function correctly.
# Typical values:
# - 'https://www.googleapis.com/auth/drive': Grants full, broad access to the user's Google Drive, allowing the application to manage files and folders across Drive. Use this scope with caution unless your application genuinely needs full Drive access.
# - 'https://www.googleapis.com/auth/drive.file': Grants access to manage files created or opened by your application specifically. A more restrictive and often recommended scope if your application primarily needs to work with files it creates.
# Example: Use 'https://www.googleapis.com/auth/drive.file' if your application only needs to upload and manage files it creates in Google Drive, and does not need to access or manage all files in the user's Drive.
# Use: Google Drive API client libraries use this scope during the authentication and authorization handshake with Google Drive to request the specified level of access.
GOOGLE_DRIVE_SCOPE='https://www.googleapis.com/auth/drive'

# GOOGLE_DRIVE_FOLDER_ID: ID of the Google Drive folder to be used by the application (String - Google Drive Folder ID).
# Description:  Specifies the unique identifier of a Google Drive folder that your application will use as its designated folder for file storage and retrieval.
# (Mandatory)
# Guidance: Find this Folder ID in the URL when you open your target Google Drive folder in a web browser.
# Purpose:  To isolate your application's files within a specific folder in Google Drive, improving organization, access control, and preventing accidental modification or deletion of files outside of the intended application scope.
# Impact:  The application will primarily operate within this specified Google Drive folder. Ensure the folder exists, the Service Account has the necessary permissions to access it (based on the chosen scope), and the ID is correct. Incorrect folder ID will cause the application to target the wrong folder or fail to operate if the folder is inaccessible or does not exist.
# Typical values:
# - '**REPLACE_ME_WITH_GOOGLE_DRIVE_FOLDER_ID**': Placeholder - Replace with the actual Folder ID. The Folder ID is the unique string found in the URL when you open a folder in Google Drive (e.g., `https://drive.google.com/drive/folders/YOUR_FOLDER_ID`).
# Example: Locate the target Google Drive folder in your browser, copy the Folder ID from the URL, and paste it here.
# Use: Application logic for file uploads, downloads, and file management operations within Google Drive uses this Folder ID to specify the target directory for operations.
GOOGLE_DRIVE_FOLDER_ID='**REPLACE_ME_WITH_GOOGLE_DRIVE_FOLDER_ID**'


######################################################################
# ////////////////////////////////////////////////////////////////// #
# //                SENTRY SERVICE CONFIGURATION                  // #
# ////////////////////////////////////////////////////////////////// #
######################################################################
# Description: Settings for Sentry error tracking service integration, enabling error monitoring and reporting for the application.
# Purpose: To configure Sentry integration, specifying the organization, project, DSN, and authentication token, which allows the application to automatically report errors and exceptions to the Sentry platform for centralized error tracking and management.
# Impact: Determines the application's ability to report errors to Sentry. Incorrect settings will prevent error reporting, making it difficult to monitor application health and resolve issues effectively.
# Use: Sentry client libraries are initialized with these settings to connect to the Sentry project and automatically capture and report errors and events.
######################################################################

# SENTRY_ORGANIZATION_SLUG: Organization slug for your Sentry organization (String - Organization Slug).
# Description:  The unique identifier (slug) for your organization within the Sentry error tracking service platform.
# (Mandatory)
# Guidance: Find this slug in your Sentry organization settings URL or general settings page within the Sentry platform.
# Purpose:  To identify your organization in Sentry, ensuring that error reports and events from your application are correctly associated with your Sentry organization account.
# Impact: Required for Sentry integration. Incorrect organization slug will prevent error reporting from your application to the intended Sentry organization, and you will not receive error notifications or be able to monitor your application's errors in Sentry.
# Typical values:
# - '**REPLACE_ME_WITH_SENTRY_ORGANIZATION_SLUG**': Placeholder - Replace with your actual Sentry organization slug. Find this slug in your Sentry organization settings URL or general settings page within the Sentry platform.
# Example: Log in to your Sentry account, navigate to your organization settings, and copy the organization slug from the URL or settings page.
# Use: Sentry client libraries use this organization slug as part of the DSN (Data Source Name) to correctly route error events to your Sentry organization.
SENTRY_ORGANIZATION_SLUG='**REPLACE_ME_WITH_SENTRY_ORGANIZATION_SLUG**'

# SENTRY_PROJECT_SLUG: Project slug for your Sentry project (String - Project Slug).
# Description: Project slug (identifier) for your Sentry project within your Sentry organization.
# (Mandatory)
# Guidance: Find this slug in your Sentry project settings URL or project settings page within the Sentry platform.
# Purpose:  To identify your specific project within your Sentry organization, allowing Sentry to correctly categorize and manage error reports and events specifically for your application project.
# Impact: Required for Sentry integration. Incorrect project slug will prevent error reports from being logged under the correct project in Sentry, making it difficult to find, manage, and resolve errors for your specific application project.
# Typical values:
# - '**REPLACE_ME_WITH_SENTRY_PROJECT_SLUG**': Placeholder - Replace with your actual Sentry project slug. Find this slug in your Sentry project settings URL or project settings page within the Sentry platform.
# Example: Navigate to your project within your Sentry organization, go to project settings, and copy the project slug from the URL or settings page.
# Use: Sentry client libraries use this project slug as part of the DSN to direct error events to the correct project within your Sentry organization.
SENTRY_PROJECT_SLUG='**REPLACE_ME_WITH_SENTRY_PROJECT_SLUG**'

# SENTRY_TUNNEL_PATH: Path for the Sentry tunnel route (String - URL Path).
# Description:  Specifies the URL path (route) on your server that will act as a tunnel or proxy for forwarding Sentry events from the client-side (browsers) to Sentry's servers.
# (Optional - Default: '/sentry-tunnel')
# Purpose:  To proxy client-side Sentry events through your server, which can offer enhanced security, privacy, and control over the data flow of error reports, especially in environments where direct client-to-Sentry communication might be restricted or undesirable.
# Impact: If you choose to use a Sentry tunnel, this path must match the route configured in your application's server to handle Sentry events (often using Sentry's middleware or SDK features). If not using a Sentry tunnel, this variable might not be directly used or needed, or can be left as a placeholder if your setup uses server-side error reporting only. Incorrectly configured tunnel path will break client-side error reporting via the tunnel.
# Typical values:
# - '/sentry-tunnel': A common and recommended path for the Sentry tunnel route, often used in Sentry documentation and examples.
# - '/errors': An alternative path if you prefer a different route name for your Sentry tunnel endpoint.
# Example: Keep as '/sentry-tunnel' if you are implementing Sentry tunnel middleware in your application at the `/sentry-tunnel` path, as is common practice in Sentry setups.
# Use: Sentry client-side SDKs are configured to send error events to this tunnel path on your server, which then forwards them to Sentry. Server-side middleware or route handlers are set up at this path to receive and process these events before forwarding them to Sentry.
SENTRY_TUNNEL_PATH='/sentry-tunnel'

# SENTRY_DSN: Data Source Name (DSN) for Sentry (String - DSN URL).
# Description:  The Data Source Name (DSN) is a URL-like string that contains all the necessary configuration parameters for the Sentry client library to connect to your Sentry project and send error and event data.
# (Mandatory)
# **SECURITY: Keep this DSN secure if it contains sensitive information.**
# Guidance: Obtain this DSN from your Sentry project settings.
# Purpose:  To provide the Sentry client library with the endpoint URL, project ID, and public key needed to authenticate and communicate with your Sentry project, enabling error reporting and monitoring.
# Impact: **Critical for Sentry integration.** Must be a valid DSN string provided by Sentry for your specific project. An incorrect or missing DSN will completely prevent error reporting to Sentry, and you will not receive any error notifications from your application.
# Typical values:
# - '**REPLACE_ME_WITH_SENTRY_DSN**': Placeholder - **Replace this entire string with your actual Sentry DSN string obtained from your Sentry project settings.** The DSN typically includes a public key, project ID, and the Sentry ingest endpoint URL.
# Example: Log in to your Sentry project, navigate to project settings, and copy the DSN string provided by Sentry. Paste this entire DSN string here, replacing the placeholder.
# Use: Sentry client libraries (for both backend and frontend) require the DSN to be initialized. The DSN is passed to `Sentry.init()` function to configure the Sentry SDK and enable error reporting to your Sentry project.
SENTRY_DSN='**REPLACE_ME_WITH_SENTRY_DSN**'

# SENTRY_AUTH_TOKEN: Authentication token for Sentry API (String - Auth Token).
# Description:  An authentication token used to authorize API requests to the Sentry service, enabling actions like uploading source maps, creating releases, and managing issues programmatically via Sentry's API.
# (Optional - No Default - Only needed for Sentry API access)
# **SECURITY: Keep this auth token secure if used.**
# Guidance: Generate an Auth Token within your Sentry organization settings (API Keys section) if you need to use the Sentry API.
# Purpose:  To allow your application or deployment processes to interact with the Sentry API securely, enabling advanced features beyond basic error reporting, such as automated source map uploads for better stack trace deobfuscation or creating releases to track deployments.
# Impact:  May be required for certain advanced Sentry features and integrations. If you are not using Sentry's API for automated tasks like source map uploads or release management, this token might not be strictly necessary for basic error reporting. However, for full utilization of Sentry's capabilities, an Auth Token is often needed. Keep this token secure if used.
# Typical values:
# - '**REPLACE_ME_WITH_SENTRY_AUTH_TOKEN**': Placeholder - **Replace with your actual Sentry Auth Token if you need to use the Sentry API.** Generate an Auth Token within your Sentry organization settings (API Keys section).
# Example: If you are setting up automated source map uploads during your build process, you will need to generate an Auth Token in Sentry and configure it here. If you are only using basic error reporting, you might not need to set this initially.
# Use: Used when making direct API calls to Sentry, for example, using Sentry's Node.js SDK's API client or using `curl` or other HTTP clients to interact with the Sentry API. The token is typically included in request headers for authentication.
SENTRY_AUTH_TOKEN='**REPLACE_ME_WITH_SENTRY_AUTH_TOKEN**'