{
	"info": {
		"_postman_id": "365e6e25-b393-418e-ad7d-98d3f2045ee8",
		"name": "auto-crud-api",
		"description": "A collection generated from dynamic API routes grouped by HTTP method.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "12432462-365e6e25-b393-418e-ad7d-98d3f2045ee8"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "POST",
							"item": [
								{
									"name": "POST /api/users/",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random data with valid name\r",
													"const randomId = Math.floor(Math.random() * 1000);\r",
													"const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
													"\r",
													"pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
													"pm.environment.set(\"phone\", randomPhone);\r",
													"pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "f18ea2ae-6bee-408d-b671-e09d7ebccf59"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content type is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify the response body format\", function () {\r",
													"    const responseBody = pm.response.json();\r",
													"\r",
													"    if (pm.response.code === 201) {\r",
													"        // Ensure the response has the expected top-level keys\r",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');\r",
													"        pm.expect(responseBody.status).to.have.property('success', true);\r",
													"\r",
													"        // List of allowed keys in the data object\r",
													"        const allowedKeys = [\r",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',\r",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',\r",
													"            'createdAt', 'updatedAt'\r",
													"        ];\r",
													"\r",
													"        // Get the actual keys present in the data object\r",
													"        const dataKeys = Object.keys(responseBody.data);\r",
													"\r",
													"        // Loop through each key in the data object and verify it is allowed\r",
													"        dataKeys.forEach(function(key) {\r",
													"            pm.expect(allowedKeys).to.include(key);\r",
													"        });\r",
													"    } else if (pm.response.code === 409) {\r",
													"        // For a 409 response, check that the expected keys exist and that\r",
													"        // both data and errors are empty objects.\r",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');\r",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;\r",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;\r",
													"    } else {\r",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);\r",
													"    }\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "badd3dc8-3b9e-419d-bb25-587fff61d123"
											}
										}
									],
									"id": "c7fa6500-284f-4fc2-803d-ff1de4a8a8ad",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFirstName}} {{$randomLastName}}\",\n    \"avatarUrl\": \"{{$randomAvatarImage}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{$randomLoremSentence}}\",\n    \"portfolio\": \"{{$randomUrl}}\",\n    \"age\": {{age}},\n    \"isActive\": {{$randomBoolean}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/users",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": [
										{
											"id": "5d5238ed-5eeb-4ec1-995b-96ff8fe71713",
											"name": "OK 201",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SERVER_URL}}/api/users",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Vary",
													"value": "Origin, Accept-Encoding"
												},
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "RateLimit-Policy",
													"value": "100;w=60"
												},
												{
													"key": "RateLimit-Limit",
													"value": "100"
												},
												{
													"key": "RateLimit-Remaining",
													"value": "99"
												},
												{
													"key": "RateLimit-Reset",
													"value": "60"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "314"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Date",
													"value": "Tue, 11 Feb 2025 09:35:28 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"meta\": {\n        \"route\": \"/\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: New Users created with ID \\\"67ab19e051cb68b48e9a9146\\\".\"\n    },\n    \"data\": {\n        \"_id\": \"67ab19e051cb68b48e9a9146\",\n        \"name\": \"Emily Davis\",\n        \"avatarUrl\": \"http://example.com/avatar.png\",\n        \"email\": \"user553@example.com\",\n        \"nid\": \"1000000553\",\n        \"phone\": \"+8801758126687\",\n        \"bio\": \"This is a sample bio.\",\n        \"portfolio\": \"http://example.com/553\",\n        \"age\": 54,\n        \"isActive\": true,\n        \"createdAt\": \"2025-02-11T09:35:28.449Z\",\n        \"updatedAt\": \"2025-02-11T09:35:28.449Z\"\n    },\n    \"errors\": {}\n}"
										},
										{
											"id": "1a6f738d-83ca-4302-9573-44ec9413c463",
											"name": "BAD_REQUEST 400",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SERVER_URL}}/api/users",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "raw",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "RateLimit-Policy",
													"value": "100;w=60"
												},
												{
													"key": "RateLimit-Limit",
													"value": "100"
												},
												{
													"key": "RateLimit-Remaining",
													"value": "98"
												},
												{
													"key": "RateLimit-Reset",
													"value": "27"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "158"
												},
												{
													"key": "Content-Type",
													"value": "[object Object]"
												},
												{
													"key": "Date",
													"value": "Tue, 11 Feb 2025 09:36:01 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\"meta\":{\"route\":\"/\"},\"status\":{\"message\":\"Data validation failed\"},\"data\":{},\"errors\":[{\"field\":\"name\",\"message\":\"Name must be between 3 and 50 characters and contain only letters and spaces\"}]}"
										},
										{
											"id": "87f7ee0a-2bf2-4f44-8f02-a1defdfba24c",
											"name": "FORBIDDEN 403",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SERVER_URL}}/api/users",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "102"
												},
												{
													"key": "ETag",
													"value": "W/\"66-RMZ3/ejO/1q/Hwq4XIYQOzOO7WU\""
												},
												{
													"key": "Date",
													"value": "Tue, 11 Feb 2025 11:50:05 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"error\": \"Missing 'X-Site-Identifier' header in the request.\",\n    \"errorCode\": \"MISSING_IDENTIFIER_HEADER\"\n}"
										}
									]
								},
								{
									"name": "POST /api/users/create",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random data with valid name\r",
													"const randomId = Math.floor(Math.random() * 1000);\r",
													"const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
													"const isActive = Math.random() < 0.5;\r",
													"\r",
													"// Generate a valid name (3-50 characters, letters, and spaces only)\r",
													"const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
													"const randomName = names[Math.floor(Math.random() * names.length)];\r",
													"\r",
													"pm.environment.set(\"name\", randomName);\r",
													"pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
													"pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
													"pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
													"pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
													"pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
													"pm.environment.set(\"phone\", randomPhone);\r",
													"pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
													"pm.environment.set(\"isActive\", isActive);\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "212220ac-1e95-40d8-8390-79b58578c08a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    if (pm.response.code === 201) {",
													"        // Ensure the response has the expected top-level keys",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.status).to.have.property('success', true);",
													"",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(responseBody.data);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"    } else if (pm.response.code === 409) {",
													"        // For a 409 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "20261de9-5119-4b5a-9b29-c50ed93df332"
											}
										}
									],
									"id": "16f2b967-b7ce-4fc8-bdbd-dcc92103efe5",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/users/create",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST /api/users/new",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate random data with valid name\r",
													"const randomId = Math.floor(Math.random() * 1000);\r",
													"const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
													"const isActive = Math.random() < 0.5;\r",
													"\r",
													"// Generate a valid name (3-50 characters, letters, and spaces only)\r",
													"const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
													"const randomName = names[Math.floor(Math.random() * names.length)];\r",
													"\r",
													"pm.environment.set(\"name\", randomName);\r",
													"pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
													"pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
													"pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
													"pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
													"pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
													"pm.environment.set(\"phone\", randomPhone);\r",
													"pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
													"pm.environment.set(\"isActive\", isActive);\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "4a0de4a0-ef0b-4b81-9cad-b42bb076d8cb"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    if (pm.response.code === 201) {",
													"        // Ensure the response has the expected top-level keys",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.status).to.have.property('success', true);",
													"",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(responseBody.data);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"    } else if (pm.response.code === 409) {",
													"        // For a 409 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "392870c2-22f3-45ed-b0fd-51640234df37"
											}
										}
									],
									"id": "9b4ce0b1-d168-4f6b-95ce-8a0093011adf",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/users/new",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"new"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST /api/users/create/dummy?count={{count}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "b1a77450-e064-4a98-9d4a-adedb0cc47e3"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
													"",
													"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
													"",
													"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    if (pm.response.code === 201) {",
													"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"",
													"        responseData.data.forEach(function (user) {",
													"            pm.expect(user).to.be.an('object');",
													"            pm.expect(user._id).to.be.a('string');",
													"            pm.expect(user.name).to.be.a('string');",
													"            pm.expect(user.avatarUrl).to.be.a('string');",
													"            pm.expect(user.email).to.be.a('string');",
													"            pm.expect(user.nid).to.be.a('string');",
													"            pm.expect(user.phone).to.be.a('string');",
													"            pm.expect(user.bio).to.be.a('string');",
													"            pm.expect(user.portfolio).to.be.a('string');",
													"            pm.expect(user.age).to.be.a('number');",
													"            pm.expect(user.isActive).to.be.a('boolean');",
													"            pm.expect(user.createdAt).to.be.a('string');",
													"            pm.expect(user.updatedAt).to.be.a('string');",
													"        });",
													"",
													"        // You can add more specific value checks here if needed, for example:",
													"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
													"",
													"    } else if (pm.response.code === 409) {",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.meta).to.have.property('route', '/');",
													"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
													"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
													"        pm.expect(responseBody.errors).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "c2a72a00-57cf-4d92-a59c-5dcbf87a8070"
											}
										}
									],
									"id": "6ac0fe3b-eb60-4c81-b0fe-6051728cb868",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/create/dummy?count={{count}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"create",
												"dummy"
											],
											"query": [
												{
													"key": "count",
													"value": "{{count}}"
												}
											]
										}
									},
									"response": [
										{
											"id": "68b0b236-6180-4950-89ca-f374b1400568",
											"name": "OK 200",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{SERVER_URL}}/api/users/create/dummy?count={{count}}",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"users",
														"create",
														"dummy"
													],
													"query": [
														{
															"key": "count",
															"value": "{{count}}"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Vary",
													"value": "Origin, Accept-Encoding"
												},
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "6321"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Date",
													"value": "Tue, 11 Feb 2025 10:33:20 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"meta\": {\n        \"route\": \"/create/dummy?count=56\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 56 Userss created with dummy data.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67ab276fe8de5d3e450769e6\",\n            \"name\": \"Usque molestiae \",\n            \"avatarUrl\": \"Templum aegrotatio\",\n            \"email\": \"jared93@gmail.com\",\n            \"nid\": \"4165601751\",\n            \"phone\": \"+01405606656\",\n            \"bio\": \"Defessus accedo fugiat utpote verecundia valeo.\",\n            \"portfolio\": \"https://example.com/PVGce\",\n            \"age\": 80,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-15T04:37:01.654Z\",\n            \"updatedAt\": \"2024-07-22T23:13:58.723Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769e8\",\n            \"name\": \"Fuga conculco am\",\n            \"avatarUrl\": \"Culpo amet demergo\",\n            \"email\": \"gabriella.rodriguez48@hotmail.com\",\n            \"nid\": \"2227024215\",\n            \"phone\": \"+01703237657\",\n            \"bio\": \"Sulum vicissitudo denique compello considero demonstro.\",\n            \"portfolio\": \"https://example.com/FUaOM\",\n            \"age\": 40,\n            \"isActive\": true,\n            \"createdAt\": \"2024-03-02T14:29:11.068Z\",\n            \"updatedAt\": \"2025-01-27T11:36:46.553Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769e9\",\n            \"name\": \"Voco aureus cano\",\n            \"avatarUrl\": \"Collum vivo\",\n            \"email\": \"luella69@hotmail.com\",\n            \"nid\": \"4020610221\",\n            \"phone\": \"8801424537746\",\n            \"bio\": \"Nisi defungo nesciunt umquam usitas nulla collum accendo valens conservo.\",\n            \"portfolio\": \"https://example.com/8jnIc\",\n            \"age\": 96,\n            \"isActive\": true,\n            \"createdAt\": \"2024-07-28T11:09:22.323Z\",\n            \"updatedAt\": \"2024-04-01T12:56:20.221Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ea\",\n            \"name\": \"Caute cotidie te\",\n            \"avatarUrl\": \"Spargo tergum\",\n            \"email\": \"harold_wisozk67@gmail.com\",\n            \"nid\": \"1024083945\",\n            \"phone\": \"01718044037\",\n            \"bio\": \"Molestiae contego tamen volaticus blanditiis tumultus crudelis adfectus.\",\n            \"portfolio\": \"https://example.com/ZtFlg\",\n            \"age\": 69,\n            \"isActive\": false,\n            \"createdAt\": \"2024-02-17T17:17:35.021Z\",\n            \"updatedAt\": \"2024-10-03T06:48:29.341Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ec\",\n            \"name\": \"Incidunt deduco \",\n            \"avatarUrl\": \"Angelus despecto\",\n            \"email\": \"myra.schmidt@yahoo.com\",\n            \"nid\": \"0519207223\",\n            \"phone\": \"8801557074366\",\n            \"bio\": \"Cauda tabella cervus ad corpus neque.\",\n            \"portfolio\": \"https://example.com/iOg9Z\",\n            \"age\": 64,\n            \"isActive\": true,\n            \"createdAt\": \"2024-03-26T12:10:13.888Z\",\n            \"updatedAt\": \"2024-11-21T04:20:07.786Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ed\",\n            \"name\": \"Ater abstergo de\",\n            \"avatarUrl\": \"Suscipit officiis\",\n            \"email\": \"darron12@gmail.com\",\n            \"nid\": \"8017579556\",\n            \"phone\": \"8801760769413\",\n            \"bio\": \"Amplus amiculum spes.\",\n            \"portfolio\": \"https://example.com/ddLKg\",\n            \"age\": 39,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-27T05:38:58.172Z\",\n            \"updatedAt\": \"2024-12-05T17:45:23.356Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ee\",\n            \"name\": \"Tonsor a adempti\",\n            \"avatarUrl\": \"Curtus custodia\",\n            \"email\": \"everardo.casper49@gmail.com\",\n            \"nid\": \"2506279295\",\n            \"phone\": \"8801848375950\",\n            \"bio\": \"Dicta error adipiscor.\",\n            \"portfolio\": \"https://example.com/1dh1A\",\n            \"age\": 43,\n            \"isActive\": true,\n            \"createdAt\": \"2024-02-17T04:59:18.749Z\",\n            \"updatedAt\": \"2024-12-14T13:09:35.570Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ef\",\n            \"name\": \"Cerno approbo de\",\n            \"avatarUrl\": \"Tenax subiungo\",\n            \"email\": \"kyla6@yahoo.com\",\n            \"nid\": \"3100963505\",\n            \"phone\": \"+8801972516004\",\n            \"bio\": \"Corrumpo benevolentia deludo.\",\n            \"portfolio\": \"https://example.com/nS0ra\",\n            \"age\": 113,\n            \"isActive\": true,\n            \"createdAt\": \"2024-08-02T12:30:00.698Z\",\n            \"updatedAt\": \"2024-11-23T16:18:39.489Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f0\",\n            \"name\": \"Coniuratio bland\",\n            \"avatarUrl\": \"Accusantium curvo\",\n            \"email\": \"bethel.nikolaus71@yahoo.com\",\n            \"nid\": \"3128702300\",\n            \"phone\": \"+8801859654199\",\n            \"bio\": \"Aspicio compono alo qui non animadverto.\",\n            \"portfolio\": \"https://example.com/MgqcE\",\n            \"age\": 36,\n            \"isActive\": true,\n            \"createdAt\": \"2024-08-22T16:07:48.867Z\",\n            \"updatedAt\": \"2024-08-21T12:21:41.959Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f1\",\n            \"name\": \"Vivo sortitus pr\",\n            \"avatarUrl\": \"Averto dolor\",\n            \"email\": \"tillman10@gmail.com\",\n            \"nid\": \"5079988777\",\n            \"phone\": \"8801516030568\",\n            \"bio\": \"Beneficium artificiose circumvenio apud ademptio.\",\n            \"portfolio\": \"https://example.com/sMhEe\",\n            \"age\": 101,\n            \"isActive\": true,\n            \"createdAt\": \"2025-01-29T12:33:32.538Z\",\n            \"updatedAt\": \"2024-04-03T09:20:45.518Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f2\",\n            \"name\": \"Umerus tener nam\",\n            \"avatarUrl\": \"Neque sophismata ex\",\n            \"email\": \"jarret_dach48@yahoo.com\",\n            \"nid\": \"0270582586\",\n            \"phone\": \"+8801920285783\",\n            \"bio\": \"Defaeco absum aestas tunc chirographum auctus.\",\n            \"portfolio\": \"https://example.com/BQfI2\",\n            \"age\": 87,\n            \"isActive\": true,\n            \"createdAt\": \"2024-08-29T15:04:02.983Z\",\n            \"updatedAt\": \"2024-07-05T22:01:37.027Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f3\",\n            \"name\": \"Tui clarus porro\",\n            \"avatarUrl\": \"Tribuo fuga sollers\",\n            \"email\": \"brandi_lockman@hotmail.com\",\n            \"nid\": \"4823128419\",\n            \"phone\": \"+01985496511\",\n            \"bio\": \"Cupio debitis depereo cibo sonitus.\",\n            \"portfolio\": \"https://example.com/edqr2\",\n            \"age\": 82,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-26T05:20:28.040Z\",\n            \"updatedAt\": \"2024-03-14T14:27:37.180Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f4\",\n            \"name\": \"Aliquam ustilo c\",\n            \"avatarUrl\": \"Conscendo\",\n            \"email\": \"fatima.runolfsson@gmail.com\",\n            \"nid\": \"1674663504\",\n            \"phone\": \"8801663526141\",\n            \"bio\": \"Deprecator aliquid spiritus suscipit alioqui angulus tamen.\",\n            \"portfolio\": \"https://example.com/HC0sA\",\n            \"age\": 23,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-10T02:04:24.815Z\",\n            \"updatedAt\": \"2024-11-06T09:10:47.112Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f5\",\n            \"name\": \"Ab pectus conspe\",\n            \"avatarUrl\": \"Nihil auxilium\",\n            \"email\": \"aditya.goyette68@hotmail.com\",\n            \"nid\": \"6574413698\",\n            \"phone\": \"+01695828022\",\n            \"bio\": \"Facilis avaritia desino ut aestivus ciminatio defungo corrumpo coaegresco.\",\n            \"portfolio\": \"https://example.com/xhQmw\",\n            \"age\": 90,\n            \"isActive\": true,\n            \"createdAt\": \"2024-04-15T06:50:43.951Z\",\n            \"updatedAt\": \"2024-06-02T04:28:32.396Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f6\",\n            \"name\": \"Confero pecus an\",\n            \"avatarUrl\": \"Totus ulciscor\",\n            \"email\": \"adolph.kunde71@yahoo.com\",\n            \"nid\": \"6164094261\",\n            \"phone\": \"01929911501\",\n            \"bio\": \"Alter turbo cernuus.\",\n            \"portfolio\": \"https://example.com/z3GiJ\",\n            \"age\": 96,\n            \"isActive\": true,\n            \"createdAt\": \"2024-11-04T09:16:20.749Z\",\n            \"updatedAt\": \"2024-07-11T04:28:53.890Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f7\",\n            \"name\": \"Demitto vos alia\",\n            \"avatarUrl\": \"Desolo deputo\",\n            \"email\": \"marian99@hotmail.com\",\n            \"nid\": \"0504320085\",\n            \"phone\": \"01482042777\",\n            \"bio\": \"Fugiat alioqui quam altus architecto colo colo sufficio.\",\n            \"portfolio\": \"https://example.com/voH76\",\n            \"age\": 42,\n            \"isActive\": false,\n            \"createdAt\": \"2024-09-25T13:06:11.678Z\",\n            \"updatedAt\": \"2024-07-12T10:52:55.251Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f8\",\n            \"name\": \"Eaque aeternus e\",\n            \"avatarUrl\": \"Corrigo esse\",\n            \"email\": \"myriam8@hotmail.com\",\n            \"nid\": \"4170951397\",\n            \"phone\": \"+8801904475854\",\n            \"bio\": \"Benigne annus carus depereo demum sapiente.\",\n            \"portfolio\": \"https://example.com/hDLti\",\n            \"age\": 105,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-23T21:56:35.849Z\",\n            \"updatedAt\": \"2025-02-02T20:51:24.590Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f9\",\n            \"name\": \"Vinco vinco repu\",\n            \"avatarUrl\": \"Ulciscor damnatio\",\n            \"email\": \"lafayette5@gmail.com\",\n            \"nid\": \"7719992680\",\n            \"phone\": \"+8801322240239\",\n            \"bio\": \"Trepide censura quo.\",\n            \"portfolio\": \"https://example.com/RShxt\",\n            \"age\": 83,\n            \"isActive\": false,\n            \"createdAt\": \"2024-07-14T11:49:10.367Z\",\n            \"updatedAt\": \"2024-08-13T00:39:42.739Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fa\",\n            \"name\": \"Templum decet te\",\n            \"avatarUrl\": \"Curatio video cito\",\n            \"email\": \"hailie.senger16@gmail.com\",\n            \"nid\": \"9084989709\",\n            \"phone\": \"8801920949522\",\n            \"bio\": \"Tener bibo cribro censura vesper.\",\n            \"portfolio\": \"https://example.com/gG5yi\",\n            \"age\": 96,\n            \"isActive\": true,\n            \"createdAt\": \"2024-05-25T03:14:12.070Z\",\n            \"updatedAt\": \"2024-07-06T08:10:30.950Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fb\",\n            \"name\": \"Debitis tersus a\",\n            \"avatarUrl\": \"Cetera adsidue via.\",\n            \"email\": \"beryl98@gmail.com\",\n            \"nid\": \"6858515636\",\n            \"phone\": \"01802038028\",\n            \"bio\": \"Terror vito currus creta nesciunt turbo.\",\n            \"portfolio\": \"https://example.com/t61cs\",\n            \"age\": 64,\n            \"isActive\": true,\n            \"createdAt\": \"2024-06-01T06:02:23.836Z\",\n            \"updatedAt\": \"2024-02-13T04:17:15.846Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fc\",\n            \"name\": \"Nemo tandem carp\",\n            \"avatarUrl\": \"Delinquo bene\",\n            \"email\": \"gerry_pfeffer6@yahoo.com\",\n            \"nid\": \"9225230893\",\n            \"phone\": \"8801403120329\",\n            \"bio\": \"Umbra spiculum validus thesis optio sono decipio.\",\n            \"portfolio\": \"https://example.com/s4vWD\",\n            \"age\": 39,\n            \"isActive\": false,\n            \"createdAt\": \"2024-02-19T03:36:12.755Z\",\n            \"updatedAt\": \"2024-04-02T17:25:44.501Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fd\",\n            \"name\": \"Reprehenderit ce\",\n            \"avatarUrl\": \"Caecus nesciunt\",\n            \"email\": \"ruthe.maggio25@gmail.com\",\n            \"nid\": \"4087375185\",\n            \"phone\": \"+01751730054\",\n            \"bio\": \"Pauci rerum coruscus accusamus uterque.\",\n            \"portfolio\": \"https://example.com/gPdM0\",\n            \"age\": 68,\n            \"isActive\": false,\n            \"createdAt\": \"2024-02-24T06:24:38.257Z\",\n            \"updatedAt\": \"2024-03-27T04:00:29.208Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fe\",\n            \"name\": \"Corporis comis v\",\n            \"avatarUrl\": \"Dolores coepi adamo.\",\n            \"email\": \"camren79@yahoo.com\",\n            \"nid\": \"0047494867\",\n            \"phone\": \"+01765802496\",\n            \"bio\": \"Accusator quod veritatis colo.\",\n            \"portfolio\": \"https://example.com/bv2oA\",\n            \"age\": 28,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-07T02:14:40.539Z\",\n            \"updatedAt\": \"2024-12-07T21:13:24.086Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ff\",\n            \"name\": \"Appositus tenus \",\n            \"avatarUrl\": \"Ascit ater\",\n            \"email\": \"annabel_purdy@yahoo.com\",\n            \"nid\": \"0639936859\",\n            \"phone\": \"8801808175718\",\n            \"bio\": \"Capio curtus bis damnatio voluntarius arceo caute totus suscipit.\",\n            \"portfolio\": \"https://example.com/oPciC\",\n            \"age\": 107,\n            \"isActive\": true,\n            \"createdAt\": \"2024-07-17T09:01:44.244Z\",\n            \"updatedAt\": \"2024-04-16T19:42:42.813Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a00\",\n            \"name\": \"Nam statua appel\",\n            \"avatarUrl\": \"Demonstro adipiscor\",\n            \"email\": \"brody26@hotmail.com\",\n            \"nid\": \"4963682076\",\n            \"phone\": \"+01370023155\",\n            \"bio\": \"Tenus cibus eum verbum tantillus adnuo cura tutamen debilito.\",\n            \"portfolio\": \"https://example.com/ngvnY\",\n            \"age\": 80,\n            \"isActive\": false,\n            \"createdAt\": \"2024-08-12T05:13:18.054Z\",\n            \"updatedAt\": \"2024-04-23T15:29:23.435Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a01\",\n            \"name\": \"Iusto magnam cur\",\n            \"avatarUrl\": \"Perspiciatis\",\n            \"email\": \"guido72@yahoo.com\",\n            \"nid\": \"8411411792\",\n            \"phone\": \"8801315883112\",\n            \"bio\": \"Tabula appello blandior tepesco cras depromo.\",\n            \"portfolio\": \"https://example.com/gGGN6\",\n            \"age\": 77,\n            \"isActive\": false,\n            \"createdAt\": \"2024-04-10T19:54:01.148Z\",\n            \"updatedAt\": \"2024-04-25T13:26:58.518Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a02\",\n            \"name\": \"Dicta spes suppo\",\n            \"avatarUrl\": \"Subnecto tyrannus\",\n            \"email\": \"cristina13@yahoo.com\",\n            \"nid\": \"4450546006\",\n            \"phone\": \"+01807783221\",\n            \"bio\": \"Articulus amicitia sed antiquus utrum censura cur vere quisquam.\",\n            \"portfolio\": \"https://example.com/oGIzl\",\n            \"age\": 51,\n            \"isActive\": true,\n            \"createdAt\": \"2024-10-30T09:48:57.350Z\",\n            \"updatedAt\": \"2025-01-31T13:24:53.990Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a03\",\n            \"name\": \"Volaticus creber\",\n            \"avatarUrl\": \"Utrimque velociter\",\n            \"email\": \"perry.heidenreich-abshire@gmail.com\",\n            \"nid\": \"8571318683\",\n            \"phone\": \"+01844628900\",\n            \"bio\": \"Sui bibo cornu deinde tot certe.\",\n            \"portfolio\": \"https://example.com/y0kPU\",\n            \"age\": 115,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-01T06:36:28.134Z\",\n            \"updatedAt\": \"2024-04-30T12:14:13.586Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a04\",\n            \"name\": \"Caries adsuesco \",\n            \"avatarUrl\": \"Universe numquam\",\n            \"email\": \"claudie53@gmail.com\",\n            \"nid\": \"0490873132\",\n            \"phone\": \"01828531262\",\n            \"bio\": \"Desino ventosus ter.\",\n            \"portfolio\": \"https://example.com/7OiKm\",\n            \"age\": 117,\n            \"isActive\": true,\n            \"createdAt\": \"2024-05-28T12:01:56.389Z\",\n            \"updatedAt\": \"2024-03-31T11:27:28.094Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a05\",\n            \"name\": \"Sumo toties perf\",\n            \"avatarUrl\": \"Vomica tergo\",\n            \"email\": \"marley93@yahoo.com\",\n            \"nid\": \"7545461286\",\n            \"phone\": \"+01401478565\",\n            \"bio\": \"Confugo sum eligendi utrum.\",\n            \"portfolio\": \"https://example.com/hW8CB\",\n            \"age\": 72,\n            \"isActive\": false,\n            \"createdAt\": \"2024-04-13T04:52:40.603Z\",\n            \"updatedAt\": \"2024-10-29T01:56:18.368Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a06\",\n            \"name\": \"Defungo accommod\",\n            \"avatarUrl\": \"Degusto quod uredo\",\n            \"email\": \"darion33@gmail.com\",\n            \"nid\": \"6290918144\",\n            \"phone\": \"01958837049\",\n            \"bio\": \"Vos tandem aegrus.\",\n            \"portfolio\": \"https://example.com/EblFe\",\n            \"age\": 30,\n            \"isActive\": true,\n            \"createdAt\": \"2024-05-19T12:41:20.756Z\",\n            \"updatedAt\": \"2024-05-22T06:16:08.834Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a07\",\n            \"name\": \"Audio sonitus co\",\n            \"avatarUrl\": \"Demum tui ager\",\n            \"email\": \"zelma80@yahoo.com\",\n            \"nid\": \"3827989719\",\n            \"phone\": \"01588428062\",\n            \"bio\": \"Veniam sophismata combibo conatus atqui suasoria amplitudo commodi denego vivo.\",\n            \"portfolio\": \"https://example.com/GzuG9\",\n            \"age\": 56,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-21T08:58:42.212Z\",\n            \"updatedAt\": \"2024-07-26T08:43:38.586Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a08\",\n            \"name\": \"Creta advenio al\",\n            \"avatarUrl\": \"Tamdiu una\",\n            \"email\": \"savanna49@hotmail.com\",\n            \"nid\": \"8493653373\",\n            \"phone\": \"+01859947328\",\n            \"bio\": \"Territo delicate torqueo dolorem carmen.\",\n            \"portfolio\": \"https://example.com/DIUcF\",\n            \"age\": 120,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-18T07:43:18.833Z\",\n            \"updatedAt\": \"2025-01-27T21:41:42.483Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a09\",\n            \"name\": \"Pecus thymum tho\",\n            \"avatarUrl\": \"Fugit repellendus\",\n            \"email\": \"amy_conroy@gmail.com\",\n            \"nid\": \"8978868946\",\n            \"phone\": \"01397088338\",\n            \"bio\": \"Clementia depulso cupiditas mollitia velut celebrer uberrime clamo.\",\n            \"portfolio\": \"https://example.com/yEbDN\",\n            \"age\": 26,\n            \"isActive\": false,\n            \"createdAt\": \"2024-07-16T14:56:14.760Z\",\n            \"updatedAt\": \"2024-07-10T23:25:16.425Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0a\",\n            \"name\": \"Umerus vorax cal\",\n            \"avatarUrl\": \"Vomito benigne\",\n            \"email\": \"bernie.bruen-ondricka59@gmail.com\",\n            \"nid\": \"6808190207\",\n            \"phone\": \"+01422881828\",\n            \"bio\": \"Beatus verto sed voco carcer cursus.\",\n            \"portfolio\": \"https://example.com/ksRoy\",\n            \"age\": 72,\n            \"isActive\": true,\n            \"createdAt\": \"2024-02-16T11:24:14.198Z\",\n            \"updatedAt\": \"2024-09-02T13:25:53.319Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0b\",\n            \"name\": \"Advoco subnecto \",\n            \"avatarUrl\": \"Abundans damno\",\n            \"email\": \"orin.mayert@hotmail.com\",\n            \"nid\": \"3588566313\",\n            \"phone\": \"+01331438527\",\n            \"bio\": \"Credo est textus adsuesco capillus talus decumbo est vix thorax.\",\n            \"portfolio\": \"https://example.com/POvh2\",\n            \"age\": 55,\n            \"isActive\": true,\n            \"createdAt\": \"2024-06-11T10:21:41.988Z\",\n            \"updatedAt\": \"2024-07-30T16:22:51.938Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0c\",\n            \"name\": \"Assentator solli\",\n            \"avatarUrl\": \"Tepidus amo\",\n            \"email\": \"isaias_waelchi70@hotmail.com\",\n            \"nid\": \"3443123639\",\n            \"phone\": \"+8801895785858\",\n            \"bio\": \"Qui utilis conculco audax antea.\",\n            \"portfolio\": \"https://example.com/WTPlD\",\n            \"age\": 21,\n            \"isActive\": true,\n            \"createdAt\": \"2025-01-22T17:52:08.377Z\",\n            \"updatedAt\": \"2024-12-05T03:35:44.855Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0d\",\n            \"name\": \"Turpis pauper as\",\n            \"avatarUrl\": \"Nostrum et desidero\",\n            \"email\": \"marley_smitham23@yahoo.com\",\n            \"nid\": \"3655890641\",\n            \"phone\": \"01795231643\",\n            \"bio\": \"Truculenter vulgivagus vallum crinis eligendi.\",\n            \"portfolio\": \"https://example.com/jrcM7\",\n            \"age\": 45,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-17T22:37:05.681Z\",\n            \"updatedAt\": \"2024-06-28T12:53:59.732Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0e\",\n            \"name\": \"Quaerat bellicus\",\n            \"avatarUrl\": \"Aiunt antea\",\n            \"email\": \"cedrick_kuvalis@gmail.com\",\n            \"nid\": \"0031691223\",\n            \"phone\": \"01999840662\",\n            \"bio\": \"Adfectus contigo comparo custodia creator animus voco.\",\n            \"portfolio\": \"https://example.com/LccHZ\",\n            \"age\": 68,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-19T19:04:42.112Z\",\n            \"updatedAt\": \"2024-08-03T10:10:17.860Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0f\",\n            \"name\": \"Surculus magni p\",\n            \"avatarUrl\": \"Derelinquo capto\",\n            \"email\": \"edmund_vonrueden@hotmail.com\",\n            \"nid\": \"0010936746\",\n            \"phone\": \"01434535142\",\n            \"bio\": \"Creta assentator acceptus laborum varius cur decens.\",\n            \"portfolio\": \"https://example.com/ZjuSb\",\n            \"age\": 28,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-10T13:13:04.660Z\",\n            \"updatedAt\": \"2024-07-04T22:26:38.177Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a10\",\n            \"name\": \"Viscus aspicio t\",\n            \"avatarUrl\": \"Blandior corrupti\",\n            \"email\": \"buddy85@hotmail.com\",\n            \"nid\": \"0338402204\",\n            \"phone\": \"+01725589888\",\n            \"bio\": \"Credo decretum conspergo quasi.\",\n            \"portfolio\": \"https://example.com/qmszV\",\n            \"age\": 84,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-08T05:46:06.913Z\",\n            \"updatedAt\": \"2025-02-10T05:02:15.968Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a11\",\n            \"name\": \"Strenuus vigor v\",\n            \"avatarUrl\": \"Cena tricesimus qui\",\n            \"email\": \"raegan58@gmail.com\",\n            \"nid\": \"9826221883\",\n            \"phone\": \"+01837549031\",\n            \"bio\": \"Acsi coerceo sequi arcesso.\",\n            \"portfolio\": \"https://example.com/V8uBn\",\n            \"age\": 21,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-12T12:28:07.953Z\",\n            \"updatedAt\": \"2024-09-27T08:11:52.379Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a12\",\n            \"name\": \"Turpis corrigo v\",\n            \"avatarUrl\": \"Voluptatem urbanus\",\n            \"email\": \"hazle_bins@yahoo.com\",\n            \"nid\": \"8801535029\",\n            \"phone\": \"+8801809545006\",\n            \"bio\": \"Uredo territo civis carus uterque vir.\",\n            \"portfolio\": \"https://example.com/busP9\",\n            \"age\": 40,\n            \"isActive\": false,\n            \"createdAt\": \"2024-10-26T20:51:08.661Z\",\n            \"updatedAt\": \"2024-03-16T01:49:27.253Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a13\",\n            \"name\": \"Aqua correptius \",\n            \"avatarUrl\": \"Vigilo vix apto\",\n            \"email\": \"eloy_jaskolski@gmail.com\",\n            \"nid\": \"8118323352\",\n            \"phone\": \"8801549362998\",\n            \"bio\": \"Xiphias tibi audeo vesper vicinus laudantium.\",\n            \"portfolio\": \"https://example.com/7ZKUh\",\n            \"age\": 84,\n            \"isActive\": false,\n            \"createdAt\": \"2024-07-07T17:39:32.304Z\",\n            \"updatedAt\": \"2024-03-18T19:14:27.206Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a14\",\n            \"name\": \"Centum altus app\",\n            \"avatarUrl\": \"Templum comburo\",\n            \"email\": \"irma.hermiston-ruecker@hotmail.com\",\n            \"nid\": \"4670756720\",\n            \"phone\": \"8801678481273\",\n            \"bio\": \"Terga cum claudeo cunabula cursus appono dicta quaerat astrum spes.\",\n            \"portfolio\": \"https://example.com/f7V5U\",\n            \"age\": 67,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-02T10:53:14.541Z\",\n            \"updatedAt\": \"2024-10-08T23:47:51.198Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a15\",\n            \"name\": \"Carmen vis confo\",\n            \"avatarUrl\": \"Auctor surculus\",\n            \"email\": \"annamae_gerhold58@yahoo.com\",\n            \"nid\": \"0284379838\",\n            \"phone\": \"+01724602837\",\n            \"bio\": \"Contego traho verus appello animus acidus.\",\n            \"portfolio\": \"https://example.com/HoWCH\",\n            \"age\": 108,\n            \"isActive\": false,\n            \"createdAt\": \"2024-03-07T00:11:32.612Z\",\n            \"updatedAt\": \"2024-09-01T19:50:46.405Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a16\",\n            \"name\": \"Crustulum vapulu\",\n            \"avatarUrl\": \"Rerum causa benigne\",\n            \"email\": \"anita3@gmail.com\",\n            \"nid\": \"9181455743\",\n            \"phone\": \"+01889490291\",\n            \"bio\": \"Curatio tot cura deinde tutis sonitus subiungo summa.\",\n            \"portfolio\": \"https://example.com/rXDeS\",\n            \"age\": 35,\n            \"isActive\": true,\n            \"createdAt\": \"2024-11-10T08:36:06.892Z\",\n            \"updatedAt\": \"2024-09-19T05:59:51.245Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a17\",\n            \"name\": \"Urbs clibanus vu\",\n            \"avatarUrl\": \"Vobis adulescens\",\n            \"email\": \"victoria_ledner56@gmail.com\",\n            \"nid\": \"2674253851\",\n            \"phone\": \"8801904963730\",\n            \"bio\": \"Umerus cursim cenaculum surculus cultura blanditiis.\",\n            \"portfolio\": \"https://example.com/qkLDD\",\n            \"age\": 80,\n            \"isActive\": false,\n            \"createdAt\": \"2024-06-23T17:30:33.320Z\",\n            \"updatedAt\": \"2024-08-23T02:48:38.898Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a18\",\n            \"name\": \"Tergeo unde amit\",\n            \"avatarUrl\": \"Cras occaecati iste\",\n            \"email\": \"rashawn92@gmail.com\",\n            \"nid\": \"5723803331\",\n            \"phone\": \"01965293619\",\n            \"bio\": \"Dedecor utroque creber aliquid trans.\",\n            \"portfolio\": \"https://example.com/HObzu\",\n            \"age\": 56,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-26T02:30:23.658Z\",\n            \"updatedAt\": \"2025-02-04T22:35:51.647Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a19\",\n            \"name\": \"Commemoro suasor\",\n            \"avatarUrl\": \"Coruscus curto\",\n            \"email\": \"lue.walsh25@yahoo.com\",\n            \"nid\": \"2005062830\",\n            \"phone\": \"+8801384918375\",\n            \"bio\": \"Toties adiuvo patior sulum asporto terminatio vetus viduo exercitationem.\",\n            \"portfolio\": \"https://example.com/Pijph\",\n            \"age\": 22,\n            \"isActive\": true,\n            \"createdAt\": \"2024-10-04T17:58:18.346Z\",\n            \"updatedAt\": \"2024-03-06T18:35:28.441Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1a\",\n            \"name\": \"Conitor caritas \",\n            \"avatarUrl\": \"Cenaculum uredo\",\n            \"email\": \"sage_stark37@gmail.com\",\n            \"nid\": \"8135499898\",\n            \"phone\": \"8801617432400\",\n            \"bio\": \"Vulnus vel rem.\",\n            \"portfolio\": \"https://example.com/kVf8N\",\n            \"age\": 18,\n            \"isActive\": true,\n            \"createdAt\": \"2024-06-07T04:45:25.849Z\",\n            \"updatedAt\": \"2024-06-21T13:39:45.183Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1b\",\n            \"name\": \"Curatio tenax va\",\n            \"avatarUrl\": \"Fuga quod cetera\",\n            \"email\": \"alfonzo7@hotmail.com\",\n            \"nid\": \"8258919865\",\n            \"phone\": \"+01526774098\",\n            \"bio\": \"Cimentarius ascit defetiscor spargo.\",\n            \"portfolio\": \"https://example.com/OSGJX\",\n            \"age\": 79,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-05T22:44:18.577Z\",\n            \"updatedAt\": \"2024-05-08T13:12:31.676Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1c\",\n            \"name\": \"Curriculum compo\",\n            \"avatarUrl\": \"Quos pax verbera\",\n            \"email\": \"raphaelle.crist77@gmail.com\",\n            \"nid\": \"7972140208\",\n            \"phone\": \"+8801504720084\",\n            \"bio\": \"Volutabrum vicissitudo vulgivagus votum terga.\",\n            \"portfolio\": \"https://example.com/ecR8s\",\n            \"age\": 117,\n            \"isActive\": true,\n            \"createdAt\": \"2024-07-15T09:32:38.365Z\",\n            \"updatedAt\": \"2024-02-18T01:15:28.834Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1d\",\n            \"name\": \"Claudeo accusant\",\n            \"avatarUrl\": \"Tolero velociter\",\n            \"email\": \"amely55@yahoo.com\",\n            \"nid\": \"0215393649\",\n            \"phone\": \"+8801861044705\",\n            \"bio\": \"Depono veritas solitudo comes coniecto velut admitto sonitus.\",\n            \"portfolio\": \"https://example.com/nHrXn\",\n            \"age\": 81,\n            \"isActive\": true,\n            \"createdAt\": \"2024-04-10T07:04:37.760Z\",\n            \"updatedAt\": \"2025-02-07T06:30:56.425Z\"\n        }\n    ],\n    \"errors\": {}\n}"
										},
										{
											"id": "0af6dae2-52bf-47d2-9ffe-fb9128e7f296",
											"name": "BAD_REQUEST 400",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{SERVER_URL}}/api/users/create/dummy?counts={{count}}",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"users",
														"create",
														"dummy"
													],
													"query": [
														{
															"key": "counts",
															"value": "{{count}}"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Vary",
													"value": "Origin, Accept-Encoding"
												},
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "142"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Date",
													"value": "Tue, 11 Feb 2025 10:37:05 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"meta\": {\n        \"route\": \"/create/dummy?counts=34\"\n    },\n    \"status\": {\n        \"message\": \"Bad Request: The \\\"count\\\" parameter is required to create dummy data.\"\n    },\n    \"data\": {},\n    \"errors\": {}\n}"
										}
									]
								},
								{
									"name": "POST /api/users/create-dummy?count={{count}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "ed911b00-7515-477d-85f2-87b8d7faac01"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
													"",
													"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
													"",
													"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    if (pm.response.code === 201) {",
													"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"",
													"        responseData.data.forEach(function (user) {",
													"            pm.expect(user).to.be.an('object');",
													"            pm.expect(user._id).to.be.a('string');",
													"            pm.expect(user.name).to.be.a('string');",
													"            pm.expect(user.avatarUrl).to.be.a('string');",
													"            pm.expect(user.email).to.be.a('string');",
													"            pm.expect(user.nid).to.be.a('string');",
													"            pm.expect(user.phone).to.be.a('string');",
													"            pm.expect(user.bio).to.be.a('string');",
													"            pm.expect(user.portfolio).to.be.a('string');",
													"            pm.expect(user.age).to.be.a('number');",
													"            pm.expect(user.isActive).to.be.a('boolean');",
													"            pm.expect(user.createdAt).to.be.a('string');",
													"            pm.expect(user.updatedAt).to.be.a('string');",
													"        });",
													"",
													"        // You can add more specific value checks here if needed, for example:",
													"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
													"",
													"    } else if (pm.response.code === 409) {",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.meta).to.have.property('route', '/');",
													"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
													"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
													"        pm.expect(responseBody.errors).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "e1c50a36-5a0e-4823-bb69-892eaf9eea5e"
											}
										}
									],
									"id": "f03e714e-a34a-4172-b1c0-0a199dc51059",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/create-dummy?count={{count}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"create-dummy"
											],
											"query": [
												{
													"key": "count",
													"value": "{{count}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST /api/users/create-dummy-data?count={{count}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "1df97fa7-a42c-4f22-bfe7-28e425d8cc7b"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
													"",
													"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
													"",
													"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    if (pm.response.code === 201) {",
													"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"",
													"        responseData.data.forEach(function (user) {",
													"            pm.expect(user).to.be.an('object');",
													"            pm.expect(user._id).to.be.a('string');",
													"            pm.expect(user.name).to.be.a('string');",
													"            pm.expect(user.avatarUrl).to.be.a('string');",
													"            pm.expect(user.email).to.be.a('string');",
													"            pm.expect(user.nid).to.be.a('string');",
													"            pm.expect(user.phone).to.be.a('string');",
													"            pm.expect(user.bio).to.be.a('string');",
													"            pm.expect(user.portfolio).to.be.a('string');",
													"            pm.expect(user.age).to.be.a('number');",
													"            pm.expect(user.isActive).to.be.a('boolean');",
													"            pm.expect(user.createdAt).to.be.a('string');",
													"            pm.expect(user.updatedAt).to.be.a('string');",
													"        });",
													"",
													"        // You can add more specific value checks here if needed, for example:",
													"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
													"",
													"    } else if (pm.response.code === 409) {",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.meta).to.have.property('route', '/');",
													"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
													"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
													"        pm.expect(responseBody.errors).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "0344faf4-1932-49a1-955d-996e5d464f16"
											}
										}
									],
									"id": "55ee18f3-e10d-403b-9696-ba753cbbff3c",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/create-dummy-data?count={{count}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"create-dummy-data"
											],
											"query": [
												{
													"key": "count",
													"value": "{{count}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST /api/users/create-fake?count={{count}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "cd1827f1-43b0-4a37-9992-61d224a66140"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
													"",
													"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
													"",
													"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    if (pm.response.code === 201) {",
													"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"",
													"        responseData.data.forEach(function (user) {",
													"            pm.expect(user).to.be.an('object');",
													"            pm.expect(user._id).to.be.a('string');",
													"            pm.expect(user.name).to.be.a('string');",
													"            pm.expect(user.avatarUrl).to.be.a('string');",
													"            pm.expect(user.email).to.be.a('string');",
													"            pm.expect(user.nid).to.be.a('string');",
													"            pm.expect(user.phone).to.be.a('string');",
													"            pm.expect(user.bio).to.be.a('string');",
													"            pm.expect(user.portfolio).to.be.a('string');",
													"            pm.expect(user.age).to.be.a('number');",
													"            pm.expect(user.isActive).to.be.a('boolean');",
													"            pm.expect(user.createdAt).to.be.a('string');",
													"            pm.expect(user.updatedAt).to.be.a('string');",
													"        });",
													"",
													"        // You can add more specific value checks here if needed, for example:",
													"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
													"",
													"    } else if (pm.response.code === 409) {",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.meta).to.have.property('route', '/');",
													"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
													"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
													"        pm.expect(responseBody.errors).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "4af7a398-f7dc-4a30-82f4-d7bf7ff66316"
											}
										}
									],
									"id": "faf2f1d0-be2d-4ae7-bd96-9426bae1ff99",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/create-fake?count={{count}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"create-fake"
											],
											"query": [
												{
													"key": "count",
													"value": "{{count}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST /api/users/create-fake-data?count={{count}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d8686318-d197-4363-a46a-8306e055778c"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
													"",
													"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
													"",
													"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    if (pm.response.code === 201) {",
													"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"",
													"        responseData.data.forEach(function (user) {",
													"            pm.expect(user).to.be.an('object');",
													"            pm.expect(user._id).to.be.a('string');",
													"            pm.expect(user.name).to.be.a('string');",
													"            pm.expect(user.avatarUrl).to.be.a('string');",
													"            pm.expect(user.email).to.be.a('string');",
													"            pm.expect(user.nid).to.be.a('string');",
													"            pm.expect(user.phone).to.be.a('string');",
													"            pm.expect(user.bio).to.be.a('string');",
													"            pm.expect(user.portfolio).to.be.a('string');",
													"            pm.expect(user.age).to.be.a('number');",
													"            pm.expect(user.isActive).to.be.a('boolean');",
													"            pm.expect(user.createdAt).to.be.a('string');",
													"            pm.expect(user.updatedAt).to.be.a('string');",
													"        });",
													"",
													"        // You can add more specific value checks here if needed, for example:",
													"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
													"",
													"    } else if (pm.response.code === 409) {",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.meta).to.have.property('route', '/');",
													"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
													"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
													"        pm.expect(responseBody.errors).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "0464c03e-88f5-4691-9748-3ae5e12e2b2d"
											}
										}
									],
									"id": "0635bdbd-81d9-4c13-a8da-97d77487c5c5",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/create-fake-data?count={{count}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"create-fake-data"
											],
											"query": [
												{
													"key": "count",
													"value": "{{count}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST /api/users/create-sample?count={{count}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "38fde8ca-5a2b-4508-a0bf-16c267626c7a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
													"",
													"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
													"",
													"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    if (pm.response.code === 201) {",
													"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"",
													"        responseData.data.forEach(function (user) {",
													"            pm.expect(user).to.be.an('object');",
													"            pm.expect(user._id).to.be.a('string');",
													"            pm.expect(user.name).to.be.a('string');",
													"            pm.expect(user.avatarUrl).to.be.a('string');",
													"            pm.expect(user.email).to.be.a('string');",
													"            pm.expect(user.nid).to.be.a('string');",
													"            pm.expect(user.phone).to.be.a('string');",
													"            pm.expect(user.bio).to.be.a('string');",
													"            pm.expect(user.portfolio).to.be.a('string');",
													"            pm.expect(user.age).to.be.a('number');",
													"            pm.expect(user.isActive).to.be.a('boolean');",
													"            pm.expect(user.createdAt).to.be.a('string');",
													"            pm.expect(user.updatedAt).to.be.a('string');",
													"        });",
													"",
													"        // You can add more specific value checks here if needed, for example:",
													"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
													"",
													"    } else if (pm.response.code === 409) {",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.meta).to.have.property('route', '/');",
													"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
													"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
													"        pm.expect(responseBody.errors).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "6b2d6c4b-b508-4415-b779-26c724933afe"
											}
										}
									],
									"id": "6fb20d84-642e-42eb-b9fd-8a9d78cf163e",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/create-sample?count={{count}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"create-sample"
											],
											"query": [
												{
													"key": "count",
													"value": "{{count}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST /api/users/create-sample-data?count={{count}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "18ff0975-0cf9-4cde-9e72-98f93d44236c"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
													"",
													"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
													"",
													"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    if (pm.response.code === 201) {",
													"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"",
													"        responseData.data.forEach(function (user) {",
													"            pm.expect(user).to.be.an('object');",
													"            pm.expect(user._id).to.be.a('string');",
													"            pm.expect(user.name).to.be.a('string');",
													"            pm.expect(user.avatarUrl).to.be.a('string');",
													"            pm.expect(user.email).to.be.a('string');",
													"            pm.expect(user.nid).to.be.a('string');",
													"            pm.expect(user.phone).to.be.a('string');",
													"            pm.expect(user.bio).to.be.a('string');",
													"            pm.expect(user.portfolio).to.be.a('string');",
													"            pm.expect(user.age).to.be.a('number');",
													"            pm.expect(user.isActive).to.be.a('boolean');",
													"            pm.expect(user.createdAt).to.be.a('string');",
													"            pm.expect(user.updatedAt).to.be.a('string');",
													"        });",
													"",
													"        // You can add more specific value checks here if needed, for example:",
													"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
													"",
													"    } else if (pm.response.code === 409) {",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.meta).to.have.property('route', '/');",
													"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
													"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
													"        pm.expect(responseBody.errors).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "b7038e4e-d963-4d7a-8926-8134a086b72c"
											}
										}
									],
									"id": "73bf57da-b95f-434c-89a0-d94896a0c6f9",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/create-sample-data?count={{count}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"create-sample-data"
											],
											"query": [
												{
													"key": "count",
													"value": "{{count}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST /api/users/generate-sample?count={{count}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "e6a0ff65-7e61-4036-836f-9383fab163ed"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
													"",
													"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
													"",
													"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    if (pm.response.code === 201) {",
													"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"",
													"        responseData.data.forEach(function (user) {",
													"            pm.expect(user).to.be.an('object');",
													"            pm.expect(user._id).to.be.a('string');",
													"            pm.expect(user.name).to.be.a('string');",
													"            pm.expect(user.avatarUrl).to.be.a('string');",
													"            pm.expect(user.email).to.be.a('string');",
													"            pm.expect(user.nid).to.be.a('string');",
													"            pm.expect(user.phone).to.be.a('string');",
													"            pm.expect(user.bio).to.be.a('string');",
													"            pm.expect(user.portfolio).to.be.a('string');",
													"            pm.expect(user.age).to.be.a('number');",
													"            pm.expect(user.isActive).to.be.a('boolean');",
													"            pm.expect(user.createdAt).to.be.a('string');",
													"            pm.expect(user.updatedAt).to.be.a('string');",
													"        });",
													"",
													"        // You can add more specific value checks here if needed, for example:",
													"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
													"",
													"    } else if (pm.response.code === 409) {",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.meta).to.have.property('route', '/');",
													"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
													"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
													"        pm.expect(responseBody.errors).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "b46f2e44-c666-4944-8ba6-f30f83d27cab"
											}
										}
									],
									"id": "1e14571a-07b4-42bc-bf4f-7957af33a597",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/generate-sample?count={{count}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"generate-sample"
											],
											"query": [
												{
													"key": "count",
													"value": "{{count}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "POST /api/users/generate-sample-data?count={{count}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "0019779f-a8fa-4150-94e8-0e7d17d863ac"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});",
													"",
													"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
													"",
													"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
													"",
													"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    if (pm.response.code === 201) {",
													"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"",
													"        responseData.data.forEach(function (user) {",
													"            pm.expect(user).to.be.an('object');",
													"            pm.expect(user._id).to.be.a('string');",
													"            pm.expect(user.name).to.be.a('string');",
													"            pm.expect(user.avatarUrl).to.be.a('string');",
													"            pm.expect(user.email).to.be.a('string');",
													"            pm.expect(user.nid).to.be.a('string');",
													"            pm.expect(user.phone).to.be.a('string');",
													"            pm.expect(user.bio).to.be.a('string');",
													"            pm.expect(user.portfolio).to.be.a('string');",
													"            pm.expect(user.age).to.be.a('number');",
													"            pm.expect(user.isActive).to.be.a('boolean');",
													"            pm.expect(user.createdAt).to.be.a('string');",
													"            pm.expect(user.updatedAt).to.be.a('string');",
													"        });",
													"",
													"        // You can add more specific value checks here if needed, for example:",
													"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
													"",
													"    } else if (pm.response.code === 409) {",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.meta).to.have.property('route', '/');",
													"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
													"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
													"        pm.expect(responseBody.errors).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "2300143e-c112-45fe-adb8-49b31692f9dd"
											}
										}
									],
									"id": "4fd6fcce-1067-45ca-9781-cea8198034d5",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/generate-sample-data?count={{count}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"generate-sample-data"
											],
											"query": [
												{
													"key": "count",
													"value": "{{count}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "12b6088b-6244-4801-bef4-9d1e6ca6111d",
							"description": "Routes for POST requests for users"
						},
						{
							"name": "GET",
							"item": [
								{
									"name": "GET /api/users/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"const users = responseData.data;",
													"",
													"pm.test(\"Response status code is 200 or 404\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"  const responseBody = pm.response.json();",
													"",
													"  // Check top-level keys",
													"  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"",
													"  if (pm.response.code === 200) {",
													"      // For a successful GET request, expect a success status",
													"      pm.expect(responseBody.status).to.have.property('success', true);",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
													"",
													"      // Validate that data is an array",
													"      pm.expect(responseBody.data).to.be.an('array');",
													"",
													"      // For each user, validate required keys and their types",
													"      responseBody.data.forEach(user => {",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(user);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"      });",
													"  } else if (pm.response.code === 409) {",
													"      // In case of a conflict error, verify that the response is formatted as expected",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
													"      pm.expect(responseBody.data).to.be.empty;",
													"      pm.expect(responseBody.errors).to.be.empty;",
													"  } else {",
													"      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"  }",
													"});",
													"",
													"// Define groups",
													"const groups = {",
													"  \"20s\": [],",
													"  \"30s\": [],",
													"  \"40s\": [],",
													"  \"50s\": [],",
													"  \"60s\": []",
													"};",
													"",
													"// Group users by age",
													"users.forEach(user => {",
													"  if (user.age < 30) {",
													"    groups[\"20s\"].push(user);",
													"  } else if (user.age < 40) {",
													"    groups[\"30s\"].push(user);",
													"  } else if (user.age < 50) {",
													"    groups[\"40s\"].push(user);",
													"  } else if (user.age < 60) {",
													"    groups[\"50s\"].push(user);",
													"  } else {",
													"    groups[\"60s\"].push(user);",
													"  }",
													"});",
													"",
													"// Convert groups object into an array for easier iteration in Handlebars",
													"const groupArray = [];",
													"for (let key in groups) {",
													"  if (groups[key].length > 0) {",
													"    groupArray.push({ group: key, users: groups[key] });",
													"  }",
													"}",
													"",
													"// Prepare data for the pie chart",
													"const chartLabels = groupArray.map(g => g.group);",
													"const chartCounts = groupArray.map(g => g.users.length);",
													"// Define colors for each slice of the pie chart",
													"const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
													"",
													"// Pre-stringify chart data to inject valid JSON into the template",
													"const chartLabelsJSON = JSON.stringify(chartLabels);",
													"const chartCountsJSON = JSON.stringify(chartCounts);",
													"const chartColorsJSON = JSON.stringify(chartColors);",
													"",
													"// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
													"pm.visualizer.set(`",
													"<html>",
													"  <head>",
													"    <!-- Load Tailwind CSS from CDN -->",
													"    <script src=\"https://cdn.tailwindcss.com\"></script>",
													"",
													"    <!-- Load Chart.js from CDN -->",
													"    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
													"  </head>",
													"",
													"  <body class=\"bg-gray-100 font-sans\">",
													"    <div class=\"container mx-auto p-4\">",
													"      <!-- Pie Chart Section -->",
													"      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
													"        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
													"         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
													"      </div>",
													"      ",
													"      <!-- Tables for Each Age Group -->",
													"      {{#each groups}}",
													"        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
													"          <div class=\"bg-blue-500 px-4 py-1\">",
													"            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
													"          </div>",
													"          <div class=\"overflow-x-auto\">",
													"            <table class=\"min-w-full divide-y divide-gray-200\">",
													"              <thead class=\"bg-gray-50\">",
													"                <tr>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
													"                </tr>",
													"              </thead>",
													"              <tbody class=\"bg-white divide-y divide-gray-200\">",
													"                {{#each users}}",
													"                  <tr class=\"hover:bg-gray-100\">",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
													"                  </tr>",
													"                {{/each}}",
													"              </tbody>",
													"            </table>",
													"          </div>",
													"        </div>",
													"      {{/each}}",
													"    </div>",
													"    ",
													"    <!-- Inline Script to Initialize the Pie Chart -->",
													"    <script>",
													"      // Get the 2D drawing context of the pieChart canvas",
													"      const ctx = document.getElementById('pieChart').getContext('2d');",
													"      // Create a new pie chart using Chart.js",
													"      new Chart(ctx, {",
													"        type: 'pie',",
													"        data: {",
													"          labels: {{{chartLabels}}},",
													"          datasets: [{",
													"            data: {{{chartCounts}}},",
													"            backgroundColor: {{{chartColors}}}",
													"          }]",
													"        },",
													"        options: {",
													"          responsive: true,",
													"          plugins: {",
													"            legend: {",
													"              position: 'bottom'",
													"            }",
													"          }",
													"        }",
													"      });",
													"    </script>",
													"  </body>",
													"</html>",
													"`, { ",
													"  groups: groupArray,",
													"  chartLabels: chartLabelsJSON,",
													"  chartCounts: chartCountsJSON,",
													"  chartColors: chartColorsJSON",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "a25df0ca-b5df-4b2c-a09e-7a15ed49982d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "904f1878-fb84-4b54-b758-58fae7206efc"
											}
										}
									],
									"id": "e095af2b-6082-4af9-a265-8c1d9e7528d8",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"response": [
										{
											"id": "3bc235b2-430a-414b-a073-cfca6ca5f0bc",
											"name": "OK 200",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{SERVER_URL}}/api/users",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"users"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Vary",
													"value": "Origin, Accept-Encoding"
												},
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "1053"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Feb 2025 11:03:31 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"meta\": {\n        \"route\": \"/\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 10 Userss found with filters: None, sorted by '-createdAt', page 1, limit 10.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67ac69c1b73620249f25e387\",\n            \"name\": \"Thomas\",\n            \"avatarUrl\": \"https://avatars.githubusercontent.com/u/85088082\",\n            \"email\": \"Daphney_Torphy@gmail.com\",\n            \"nid\": \"1000000732\",\n            \"phone\": \"+8801750501605\",\n            \"bio\": \"Veritatis sit voluptatem.\",\n            \"portfolio\": \"https://claudie.name\",\n            \"age\": 21,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-12T09:28:33.207Z\",\n            \"updatedAt\": \"2025-02-12T09:28:33.207Z\"\n        },\n        {\n            \"_id\": \"67ac69a6b73620249f25e381\",\n            \"name\": \"Tony Kertzmann\",\n            \"avatarUrl\": \"https://avatars.githubusercontent.com/u/68896972\",\n            \"email\": \"Carissa_Feeney@gmail.com\",\n            \"nid\": \"1000000401\",\n            \"phone\": \"+8801734669415\",\n            \"bio\": \"Velit et iste aliquam et voluptates ex.\",\n            \"portfolio\": \"http://arlene.info\",\n            \"age\": 27,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-12T09:28:06.326Z\",\n            \"updatedAt\": \"2025-02-12T09:28:06.326Z\"\n        },\n        {\n            \"_id\": \"67ac69a1b73620249f25e37b\",\n            \"name\": \"Lillie Hintz\",\n            \"avatarUrl\": \"https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1011.jpg\",\n            \"email\": \"Rashawn23@hotmail.com\",\n            \"nid\": \"1000000004\",\n            \"phone\": \"+8801718463621\",\n            \"bio\": \"Inventore libero ad ut est ratione ea.\",\n            \"portfolio\": \"http://bryana.name\",\n            \"age\": 40,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-12T09:28:01.194Z\",\n            \"updatedAt\": \"2025-02-12T09:28:01.194Z\"\n        },\n        {\n            \"_id\": \"67ac681eb73620249f25e375\",\n            \"name\": \"Andre Sporer\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"Nia44@yahoo.com\",\n            \"nid\": \"1000000041\",\n            \"phone\": \"+8801724256094\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/41\",\n            \"age\": 23,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-12T09:21:34.866Z\",\n            \"updatedAt\": \"2025-02-12T09:21:34.866Z\"\n        },\n        {\n            \"_id\": \"67ac6817b73620249f25e36f\",\n            \"name\": \"Marty Sipes\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"Nicholaus_Stehr@hotmail.com\",\n            \"nid\": \"1000000153\",\n            \"phone\": \"+8801741837241\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/153\",\n            \"age\": 44,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-12T09:21:27.863Z\",\n            \"updatedAt\": \"2025-02-12T09:21:27.863Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b90\",\n            \"name\": \"Alice Johnson\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user226@example.com\",\n            \"nid\": \"1000000226\",\n            \"phone\": \"+8801792028713\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/226\",\n            \"age\": 44,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-11T12:40:43.127Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.127Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b8e\",\n            \"name\": \"Jane Smith\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user682@example.com\",\n            \"nid\": \"1000000682\",\n            \"phone\": \"+8801752993212\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/682\",\n            \"age\": 34,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-11T12:40:43.125Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.125Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b8c\",\n            \"name\": \"Emily Davis\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user148@example.com\",\n            \"nid\": \"1000000148\",\n            \"phone\": \"+8801780771528\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/148\",\n            \"age\": 27,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-11T12:40:43.123Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.123Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b8a\",\n            \"name\": \"John Doe\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user258@example.com\",\n            \"nid\": \"1000000258\",\n            \"phone\": \"+8801790854544\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/258\",\n            \"age\": 19,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-11T12:40:43.122Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.122Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b87\",\n            \"name\": \"Jane Smith\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user140@example.com\",\n            \"nid\": \"1000000140\",\n            \"phone\": \"+8801792123970\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/140\",\n            \"age\": 62,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-11T12:40:43.112Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.112Z\"\n        }\n    ],\n    \"errors\": {}\n}"
										}
									]
								},
								{
									"name": "GET /api/users/all",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"const users = responseData.data;",
													"",
													"pm.test(\"Response status code is 200 or 404\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"  const responseBody = pm.response.json();",
													"",
													"  // Check top-level keys",
													"  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"",
													"  if (pm.response.code === 200) {",
													"      // For a successful GET request, expect a success status",
													"      pm.expect(responseBody.status).to.have.property('success', true);",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
													"",
													"      // Validate that data is an array",
													"      pm.expect(responseBody.data).to.be.an('array');",
													"",
													"      // For each user, validate required keys and their types",
													"      responseBody.data.forEach(user => {",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(user);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"      });",
													"  } else if (pm.response.code === 409) {",
													"      // In case of a conflict error, verify that the response is formatted as expected",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
													"      pm.expect(responseBody.data).to.be.empty;",
													"      pm.expect(responseBody.errors).to.be.empty;",
													"  } else {",
													"      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"  }",
													"});",
													"",
													"// Define groups",
													"const groups = {",
													"  \"20s\": [],",
													"  \"30s\": [],",
													"  \"40s\": [],",
													"  \"50s\": [],",
													"  \"60s\": []",
													"};",
													"",
													"// Group users by age",
													"users.forEach(user => {",
													"  if (user.age < 30) {",
													"    groups[\"20s\"].push(user);",
													"  } else if (user.age < 40) {",
													"    groups[\"30s\"].push(user);",
													"  } else if (user.age < 50) {",
													"    groups[\"40s\"].push(user);",
													"  } else if (user.age < 60) {",
													"    groups[\"50s\"].push(user);",
													"  } else {",
													"    groups[\"60s\"].push(user);",
													"  }",
													"});",
													"",
													"// Convert groups object into an array for easier iteration in Handlebars",
													"const groupArray = [];",
													"for (let key in groups) {",
													"  if (groups[key].length > 0) {",
													"    groupArray.push({ group: key, users: groups[key] });",
													"  }",
													"}",
													"",
													"// Prepare data for the pie chart",
													"const chartLabels = groupArray.map(g => g.group);",
													"const chartCounts = groupArray.map(g => g.users.length);",
													"// Define colors for each slice of the pie chart",
													"const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
													"",
													"// Pre-stringify chart data to inject valid JSON into the template",
													"const chartLabelsJSON = JSON.stringify(chartLabels);",
													"const chartCountsJSON = JSON.stringify(chartCounts);",
													"const chartColorsJSON = JSON.stringify(chartColors);",
													"",
													"// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
													"pm.visualizer.set(`",
													"<html>",
													"  <head>",
													"    <!-- Load Tailwind CSS from CDN -->",
													"    <script src=\"https://cdn.tailwindcss.com\"></script>",
													"",
													"    <!-- Load Chart.js from CDN -->",
													"    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
													"  </head>",
													"",
													"  <body class=\"bg-gray-100 font-sans\">",
													"    <div class=\"container mx-auto p-4\">",
													"      <!-- Pie Chart Section -->",
													"      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
													"        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
													"         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
													"      </div>",
													"      ",
													"      <!-- Tables for Each Age Group -->",
													"      {{#each groups}}",
													"        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
													"          <div class=\"bg-blue-500 px-4 py-1\">",
													"            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
													"          </div>",
													"          <div class=\"overflow-x-auto\">",
													"            <table class=\"min-w-full divide-y divide-gray-200\">",
													"              <thead class=\"bg-gray-50\">",
													"                <tr>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
													"                </tr>",
													"              </thead>",
													"              <tbody class=\"bg-white divide-y divide-gray-200\">",
													"                {{#each users}}",
													"                  <tr class=\"hover:bg-gray-100\">",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
													"                  </tr>",
													"                {{/each}}",
													"              </tbody>",
													"            </table>",
													"          </div>",
													"        </div>",
													"      {{/each}}",
													"    </div>",
													"    ",
													"    <!-- Inline Script to Initialize the Pie Chart -->",
													"    <script>",
													"      // Get the 2D drawing context of the pieChart canvas",
													"      const ctx = document.getElementById('pieChart').getContext('2d');",
													"      // Create a new pie chart using Chart.js",
													"      new Chart(ctx, {",
													"        type: 'pie',",
													"        data: {",
													"          labels: {{{chartLabels}}},",
													"          datasets: [{",
													"            data: {{{chartCounts}}},",
													"            backgroundColor: {{{chartColors}}}",
													"          }]",
													"        },",
													"        options: {",
													"          responsive: true,",
													"          plugins: {",
													"            legend: {",
													"              position: 'bottom'",
													"            }",
													"          }",
													"        }",
													"      });",
													"    </script>",
													"  </body>",
													"</html>",
													"`, { ",
													"  groups: groupArray,",
													"  chartLabels: chartLabelsJSON,",
													"  chartCounts: chartCountsJSON,",
													"  chartColors: chartColorsJSON",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "f42cc2b6-bcf9-4511-9a2a-0186c1047f5d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript",
												"id": "a251fe6f-2f99-499f-b838-9b4226ef26ab"
											}
										}
									],
									"id": "98fdf8a5-0463-4999-8b7e-216e2fb08a91",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/all",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET /api/users/list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"const users = responseData.data;",
													"",
													"pm.test(\"Response status code is 200 or 404\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"  const responseBody = pm.response.json();",
													"",
													"  // Check top-level keys",
													"  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"",
													"  if (pm.response.code === 200) {",
													"      // For a successful GET request, expect a success status",
													"      pm.expect(responseBody.status).to.have.property('success', true);",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
													"",
													"      // Validate that data is an array",
													"      pm.expect(responseBody.data).to.be.an('array');",
													"",
													"      // For each user, validate required keys and their types",
													"      responseBody.data.forEach(user => {",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(user);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"      });",
													"  } else if (pm.response.code === 409) {",
													"      // In case of a conflict error, verify that the response is formatted as expected",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
													"      pm.expect(responseBody.data).to.be.empty;",
													"      pm.expect(responseBody.errors).to.be.empty;",
													"  } else {",
													"      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"  }",
													"});",
													"",
													"// Define groups",
													"const groups = {",
													"  \"20s\": [],",
													"  \"30s\": [],",
													"  \"40s\": [],",
													"  \"50s\": [],",
													"  \"60s\": []",
													"};",
													"",
													"// Group users by age",
													"users.forEach(user => {",
													"  if (user.age < 30) {",
													"    groups[\"20s\"].push(user);",
													"  } else if (user.age < 40) {",
													"    groups[\"30s\"].push(user);",
													"  } else if (user.age < 50) {",
													"    groups[\"40s\"].push(user);",
													"  } else if (user.age < 60) {",
													"    groups[\"50s\"].push(user);",
													"  } else {",
													"    groups[\"60s\"].push(user);",
													"  }",
													"});",
													"",
													"// Convert groups object into an array for easier iteration in Handlebars",
													"const groupArray = [];",
													"for (let key in groups) {",
													"  if (groups[key].length > 0) {",
													"    groupArray.push({ group: key, users: groups[key] });",
													"  }",
													"}",
													"",
													"// Prepare data for the pie chart",
													"const chartLabels = groupArray.map(g => g.group);",
													"const chartCounts = groupArray.map(g => g.users.length);",
													"// Define colors for each slice of the pie chart",
													"const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
													"",
													"// Pre-stringify chart data to inject valid JSON into the template",
													"const chartLabelsJSON = JSON.stringify(chartLabels);",
													"const chartCountsJSON = JSON.stringify(chartCounts);",
													"const chartColorsJSON = JSON.stringify(chartColors);",
													"",
													"// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
													"pm.visualizer.set(`",
													"<html>",
													"  <head>",
													"    <!-- Load Tailwind CSS from CDN -->",
													"    <script src=\"https://cdn.tailwindcss.com\"></script>",
													"",
													"    <!-- Load Chart.js from CDN -->",
													"    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
													"  </head>",
													"",
													"  <body class=\"bg-gray-100 font-sans\">",
													"    <div class=\"container mx-auto p-4\">",
													"      <!-- Pie Chart Section -->",
													"      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
													"        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
													"         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
													"      </div>",
													"      ",
													"      <!-- Tables for Each Age Group -->",
													"      {{#each groups}}",
													"        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
													"          <div class=\"bg-blue-500 px-4 py-1\">",
													"            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
													"          </div>",
													"          <div class=\"overflow-x-auto\">",
													"            <table class=\"min-w-full divide-y divide-gray-200\">",
													"              <thead class=\"bg-gray-50\">",
													"                <tr>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
													"                </tr>",
													"              </thead>",
													"              <tbody class=\"bg-white divide-y divide-gray-200\">",
													"                {{#each users}}",
													"                  <tr class=\"hover:bg-gray-100\">",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
													"                  </tr>",
													"                {{/each}}",
													"              </tbody>",
													"            </table>",
													"          </div>",
													"        </div>",
													"      {{/each}}",
													"    </div>",
													"    ",
													"    <!-- Inline Script to Initialize the Pie Chart -->",
													"    <script>",
													"      // Get the 2D drawing context of the pieChart canvas",
													"      const ctx = document.getElementById('pieChart').getContext('2d');",
													"      // Create a new pie chart using Chart.js",
													"      new Chart(ctx, {",
													"        type: 'pie',",
													"        data: {",
													"          labels: {{{chartLabels}}},",
													"          datasets: [{",
													"            data: {{{chartCounts}}},",
													"            backgroundColor: {{{chartColors}}}",
													"          }]",
													"        },",
													"        options: {",
													"          responsive: true,",
													"          plugins: {",
													"            legend: {",
													"              position: 'bottom'",
													"            }",
													"          }",
													"        }",
													"      });",
													"    </script>",
													"  </body>",
													"</html>",
													"`, { ",
													"  groups: groupArray,",
													"  chartLabels: chartLabelsJSON,",
													"  chartCounts: chartCountsJSON,",
													"  chartColors: chartColorsJSON",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "21639d31-1a07-4b96-bb04-d526c48fa60e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript",
												"id": "1c0f60a7-fb98-4e4c-90cb-218224eec7e6"
											}
										}
									],
									"id": "4338bf0b-7b57-44cd-afe3-0f4b7ced3bdd",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/list",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET /api/users/read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"const users = responseData.data;",
													"",
													"pm.test(\"Response status code is 200 or 404\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"  const responseBody = pm.response.json();",
													"",
													"  // Check top-level keys",
													"  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"",
													"  if (pm.response.code === 200) {",
													"      // For a successful GET request, expect a success status",
													"      pm.expect(responseBody.status).to.have.property('success', true);",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
													"",
													"      // Validate that data is an array",
													"      pm.expect(responseBody.data).to.be.an('array');",
													"",
													"      // For each user, validate required keys and their types",
													"      responseBody.data.forEach(user => {",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(user);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"      });",
													"  } else if (pm.response.code === 409) {",
													"      // In case of a conflict error, verify that the response is formatted as expected",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
													"      pm.expect(responseBody.data).to.be.empty;",
													"      pm.expect(responseBody.errors).to.be.empty;",
													"  } else {",
													"      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"  }",
													"});",
													"",
													"// Define groups",
													"const groups = {",
													"  \"20s\": [],",
													"  \"30s\": [],",
													"  \"40s\": [],",
													"  \"50s\": [],",
													"  \"60s\": []",
													"};",
													"",
													"// Group users by age",
													"users.forEach(user => {",
													"  if (user.age < 30) {",
													"    groups[\"20s\"].push(user);",
													"  } else if (user.age < 40) {",
													"    groups[\"30s\"].push(user);",
													"  } else if (user.age < 50) {",
													"    groups[\"40s\"].push(user);",
													"  } else if (user.age < 60) {",
													"    groups[\"50s\"].push(user);",
													"  } else {",
													"    groups[\"60s\"].push(user);",
													"  }",
													"});",
													"",
													"// Convert groups object into an array for easier iteration in Handlebars",
													"const groupArray = [];",
													"for (let key in groups) {",
													"  if (groups[key].length > 0) {",
													"    groupArray.push({ group: key, users: groups[key] });",
													"  }",
													"}",
													"",
													"// Prepare data for the pie chart",
													"const chartLabels = groupArray.map(g => g.group);",
													"const chartCounts = groupArray.map(g => g.users.length);",
													"// Define colors for each slice of the pie chart",
													"const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
													"",
													"// Pre-stringify chart data to inject valid JSON into the template",
													"const chartLabelsJSON = JSON.stringify(chartLabels);",
													"const chartCountsJSON = JSON.stringify(chartCounts);",
													"const chartColorsJSON = JSON.stringify(chartColors);",
													"",
													"// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
													"pm.visualizer.set(`",
													"<html>",
													"  <head>",
													"    <!-- Load Tailwind CSS from CDN -->",
													"    <script src=\"https://cdn.tailwindcss.com\"></script>",
													"",
													"    <!-- Load Chart.js from CDN -->",
													"    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
													"  </head>",
													"",
													"  <body class=\"bg-gray-100 font-sans\">",
													"    <div class=\"container mx-auto p-4\">",
													"      <!-- Pie Chart Section -->",
													"      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
													"        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
													"         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
													"      </div>",
													"      ",
													"      <!-- Tables for Each Age Group -->",
													"      {{#each groups}}",
													"        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
													"          <div class=\"bg-blue-500 px-4 py-1\">",
													"            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
													"          </div>",
													"          <div class=\"overflow-x-auto\">",
													"            <table class=\"min-w-full divide-y divide-gray-200\">",
													"              <thead class=\"bg-gray-50\">",
													"                <tr>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
													"                </tr>",
													"              </thead>",
													"              <tbody class=\"bg-white divide-y divide-gray-200\">",
													"                {{#each users}}",
													"                  <tr class=\"hover:bg-gray-100\">",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
													"                  </tr>",
													"                {{/each}}",
													"              </tbody>",
													"            </table>",
													"          </div>",
													"        </div>",
													"      {{/each}}",
													"    </div>",
													"    ",
													"    <!-- Inline Script to Initialize the Pie Chart -->",
													"    <script>",
													"      // Get the 2D drawing context of the pieChart canvas",
													"      const ctx = document.getElementById('pieChart').getContext('2d');",
													"      // Create a new pie chart using Chart.js",
													"      new Chart(ctx, {",
													"        type: 'pie',",
													"        data: {",
													"          labels: {{{chartLabels}}},",
													"          datasets: [{",
													"            data: {{{chartCounts}}},",
													"            backgroundColor: {{{chartColors}}}",
													"          }]",
													"        },",
													"        options: {",
													"          responsive: true,",
													"          plugins: {",
													"            legend: {",
													"              position: 'bottom'",
													"            }",
													"          }",
													"        }",
													"      });",
													"    </script>",
													"  </body>",
													"</html>",
													"`, { ",
													"  groups: groupArray,",
													"  chartLabels: chartLabelsJSON,",
													"  chartCounts: chartCountsJSON,",
													"  chartColors: chartColorsJSON",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "5e2beda1-48f3-4892-8e80-b0b69fb27f04"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript",
												"id": "4e6d0ee3-b67d-4830-aeba-3c98a0d66ef2"
											}
										}
									],
									"id": "58634d9b-5c8d-4716-a5f1-eb7f5627175c",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/read",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"read"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET /api/users/show",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"const users = responseData.data;",
													"",
													"pm.test(\"Response status code is 200 or 404\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"  const responseBody = pm.response.json();",
													"",
													"  // Check top-level keys",
													"  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"",
													"  if (pm.response.code === 200) {",
													"      // For a successful GET request, expect a success status",
													"      pm.expect(responseBody.status).to.have.property('success', true);",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
													"",
													"      // Validate that data is an array",
													"      pm.expect(responseBody.data).to.be.an('array');",
													"",
													"      // For each user, validate required keys and their types",
													"      responseBody.data.forEach(user => {",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(user);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"      });",
													"  } else if (pm.response.code === 409) {",
													"      // In case of a conflict error, verify that the response is formatted as expected",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
													"      pm.expect(responseBody.data).to.be.empty;",
													"      pm.expect(responseBody.errors).to.be.empty;",
													"  } else {",
													"      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"  }",
													"});",
													"",
													"// Define groups",
													"const groups = {",
													"  \"20s\": [],",
													"  \"30s\": [],",
													"  \"40s\": [],",
													"  \"50s\": [],",
													"  \"60s\": []",
													"};",
													"",
													"// Group users by age",
													"users.forEach(user => {",
													"  if (user.age < 30) {",
													"    groups[\"20s\"].push(user);",
													"  } else if (user.age < 40) {",
													"    groups[\"30s\"].push(user);",
													"  } else if (user.age < 50) {",
													"    groups[\"40s\"].push(user);",
													"  } else if (user.age < 60) {",
													"    groups[\"50s\"].push(user);",
													"  } else {",
													"    groups[\"60s\"].push(user);",
													"  }",
													"});",
													"",
													"// Convert groups object into an array for easier iteration in Handlebars",
													"const groupArray = [];",
													"for (let key in groups) {",
													"  if (groups[key].length > 0) {",
													"    groupArray.push({ group: key, users: groups[key] });",
													"  }",
													"}",
													"",
													"// Prepare data for the pie chart",
													"const chartLabels = groupArray.map(g => g.group);",
													"const chartCounts = groupArray.map(g => g.users.length);",
													"// Define colors for each slice of the pie chart",
													"const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
													"",
													"// Pre-stringify chart data to inject valid JSON into the template",
													"const chartLabelsJSON = JSON.stringify(chartLabels);",
													"const chartCountsJSON = JSON.stringify(chartCounts);",
													"const chartColorsJSON = JSON.stringify(chartColors);",
													"",
													"// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
													"pm.visualizer.set(`",
													"<html>",
													"  <head>",
													"    <!-- Load Tailwind CSS from CDN -->",
													"    <script src=\"https://cdn.tailwindcss.com\"></script>",
													"",
													"    <!-- Load Chart.js from CDN -->",
													"    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
													"  </head>",
													"",
													"  <body class=\"bg-gray-100 font-sans\">",
													"    <div class=\"container mx-auto p-4\">",
													"      <!-- Pie Chart Section -->",
													"      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
													"        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
													"         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
													"      </div>",
													"      ",
													"      <!-- Tables for Each Age Group -->",
													"      {{#each groups}}",
													"        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
													"          <div class=\"bg-blue-500 px-4 py-1\">",
													"            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
													"          </div>",
													"          <div class=\"overflow-x-auto\">",
													"            <table class=\"min-w-full divide-y divide-gray-200\">",
													"              <thead class=\"bg-gray-50\">",
													"                <tr>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
													"                </tr>",
													"              </thead>",
													"              <tbody class=\"bg-white divide-y divide-gray-200\">",
													"                {{#each users}}",
													"                  <tr class=\"hover:bg-gray-100\">",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
													"                  </tr>",
													"                {{/each}}",
													"              </tbody>",
													"            </table>",
													"          </div>",
													"        </div>",
													"      {{/each}}",
													"    </div>",
													"    ",
													"    <!-- Inline Script to Initialize the Pie Chart -->",
													"    <script>",
													"      // Get the 2D drawing context of the pieChart canvas",
													"      const ctx = document.getElementById('pieChart').getContext('2d');",
													"      // Create a new pie chart using Chart.js",
													"      new Chart(ctx, {",
													"        type: 'pie',",
													"        data: {",
													"          labels: {{{chartLabels}}},",
													"          datasets: [{",
													"            data: {{{chartCounts}}},",
													"            backgroundColor: {{{chartColors}}}",
													"          }]",
													"        },",
													"        options: {",
													"          responsive: true,",
													"          plugins: {",
													"            legend: {",
													"              position: 'bottom'",
													"            }",
													"          }",
													"        }",
													"      });",
													"    </script>",
													"  </body>",
													"</html>",
													"`, { ",
													"  groups: groupArray,",
													"  chartLabels: chartLabelsJSON,",
													"  chartCounts: chartCountsJSON,",
													"  chartColors: chartColorsJSON",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "aa308a23-8dd6-4d1b-81af-d12558a9b798"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript",
												"id": "e8189b89-1e5a-4845-a720-2ba6249cdf2e"
											}
										}
									],
									"id": "041d0749-73c9-494d-90d2-1348bb5402f9",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/show",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"show"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET /api/users/view",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"const users = responseData.data;",
													"",
													"pm.test(\"Response status code is 200 or 404\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"  const responseBody = pm.response.json();",
													"",
													"  // Check top-level keys",
													"  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"",
													"  if (pm.response.code === 200) {",
													"      // For a successful GET request, expect a success status",
													"      pm.expect(responseBody.status).to.have.property('success', true);",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
													"",
													"      // Validate that data is an array",
													"      pm.expect(responseBody.data).to.be.an('array');",
													"",
													"      // For each user, validate required keys and their types",
													"      responseBody.data.forEach(user => {",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(user);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"      });",
													"  } else if (pm.response.code === 409) {",
													"      // In case of a conflict error, verify that the response is formatted as expected",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
													"      pm.expect(responseBody.data).to.be.empty;",
													"      pm.expect(responseBody.errors).to.be.empty;",
													"  } else {",
													"      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"  }",
													"});",
													"",
													"// Define groups",
													"const groups = {",
													"  \"20s\": [],",
													"  \"30s\": [],",
													"  \"40s\": [],",
													"  \"50s\": [],",
													"  \"60s\": []",
													"};",
													"",
													"// Group users by age",
													"users.forEach(user => {",
													"  if (user.age < 30) {",
													"    groups[\"20s\"].push(user);",
													"  } else if (user.age < 40) {",
													"    groups[\"30s\"].push(user);",
													"  } else if (user.age < 50) {",
													"    groups[\"40s\"].push(user);",
													"  } else if (user.age < 60) {",
													"    groups[\"50s\"].push(user);",
													"  } else {",
													"    groups[\"60s\"].push(user);",
													"  }",
													"});",
													"",
													"// Convert groups object into an array for easier iteration in Handlebars",
													"const groupArray = [];",
													"for (let key in groups) {",
													"  if (groups[key].length > 0) {",
													"    groupArray.push({ group: key, users: groups[key] });",
													"  }",
													"}",
													"",
													"// Prepare data for the pie chart",
													"const chartLabels = groupArray.map(g => g.group);",
													"const chartCounts = groupArray.map(g => g.users.length);",
													"// Define colors for each slice of the pie chart",
													"const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
													"",
													"// Pre-stringify chart data to inject valid JSON into the template",
													"const chartLabelsJSON = JSON.stringify(chartLabels);",
													"const chartCountsJSON = JSON.stringify(chartCounts);",
													"const chartColorsJSON = JSON.stringify(chartColors);",
													"",
													"// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
													"pm.visualizer.set(`",
													"<html>",
													"  <head>",
													"    <!-- Load Tailwind CSS from CDN -->",
													"    <script src=\"https://cdn.tailwindcss.com\"></script>",
													"",
													"    <!-- Load Chart.js from CDN -->",
													"    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
													"  </head>",
													"",
													"  <body class=\"bg-gray-100 font-sans\">",
													"    <div class=\"container mx-auto p-4\">",
													"      <!-- Pie Chart Section -->",
													"      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
													"        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
													"         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
													"      </div>",
													"      ",
													"      <!-- Tables for Each Age Group -->",
													"      {{#each groups}}",
													"        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
													"          <div class=\"bg-blue-500 px-4 py-1\">",
													"            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
													"          </div>",
													"          <div class=\"overflow-x-auto\">",
													"            <table class=\"min-w-full divide-y divide-gray-200\">",
													"              <thead class=\"bg-gray-50\">",
													"                <tr>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
													"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
													"                </tr>",
													"              </thead>",
													"              <tbody class=\"bg-white divide-y divide-gray-200\">",
													"                {{#each users}}",
													"                  <tr class=\"hover:bg-gray-100\">",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
													"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
													"                  </tr>",
													"                {{/each}}",
													"              </tbody>",
													"            </table>",
													"          </div>",
													"        </div>",
													"      {{/each}}",
													"    </div>",
													"    ",
													"    <!-- Inline Script to Initialize the Pie Chart -->",
													"    <script>",
													"      // Get the 2D drawing context of the pieChart canvas",
													"      const ctx = document.getElementById('pieChart').getContext('2d');",
													"      // Create a new pie chart using Chart.js",
													"      new Chart(ctx, {",
													"        type: 'pie',",
													"        data: {",
													"          labels: {{{chartLabels}}},",
													"          datasets: [{",
													"            data: {{{chartCounts}}},",
													"            backgroundColor: {{{chartColors}}}",
													"          }]",
													"        },",
													"        options: {",
													"          responsive: true,",
													"          plugins: {",
													"            legend: {",
													"              position: 'bottom'",
													"            }",
													"          }",
													"        }",
													"      });",
													"    </script>",
													"  </body>",
													"</html>",
													"`, { ",
													"  groups: groupArray,",
													"  chartLabels: chartLabelsJSON,",
													"  chartCounts: chartCountsJSON,",
													"  chartColors: chartColorsJSON",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "fd4c0348-1ed3-4250-b41c-7788cf7cc826"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript",
												"id": "7b2086aa-66b4-43f4-9749-5515f3e14f69"
											}
										}
									],
									"id": "2f5bf5cb-e6f4-4d2e-89d0-b580894774fd",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/view",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"view"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET /api/users/{{user_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        // Parse the response to extract user data\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Select a random user from the list\r",
													"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"user_id\", randomUser._id);\r",
													"            console.log(\"User ID set:\", randomUser._id);\r",
													"        } else {\r",
													"            pm.environment.set(\"user_id\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "2ce7e65a-e1a0-40ef-99bc-f440acee1cb4"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 200 or 404\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    if (pm.response.code === 200) {",
													"        // Ensure the response has the expected top-level keys",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.status).to.have.property('success', true);",
													"",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(responseBody.data);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"    } else if (pm.response.code === 404) {",
													"        // For a 409 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "5e0d6b74-564e-4c41-9e66-48e94bae4715"
											}
										}
									],
									"id": "b1a9ae14-0620-4c5c-acd4-14840f7b258b",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/{{user_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET /api/users/read/{{user_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        // Parse the response to extract user data\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Select a random user from the list\r",
													"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
													"\r",
													"            console.log(randomUser)\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"user_id\", randomUser._id);\r",
													"            console.log(\"User ID set:\", randomUser._id);\r",
													"        } else {\r",
													"            pm.environment.set(\"user_id\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "8d79c94f-517b-447f-9954-83081724bfb0"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 200 or 404\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    if (pm.response.code === 200) {",
													"        // Ensure the response has the expected top-level keys",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.status).to.have.property('success', true);",
													"",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(responseBody.data);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"    } else if (pm.response.code === 404) {",
													"        // For a 409 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "f6b6acf8-7c8d-4d83-9559-17798cd3245d"
											}
										}
									],
									"id": "4c6bbe79-22a3-4346-9a0b-708d806037aa",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/read/{{user_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"read",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET /api/users/show/{{user_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        // Parse the response to extract user data\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Select a random user from the list\r",
													"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
													"\r",
													"            console.log(randomUser)\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"user_id\", randomUser._id);\r",
													"            console.log(\"User ID set:\", randomUser._id);\r",
													"        } else {\r",
													"            pm.environment.set(\"user_id\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d1227d55-a4c6-49c6-a970-f588789b352e"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 200 or 404\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    if (pm.response.code === 200) {",
													"        // Ensure the response has the expected top-level keys",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.status).to.have.property('success', true);",
													"",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(responseBody.data);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"    } else if (pm.response.code === 404) {",
													"        // For a 409 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "83f3eaae-74f9-489d-8ac3-8bca0840eb12"
											}
										}
									],
									"id": "a3af3db8-3194-40ee-bcac-550dad64b08f",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/show/{{user_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"show",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET /api/users/view/{{user_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        // Parse the response to extract user data\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Select a random user from the list\r",
													"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
													"\r",
													"            console.log(randomUser)\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"user_id\", randomUser._id);\r",
													"            console.log(\"User ID set:\", randomUser._id);\r",
													"        } else {\r",
													"            pm.environment.set(\"user_id\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "ede76d2d-d4ee-4b21-9aa5-b0dae748e71b"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 200 or 404\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    if (pm.response.code === 200) {",
													"        // Ensure the response has the expected top-level keys",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.status).to.have.property('success', true);",
													"",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(responseBody.data);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"    } else if (pm.response.code === 404) {",
													"        // For a 409 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "384c7880-64b9-4a54-b519-3c86f1fd9000"
											}
										}
									],
									"id": "0d3aaa80-44df-47c1-80d4-619d7c38519c",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/view/{{user_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"view",
												"{{user_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "47594530-6b98-4326-9a42-fc0dbd519ca8",
							"description": "Routes for GET requests for users"
						},
						{
							"name": "PATCH",
							"item": [
								{
									"name": "PATCH /api/users/{{user_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Step 1: Fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Step 2: Select a random user\r",
													"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"user_id\", randomUser._id);\r",
													"\r",
													"            // Step 3: Generate random data\r",
													"            // Generate random data with valid name\r",
													"            const randomId = Math.floor(Math.random() * 1000);\r",
													"            const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
													"\r",
													"            pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
													"            pm.environment.set(\"phone\", randomPhone);\r",
													"            pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
													"        } else {\r",
													"            pm.environment.set(\"user_id\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "4130908d-3e47-4148-b2ea-2906d41d4349"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 404 or 409\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 409]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    if (pm.response.code === 200) {",
													"        // Ensure the response has the expected top-level keys",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.status).to.have.property('success', true);",
													"",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(responseBody.data);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"    } else if (pm.response.code === 404) {",
													"        // For a 404 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else if (pm.response.code === 409) {",
													"        // For a 409 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "354d4393-f4d9-4a32-ae40-7e5fc1359bff"
											}
										}
									],
									"id": "fdb36bd8-3d29-42aa-a37d-13bd657170da",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"avatarUrl\": \"{{$randomAvatarImage}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{$randomLoremSentence}}\",\n    \"portfolio\": \"{{$randomUrl}}\",\n    \"age\": {{age}},\n    \"isActive\": {{$randomBoolean}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/users/{{user_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": [
										{
											"id": "4ed6ea2e-b04a-47ca-8976-b8c424f7c59f",
											"name": "INTERNAL_SERVER_ERROR 500",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SERVER_URL}}/api/users/{{user_id}}",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"users",
														"{{user_id}}"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "raw",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "RateLimit-Policy",
													"value": "100;w=60"
												},
												{
													"key": "RateLimit-Limit",
													"value": "100"
												},
												{
													"key": "RateLimit-Remaining",
													"value": "98"
												},
												{
													"key": "RateLimit-Reset",
													"value": "60"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "292"
												},
												{
													"key": "Content-Type",
													"value": "[object Object]"
												},
												{
													"key": "Date",
													"value": "Tue, 11 Feb 2025 11:11:32 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\"meta\":{\"route\":\"/67ab2ebed3c81db68b98f2d1\"},\"status\":{\"message\":\"model.findById(...).aggregate is not a function\"},\"data\":{},\"errors\":\"TypeError: model.findById(...).aggregate is not a function\\n    at updateADocument (file:///E:/PERSONAL/auto-crud-api/src/service/updateADocument.js:59:52)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\\n    at async file:///E:/PERSONAL/auto-crud-api/src/utils/asyncHandler.js:26:13\"}"
										}
									]
								},
								{
									"name": "PATCH /api/users/edit/{{user_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Step 1: Fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Step 2: Select a random user\r",
													"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"user_id\", randomUser._id);\r",
													"            console.log(\"User ID set:\", randomUser._id);\r",
													"\r",
													"            // Step 3: Generate random data\r",
													"            const randomId = Math.floor(Math.random() * 1000);\r",
													"            const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
													"            const isActive = Math.random() < 0.5;\r",
													"\r",
													"            const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
													"            const randomName = names[Math.floor(Math.random() * names.length)];\r",
													"\r",
													"            pm.environment.set(\"name\", randomName);\r",
													"            pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
													"            pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
													"            pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
													"            pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
													"            pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
													"            pm.environment.set(\"phone\", randomPhone);\r",
													"            pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
													"            pm.environment.set(\"isActive\", isActive);\r",
													"        } else {\r",
													"            pm.environment.set(\"user_id\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "2a76c751-9a0f-4886-aa47-58b3b9b2cd63"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 404 or 409\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 409]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    if (pm.response.code === 200) {",
													"        // Ensure the response has the expected top-level keys",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.status).to.have.property('success', true);",
													"",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(responseBody.data);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"    } else if (pm.response.code === 404) {",
													"        // For a 404 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else if (pm.response.code === 409) {",
													"        // For a 409 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "9b8d5e3b-6ddb-4186-8a2c-75cd39875b1d"
											}
										}
									],
									"id": "ed00c3c3-7030-4e0c-9ce4-46e3416a0862",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"avatarUrl\": \"{{$randomAvatarImage}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{$randomLoremSentence}}\",\n    \"portfolio\": \"{{$randomUrl}}\",\n    \"age\": {{age}},\n    \"isActive\": {{$randomBoolean}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/users/edit/{{user_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"edit",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH /api/users/update/{{user_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Step 1: Fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Step 2: Select a random user\r",
													"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"user_id\", randomUser._id);\r",
													"            console.log(\"User ID set:\", randomUser._id);\r",
													"\r",
													"            // Step 3: Generate random data\r",
													"            const randomId = Math.floor(Math.random() * 1000);\r",
													"            const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
													"            const isActive = Math.random() < 0.5;\r",
													"\r",
													"            const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
													"            const randomName = names[Math.floor(Math.random() * names.length)];\r",
													"\r",
													"            pm.environment.set(\"name\", randomName);\r",
													"            pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
													"            pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
													"            pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
													"            pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
													"            pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
													"            pm.environment.set(\"phone\", randomPhone);\r",
													"            pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
													"            pm.environment.set(\"isActive\", isActive);\r",
													"        } else {\r",
													"            pm.environment.set(\"user_id\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "029b0414-add8-41e8-9453-193847295c61"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 404 or 409\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 409]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    if (pm.response.code === 200) {",
													"        // Ensure the response has the expected top-level keys",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.status).to.have.property('success', true);",
													"",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'avatarUrl', 'email', 'nid',",
													"            'phone', 'bio', 'portfolio', 'age', 'isActive',",
													"            'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(responseBody.data);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"    } else if (pm.response.code === 404) {",
													"        // For a 404 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else if (pm.response.code === 409) {",
													"        // For a 409 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "4eaf99b1-f5f3-413f-8c5a-fc5575bc1f07"
											}
										}
									],
									"id": "33693deb-fe97-4d95-a18a-6b0151b1f996",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"avatarUrl\": \"{{$randomAvatarImage}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{$randomLoremSentence}}\",\n    \"portfolio\": \"{{$randomUrl}}\",\n    \"age\": {{age}},\n    \"isActive\": {{$randomBoolean}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/users/update/{{user_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"update",
												"{{user_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ff7fbc65-12b9-4255-bdca-0896c5689670",
							"description": "Routes for PATCH requests for users",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "48a7e8a7-fb45-4c6b-8f45-cf951d9a3726"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										],
										"id": "d9029ee6-35e7-4e97-91fd-4706dc8c0198"
									}
								}
							]
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "DELETE /api/users/{{user_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Select a random user from the list\r",
													"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
													"\r",
													"            console.log(\"Selected User:\", randomUser);\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"user_id\", randomUser._id);\r",
													"            console.log(\"User ID set:\", randomUser._id);\r",
													"        } else {\r",
													"            pm.environment.set(\"user_id\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "8b6b8d9b-ef48-4d2e-b2df-0fc5919b1f2f"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 404 or 500\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "a1aea901-3719-4cf1-9531-373d4c95d3a7"
											}
										}
									],
									"id": "634108b0-48a0-4929-89ad-ea04b2dee0e1",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/{{user_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"{{user_id}}"
											]
										}
									},
									"response": [
										{
											"id": "ebfc0b15-eebf-499b-bbff-d815a1abc2c1",
											"name": "OK 200",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{SERVER_URL}}/api/users/{{user_id}}",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"users",
														"{{user_id}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Cache-Control",
													"value": "public, max-age=0, must-revalidate"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "148"
												},
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Feb 2025 15:00:09 GMT"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Server",
													"value": "Vercel"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "Vary",
													"value": "Origin, Accept-Encoding"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Dns-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-Vercel-Cache",
													"value": "MISS"
												},
												{
													"key": "X-Vercel-Id",
													"value": "bom1::iad1::grj8p-1739372408742-4b990d731087"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												}
											],
											"cookie": [],
											"body": "{\n    \"meta\": {\n        \"route\": \"/67ab361c693c7beef483e4eb\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: Users with ID \\\"67ab361c693c7beef483e4eb\\\" deleted successfully.\"\n    },\n    \"data\": {},\n    \"errors\": {}\n}"
										}
									]
								},
								{
									"name": "DELETE /api/users/delete/{{user_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Select a random user from the list\r",
													"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
													"\r",
													"            console.log(\"Selected User:\", randomUser);\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"user_id\", randomUser._id);\r",
													"            console.log(\"User ID set:\", randomUser._id);\r",
													"        } else {\r",
													"            pm.environment.set(\"user_id\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d31dd3ce-4a99-4af4-849d-ab2947f14fd2"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 404 or 500\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "59397e71-b4a0-42d2-a271-4d47c5b787d1"
											}
										}
									],
									"id": "f39e9b62-8586-4ac5-bd17-62c68f53b64a",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/delete/{{user_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"delete",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE /api/users/destroy/{{user_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Select a random user from the list\r",
													"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
													"\r",
													"            console.log(\"Selected User:\", randomUser);\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"user_id\", randomUser._id);\r",
													"            console.log(\"User ID set:\", randomUser._id);\r",
													"        } else {\r",
													"            pm.environment.set(\"user_id\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "dcf282f7-2455-4d79-809d-e9848c6b517d"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 404 or 500\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "dbb67425-7b18-417d-bc60-bff8d9e5c590"
											}
										}
									],
									"id": "921555ce-62c3-4b05-98bd-83889806c47a",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/destroy/{{user_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"destroy",
												"{{user_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE /api/users?ids={{docIds}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Extract all user IDs\r",
													"            const userIds = users.map(user => user._id);\r",
													"\r",
													"            // Convert the array of IDs into a comma-separated string\r",
													"            const ids = userIds.join(',');\r",
													"\r",
													"            // Set as an environment variable\r",
													"            pm.environment.set(\"docIds\", ids);\r",
													"\r",
													"            console.log(\"Document IDs set:\", ids);\r",
													"        } else {\r",
													"            pm.environment.set(\"docIds\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d920bd31-0873-479e-9354-3cd433ab0802"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "f62dc436-0299-4ec0-ab1f-060fb0f18360"
											}
										}
									],
									"id": "79ed270b-be29-4855-b960-b0a4195de9b0",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users?ids={{docIds}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{docIds}}"
												}
											]
										}
									},
									"response": [
										{
											"id": "b1e1162b-f5db-4978-8b8a-c892e681702f",
											"name": "OK 200",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{SERVER_URL}}/api/users?ids={{docIds}}",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"users"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{docIds}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Cache-Control",
													"value": "public, max-age=0, must-revalidate"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "196"
												},
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Feb 2025 15:00:27 GMT"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Server",
													"value": "Vercel"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "Vary",
													"value": "Origin, Accept-Encoding"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Dns-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-Vercel-Cache",
													"value": "MISS"
												},
												{
													"key": "X-Vercel-Id",
													"value": "bom1::iad1::42m5c-1739372427091-d679d647308f"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												}
											],
											"cookie": [],
											"body": "{\n    \"meta\": {\n        \"route\": \"/?ids=67ab361c693c7beef483e4fe%2C67ab361c693c7beef483e4fb%2C67ab361c693c7beef483e4f9%2C67ab361c693c7beef483e4f7%2C67ab361c693c7beef483e4f5%2C67ab361c693c7beef483e4f3%2C67ab361c693c7beef483e4f0%2C67ab361c693c7beef483e4ed%2C67ab361c693c7beef483e4e5%2C67ab361c693c7beef483e4e3\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: Users with ID: 67ab361c693c7beef483e4fe, 67ab361c693c7beef483e4fb, 67ab361c693c7beef483e4f9, 67ab361c693c7beef483e4f7, 67ab361c693c7beef483e4f5, 67ab361c693c7beef483e4f3, 67ab361c693c7beef483e4f0, 67ab361c693c7beef483e4ed, 67ab361c693c7beef483e4e5, 67ab361c693c7beef483e4e3 deleted successfully.\"\n    },\n    \"data\": {},\n    \"errors\": {}\n}"
										},
										{
											"id": "5e25a2b7-cbe5-45a0-a5e5-e44a960c7305",
											"name": "BAD_REQUEST 400",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{SERVER_URL}}/api/users?ids={{docIds}}",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"users"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{docIds}}"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Vary",
													"value": "Origin, Accept-Encoding"
												},
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "121"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Feb 2025 10:40:38 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"meta\": {\n        \"route\": \"/?ids=\"\n    },\n    \"status\": {\n        \"message\": \"Bad Request: ID must be a valid MongoDB ObjectId\"\n    },\n    \"data\": {},\n    \"errors\": {}\n}"
										}
									]
								},
								{
									"name": "DELETE /api/users/delete-list?ids={{docIds}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Extract all user IDs\r",
													"            const userIds = users.map(user => user._id);\r",
													"\r",
													"            // Convert the array of IDs into a comma-separated string\r",
													"            const ids = userIds.join(',');\r",
													"\r",
													"            // Set as an environment variable\r",
													"            pm.environment.set(\"docIds\", ids);\r",
													"\r",
													"            console.log(\"Document IDs set:\", ids);\r",
													"        } else {\r",
													"            pm.environment.set(\"docIds\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "aaade256-768f-4cdf-85f6-26516633c518"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "79bb0b1e-e323-4116-9411-870f1305b415"
											}
										}
									],
									"id": "32d92b4f-c0ad-4e89-a48e-0fb2f11d6354",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/delete-list?ids={{docIds}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"delete-list"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{docIds}}"
												}
											]
										}
									},
									"response": [
										{
											"id": "6d36cd3c-900f-4df6-b0f9-3082b960b7dd",
											"name": "BAD_REQUEST 400",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{SERVER_URL}}/api/users/delete-list?ids={{docIds}}",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"users",
														"delete-list"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{docIds}}"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "raw",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Cache-Control",
													"value": "public, max-age=0, must-revalidate"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "206"
												},
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Content-Type",
													"value": "[object Object]"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Feb 2025 15:00:40 GMT"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Server",
													"value": "Vercel"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "Vary",
													"value": "Origin"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Dns-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-Vercel-Cache",
													"value": "MISS"
												},
												{
													"key": "X-Vercel-Id",
													"value": "bom1::iad1::2xnhl-1739372440450-e5b762ea2891"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												}
											],
											"cookie": [],
											"body": "{\"meta\":{\"route\":\"/delete-list?ids=67ab361c693c7beef483e4e0%2C67ab361c693c7beef483e4dd%2C67ab361c693c7beef483e4d1%2C67ab361c693c7beef483e4ca%2C67ab361c693c7beef483e4c8%2C67ab3609693c7beef483dd8f%2C67ab3609693c7beef483dd88%2C67ab3609693c7beef483dd86%2C67ab3609693c7beef483dd84%2C67ab3609693c7beef483dd82\"},\"status\":{\"message\":\"Data validation failed\"},\"data\":{},\"errors\":[{\"field\":\"id\",\"message\":\"ID must be a valid MongoDB ObjectId\"}]}"
										}
									]
								},
								{
									"name": "DELETE /api/users/delete-by-list?ids={{docIds}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Extract all user IDs\r",
													"            const userIds = users.map(user => user._id);\r",
													"\r",
													"            // Convert the array of IDs into a comma-separated string\r",
													"            const ids = userIds.join(',');\r",
													"\r",
													"            // Set as an environment variable\r",
													"            pm.environment.set(\"docIds\", ids);\r",
													"\r",
													"            console.log(\"Document IDs set:\", ids);\r",
													"        } else {\r",
													"            pm.environment.set(\"docIds\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "10a33a41-471c-4881-8193-7a2088378927"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "14806e16-1055-42f9-904f-15a362895d07"
											}
										}
									],
									"id": "3c276a76-1207-4953-b70b-e860947511f2",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/delete-by-list?ids={{docIds}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"delete-by-list"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{docIds}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE /api/users/destroy-list?ids={{docIds}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Extract all user IDs\r",
													"            const userIds = users.map(user => user._id);\r",
													"\r",
													"            // Convert the array of IDs into a comma-separated string\r",
													"            const ids = userIds.join(',');\r",
													"\r",
													"            // Set as an environment variable\r",
													"            pm.environment.set(\"docIds\", ids);\r",
													"\r",
													"            console.log(\"Document IDs set:\", ids);\r",
													"        } else {\r",
													"            pm.environment.set(\"docIds\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "4c2bf03c-b5c7-4314-acee-26a6252bfb5c"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "dd8a57ed-2da4-46cd-b4f2-8f858c73e56f"
											}
										}
									],
									"id": "45fc2788-1348-4168-9514-cf5f75db0100",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/destroy-list?ids={{docIds}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"destroy-list"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{docIds}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE /api/users/destroy-by-list?ids={{docIds}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the user list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const users = responseData.data;\r",
													"\r",
													"        if (users && users.length > 0) {\r",
													"            // Extract all user IDs\r",
													"            const userIds = users.map(user => user._id);\r",
													"\r",
													"            // Convert the array of IDs into a comma-separated string\r",
													"            const ids = userIds.join(',');\r",
													"\r",
													"            // Set as an environment variable\r",
													"            pm.environment.set(\"docIds\", ids);\r",
													"\r",
													"            console.log(\"Document IDs set:\", ids);\r",
													"        } else {\r",
													"            pm.environment.set(\"docIds\", '');\r",
													"            console.log(\"No users found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "4dabf505-c484-4e9f-b54b-1b2046e4cf95"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "46254564-5714-4b93-af07-eb86276906fc"
											}
										}
									],
									"id": "0a851c98-1567-4d89-bcd4-f620191e36e3",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/destroy-by-list?ids={{docIds}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"destroy-by-list"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{docIds}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE /api/users/delete/all",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "e28abde0-0878-44d7-b297-a3cd6beb5741"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 6000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(6000);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "e46d6dfc-153f-422c-b0d7-80837097508c"
											}
										}
									],
									"id": "84ac9fe1-f09c-47d9-b7a0-adf9004fa906",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/delete/all",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"delete",
												"all"
											]
										}
									},
									"response": []
								}
							],
							"id": "152acd4c-434a-4ae1-8067-cef959e8225c",
							"description": "Routes for DELETE requests for users"
						}
					],
					"id": "93b72632-cb8a-44e2-ab3d-389aa3e4a0bf",
					"description": "Dynamic routes for users"
				},
				{
					"name": "admins",
					"item": [
						{
							"name": "POST",
							"item": [
								{
									"name": "POST /api/admins/",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "7136071a-b37a-45c7-819c-c1ed370e0c13"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 or 201\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    if (pm.response.code === 201) {",
													"        // Ensure the response has the expected top-level keys",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.status).to.have.property('success', true);",
													"",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'email', 'isActive', 'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(responseBody.data);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"    } else if (pm.response.code === 409) {",
													"        // For a 409 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "ca8171c5-a14b-49ae-bfd6-e52c6a4443a2"
											}
										}
									],
									"id": "216fd2fd-4816-4900-9ba3-a279c570aa67",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"isActive\": {{$randomBoolean}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/admins",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins"
											]
										}
									},
									"response": [
										{
											"id": "9ab4c818-fd1c-49fb-a0f9-d581761098f5",
											"name": "OK 200",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"isActive\": {{$randomBoolean}}\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{SERVER_URL}}/api/admins",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"admins"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Cache-Control",
													"value": "public, max-age=0, must-revalidate"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "229"
												},
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Date",
													"value": "Wed, 12 Feb 2025 14:59:30 GMT"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Server",
													"value": "Vercel"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "Vary",
													"value": "Origin, Accept-Encoding"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-Dns-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-Vercel-Cache",
													"value": "MISS"
												},
												{
													"key": "X-Vercel-Id",
													"value": "bom1::iad1::m4hpd-1739372370221-1bf8be146daf"
												},
												{
													"key": "X-Xss-Protection",
													"value": "0"
												}
											],
											"cookie": [],
											"body": "{\n    \"meta\": {\n        \"route\": \"/\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: New Admins created with ID \\\"67acb752e2dad2ccdcaa1bc9\\\".\"\n    },\n    \"data\": {\n        \"_id\": \"67acb752e2dad2ccdcaa1bc9\",\n        \"name\": \"Gregorio\",\n        \"email\": \"Jedediah56@yahoo.com\",\n        \"isActive\": false,\n        \"createdAt\": \"2025-02-12T14:59:30.536Z\",\n        \"updatedAt\": \"2025-02-12T14:59:30.536Z\"\n    },\n    \"errors\": {}\n}"
										}
									]
								}
							],
							"id": "acccc52c-356c-4b51-bc7b-7af35f3d29b1",
							"description": "Routes for POST requests for admins"
						},
						{
							"name": "GET",
							"item": [
								{
									"name": "GET /api/admins/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"const users = responseData.data;",
													"",
													"pm.test(\"Response status code is 200 or 404\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response time is less than 1500ms\", function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(1500);",
													"});",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"  const responseBody = pm.response.json();",
													"",
													"  // Check top-level keys",
													"  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"",
													"  if (pm.response.code === 200) {",
													"      // For a successful GET request, expect a success status",
													"      pm.expect(responseBody.status).to.have.property('success', true);",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
													"",
													"      // Validate that data is an array",
													"      pm.expect(responseBody.data).to.be.an('array');",
													"",
													"      // For each user, validate required keys and their types",
													"      responseBody.data.forEach(user => {",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'email', 'nid', 'isActive', 'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(user);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"      });",
													"  } else if (pm.response.code === 409) {",
													"      // In case of a conflict error, verify that the response is formatted as expected",
													"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
													"      pm.expect(responseBody.data).to.be.empty;",
													"      pm.expect(responseBody.errors).to.be.empty;",
													"  } else {",
													"      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"  }",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "cb0396ed-8169-41f6-a053-b578752c33af"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [],
												"type": "text/javascript",
												"id": "4fa43e30-6251-45a5-bc10-af087f987a2a"
											}
										}
									],
									"id": "845e483d-427f-4142-859b-a1bbd9dc91df",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/admins",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins"
											]
										}
									},
									"response": [
										{
											"id": "36f75511-eddc-4c9f-9f82-0cd94996ec74",
											"name": "OK 200",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{SERVER_URL}}/api/admins",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"admins"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Vary",
													"value": "Origin, Accept-Encoding"
												},
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "259"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Feb 2025 10:46:06 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"meta\": {\n        \"route\": \"/\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 1 Admins found with filters: None, sorted by '-createdAt', page 1, limit 10.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67adcd5b58b6381d08679603\",\n            \"name\": \"Ines\",\n            \"email\": \"Xavier.Robel@yahoo.com\",\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-13T10:45:47.239Z\",\n            \"updatedAt\": \"2025-02-13T10:45:47.239Z\"\n        }\n    ],\n    \"errors\": {}\n}"
										}
									]
								},
								{
									"name": "GET /api/admins/all",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Meta object should exist and be an object\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
													"});",
													"",
													"",
													"pm.test(\"Data array should not be empty\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"",
													"pm.test(\"Each object in the data array contains non-empty values for _id, name, email, isActive, createdAt, and updatedAt properties\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"",
													"    responseData.data.forEach(function(item) {",
													"        pm.expect(item._id).to.exist.and.to.not.be.empty;",
													"        pm.expect(item.name).to.exist.and.to.not.be.empty;",
													"        pm.expect(item.email).to.exist.and.to.not.be.empty;",
													"        pm.expect(item.isActive).to.exist;",
													"        pm.expect(item.createdAt).to.exist.and.to.not.be.empty;",
													"        pm.expect(item.updatedAt).to.exist.and.to.not.be.empty;",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "c78b17d2-23f9-44fe-b33e-86119c5ed166"
											}
										}
									],
									"id": "5dd93be1-8a1e-4888-a262-1aa8a181cff7",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/admins/all",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins",
												"all"
											]
										}
									},
									"response": [
										{
											"id": "cfc499d5-9e4e-488e-b5b7-c5701778c438",
											"name": "OK 200",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{SERVER_URL}}/api/admins/all",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"admins",
														"all"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Vary",
													"value": "Origin, Accept-Encoding"
												},
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "260"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Feb 2025 10:46:19 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"meta\": {\n        \"route\": \"/all\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 1 Admins found with filters: None, sorted by '-createdAt', page 1, limit 10.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67adcd5b58b6381d08679603\",\n            \"name\": \"Ines\",\n            \"email\": \"Xavier.Robel@yahoo.com\",\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-13T10:45:47.239Z\",\n            \"updatedAt\": \"2025-02-13T10:45:47.239Z\"\n        }\n    ],\n    \"errors\": {}\n}"
										}
									]
								},
								{
									"name": "GET /api/admins/list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Meta object should exist and be an object\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
													"});",
													"",
													"",
													"pm.test(\"Ensure the data array contains the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
													"",
													"    responseData.data.forEach(function(item) {",
													"        pm.expect(item).to.include.all.keys('_id', 'name', 'email', 'isActive', 'createdAt', 'updatedAt');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Verify that isActive field in the data array is a boolean value\", function () {",
													"  const responseData = pm.response.json();",
													"",
													"  pm.expect(responseData.data).to.be.an('array');",
													"  responseData.data.forEach(function(item) {",
													"    pm.expect(item.isActive).to.be.a('boolean');",
													"  });",
													"});"
												],
												"type": "text/javascript",
												"id": "dca2a7ff-2b29-430f-bfa7-1a7dbac880e6"
											}
										}
									],
									"id": "5571641e-363b-4434-9e24-59b6babf89d9",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/admins/list",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins",
												"list"
											]
										}
									},
									"response": [
										{
											"id": "fb369350-7734-4737-8bbf-edfb3e8b3715",
											"name": "OK 200",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{SERVER_URL}}/api/admins/list",
													"host": [
														"{{SERVER_URL}}"
													],
													"path": [
														"api",
														"admins",
														"list"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"_postman_previewtype": "html",
											"header": [
												{
													"key": "Content-Security-Policy-Report-Only",
													"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
												},
												{
													"key": "Cross-Origin-Opener-Policy",
													"value": "same-origin"
												},
												{
													"key": "Cross-Origin-Resource-Policy",
													"value": "same-origin"
												},
												{
													"key": "Origin-Agent-Cluster",
													"value": "?1"
												},
												{
													"key": "Referrer-Policy",
													"value": "strict-origin-when-cross-origin"
												},
												{
													"key": "Strict-Transport-Security",
													"value": "max-age=31536000; includeSubDomains"
												},
												{
													"key": "X-Content-Type-Options",
													"value": "nosniff"
												},
												{
													"key": "X-DNS-Prefetch-Control",
													"value": "off"
												},
												{
													"key": "X-Download-Options",
													"value": "noopen"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-Permitted-Cross-Domain-Policies",
													"value": "none"
												},
												{
													"key": "X-XSS-Protection",
													"value": "0"
												},
												{
													"key": "Vary",
													"value": "Origin, Accept-Encoding"
												},
												{
													"key": "Access-Control-Allow-Credentials",
													"value": "true"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Content-Length",
													"value": "261"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Date",
													"value": "Thu, 13 Feb 2025 10:46:38 GMT"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Keep-Alive",
													"value": "timeout=5"
												}
											],
											"cookie": [],
											"body": "{\n    \"meta\": {\n        \"route\": \"/list\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 1 Admins found with filters: None, sorted by '-createdAt', page 1, limit 10.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67adcd5b58b6381d08679603\",\n            \"name\": \"Ines\",\n            \"email\": \"Xavier.Robel@yahoo.com\",\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-13T10:45:47.239Z\",\n            \"updatedAt\": \"2025-02-13T10:45:47.239Z\"\n        }\n    ],\n    \"errors\": {}\n}"
										}
									]
								},
								{
									"name": "GET /api/admins/{{admin_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the admin list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching admins:\", err);\r",
													"    } else {\r",
													"        // Parse the response to extract admin data\r",
													"        const responseData = res.json();\r",
													"        const admins = responseData.data;\r",
													"\r",
													"        if (admins && admins.length > 0) {\r",
													"            // Select a random admin from the list\r",
													"            const randomadmin = admins[Math.floor(Math.random() * admins.length)];\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"admin_id\", randomadmin._id);\r",
													"            console.log(\"admin ID set:\", randomadmin._id);\r",
													"        } else {\r",
													"            pm.environment.set(\"admin_id\", '');\r",
													"            console.log(\"No admins found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "03409e1c-f004-4ab0-afa8-e81c20354bb7"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"",
													"",
													"pm.test(\"Status code is 200 or 404\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    if (pm.response.code === 200) {",
													"        // Ensure the response has the expected top-level keys",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(responseBody.status).to.have.property('success', true);",
													"",
													"        // List of allowed keys in the data object",
													"        const allowedKeys = [",
													"            '_id', 'name', 'email', 'nid', 'isActive', 'createdAt', 'updatedAt'",
													"        ];",
													"",
													"        // Get the actual keys present in the data object",
													"        const dataKeys = Object.keys(responseBody.data);",
													"",
													"        // Loop through each key in the data object and verify it is allowed",
													"        dataKeys.forEach(function(key) {",
													"            pm.expect(allowedKeys).to.include(key);",
													"        });",
													"    } else if (pm.response.code === 404) {",
													"        // For a 409 response, check that the expected keys exist and that",
													"        // both data and errors are empty objects.",
													"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"    } else {",
													"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "f0bdd84f-f4fa-4398-b2a9-dad6b9d26088"
											}
										}
									],
									"id": "ff209c10-1c07-4c74-b77d-420723a1843a",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/admins/{{admin_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins",
												"{{admin_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "9d7dd146-89ec-47af-9e05-075a347b4d67",
							"description": "Routes for GET requests for admins"
						},
						{
							"name": "PATCH",
							"item": [
								{
									"name": "PATCH /api/admins/{{admin_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Step 1: Fetch the admin list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching admins:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const admins = responseData.data;\r",
													"\r",
													"        if (admins && admins.length > 0) {\r",
													"            // Step 2: Select a random admin\r",
													"            const randomadmin = admins[Math.floor(Math.random() * admins.length)];\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"admin_id\", randomadmin._id);\r",
													"            console.log(\"admin ID set:\", randomadmin._id);\r",
													"\r",
													"            // Step 3: Generate random data\r",
													"            const randomId = Math.floor(Math.random() * 1000);\r",
													"            const isActive = Math.random() < 0.5;\r",
													"\r",
													"            const names = [\"Admin John Doe\", \"Admin Jane Smith\", \"Admin Alice Johnson\", \"Admin Michael Brown\", \"Admin Emily Davis\"];\r",
													"            const randomName = names[Math.floor(Math.random() * names.length)];\r",
													"\r",
													"            pm.environment.set(\"name\", randomName);\r",
													"            pm.environment.set(\"email\", `admin${randomId}@example.com`);\r",
													"            pm.environment.set(\"isActive\", isActive);\r",
													"        } else {\r",
													"            pm.environment.set(\"admin_id\", '');\r",
													"            console.log(\"No admins found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "d74d7dfb-1068-48aa-b179-1f864ac39946"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
													"});",
													"",
													"",
													"pm.test(\"Meta object should exist and be an object\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
													"});",
													"",
													"",
													"pm.test(\"Status object should exist and have properties\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.status).to.exist.and.to.be.an('object');",
													"  pm.expect(responseData.status.success).to.exist.and.to.be.a('boolean');",
													"  pm.expect(responseData.status.message).to.exist.and.to.be.a('string');",
													"});",
													"",
													"",
													"pm.test(\"Data object properties are present\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.data).to.be.an('object');",
													"    pm.expect(responseData.data).to.have.property('name');",
													"    pm.expect(responseData.data).to.have.property('email');",
													"    pm.expect(responseData.data).to.have.property('isActive');",
													"    pm.expect(responseData.data).to.have.property('createdAt');",
													"    pm.expect(responseData.data).to.have.property('updatedAt');",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "389cf93c-909f-444d-a9da-cdc2b8e7fb42"
											}
										}
									],
									"id": "7245e6fe-4ba3-4a5f-ae1d-167a4e588d05",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{name}}\",\n    \"email\": \"{{email}}\",\n    \"isActive\": {{isActive}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/admins/{{admin_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins",
												"{{admin_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "960ea57b-3ed8-43e0-bb01-90f1115c201d",
							"description": "Routes for PATCH requests for admins"
						},
						{
							"name": "DELETE",
							"item": [
								{
									"name": "DELETE /api/admins/{{admin_id}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the admin list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching admins:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const admins = responseData.data;\r",
													"\r",
													"        if (admins && admins.length > 0) {\r",
													"            // Select a random admin from the list\r",
													"            const randomadmin = admins[Math.floor(Math.random() * admins.length)];\r",
													"\r",
													"            console.log(\"Selected admin:\", randomadmin);\r",
													"\r",
													"            // Set the _id as an environment variable\r",
													"            pm.environment.set(\"admin_id\", randomadmin._id);\r",
													"            console.log(\"admin ID set:\", randomadmin._id);\r",
													"        } else {\r",
													"            pm.environment.set(\"admin_id\", '');\r",
													"            console.log(\"No admins found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "29ac581a-704f-43cc-975a-899980f69e9f"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Validate the meta object\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
													"});",
													"",
													"",
													"pm.test(\"Ensure that the status object has a 'success' key with a value of true\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.status.success).to.be.true;",
													"});",
													"",
													"",
													"pm.test(\"Data and errors objects should be empty\", function () {",
													"  const responseData = pm.response.json();",
													"",
													"  pm.expect(responseData.data).to.be.an('object').that.is.empty;",
													"  pm.expect(responseData.errors).to.be.an('object').that.is.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "def8db46-6de6-478f-917e-e6e99a24f352"
											}
										}
									],
									"id": "a58b12cc-60ec-4bb4-a173-f9a5785ac238",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/admins/{{admin_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins",
												"{{admin_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE /api/admins?ids={{docIds}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the admin list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching admins:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const admins = responseData.data;\r",
													"\r",
													"        console.log(admins)\r",
													"\r",
													"        if (admins && admins.length > 0) {\r",
													"            // Extract all admin IDs\r",
													"            const adminIds = admins.map(admin => admin._id);\r",
													"\r",
													"            // Convert the array of IDs into a comma-separated string\r",
													"            const ids = adminIds.join(',');\r",
													"\r",
													"            // Set as an environment variable\r",
													"            pm.environment.set(\"docIds\", ids);\r",
													"\r",
													"            console.log(\"Document IDs set:\", ids);\r",
													"        } else {\r",
													"            pm.environment.set(\"docIds\", '');\r",
													"            console.log(\"No admins found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "1b936776-9ce7-42d6-9da5-c42a45dfc8a2"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.to.have.status(200));",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - meta, status, data, and errors\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.meta).to.exist;",
													"    pm.expect(responseData.status).to.exist;",
													"    pm.expect(responseData.data).to.exist;",
													"    pm.expect(responseData.errors).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Route in meta is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
													"    pm.expect(responseData.meta.route).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Success in status is a boolean value\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.status.success).to.be.a('boolean');",
													"});",
													"",
													"",
													"pm.test(\"Message in status is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.status.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"id": "cd80c474-ba5f-4c51-8009-a662e00c751e"
											}
										}
									],
									"id": "2d145fb6-d873-44cb-a9fd-88da9218c8fb",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/admins?ids={{docIds}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{docIds}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE /api/admins/delete-list?ids={{docIds}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the admin list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching admins:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const admins = responseData.data;\r",
													"\r",
													"        console.log(admins)\r",
													"\r",
													"        if (admins && admins.length > 0) {\r",
													"            // Extract all admin IDs\r",
													"            const adminIds = admins.map(admin => admin._id);\r",
													"\r",
													"            // Convert the array of IDs into a comma-separated string\r",
													"            const ids = adminIds.join(',');\r",
													"\r",
													"            // Set as an environment variable\r",
													"            pm.environment.set(\"docIds\", ids);\r",
													"\r",
													"            console.log(\"Document IDs set:\", ids);\r",
													"        } else {\r",
													"            pm.environment.set(\"docIds\", '');\r",
													"            console.log(\"No admins found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "b6462ea3-ddd3-4d25-8d01-48d36df64337"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [],
												"type": "text/javascript",
												"id": "4696264e-ca7d-4478-9df4-692452967abb"
											}
										}
									],
									"id": "cf4b8b4e-93fd-4ab7-8c3e-bef36831f727",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/admins/delete-list",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins",
												"delete-list"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE /api/admins/delete-by-list?ids={{docIds}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the admin list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching admins:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const admins = responseData.data;\r",
													"\r",
													"        console.log(admins)\r",
													"\r",
													"        if (admins && admins.length > 0) {\r",
													"            // Extract all admin IDs\r",
													"            const adminIds = admins.map(admin => admin._id);\r",
													"\r",
													"            // Convert the array of IDs into a comma-separated string\r",
													"            const ids = adminIds.join(',');\r",
													"\r",
													"            // Set as an environment variable\r",
													"            pm.environment.set(\"docIds\", ids);\r",
													"\r",
													"            console.log(\"Document IDs set:\", ids);\r",
													"        } else {\r",
													"            pm.environment.set(\"docIds\", '');\r",
													"            console.log(\"No admins found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "53a56c9b-5b89-4ff9-a70c-6958954317b1"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [],
												"type": "text/javascript",
												"id": "8457a84c-be8c-4b75-acdc-a61046c59321"
											}
										}
									],
									"id": "e687caed-bcc1-4885-a7ba-3b7d9b503aa9",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/admins/delete-by-list",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins",
												"delete-by-list"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE /api/admins/destroy-list?ids={{docIds}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the admin list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching admins:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const admins = responseData.data;\r",
													"\r",
													"        console.log(admins)\r",
													"\r",
													"        if (admins && admins.length > 0) {\r",
													"            // Extract all admin IDs\r",
													"            const adminIds = admins.map(admin => admin._id);\r",
													"\r",
													"            // Convert the array of IDs into a comma-separated string\r",
													"            const ids = adminIds.join(',');\r",
													"\r",
													"            // Set as an environment variable\r",
													"            pm.environment.set(\"docIds\", ids);\r",
													"\r",
													"            console.log(\"Document IDs set:\", ids);\r",
													"        } else {\r",
													"            pm.environment.set(\"docIds\", '');\r",
													"            console.log(\"No admins found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "171c26a0-6538-4cc6-8fde-a7f99ccdae2a"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [],
												"type": "text/javascript",
												"id": "43144324-c72a-43c2-aed4-9e47cf053cc6"
											}
										}
									],
									"id": "eda4471e-e8d4-4279-8ff9-b25d9a8d2d86",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/admins/destroy-list",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins",
												"destroy-list"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE /api/admins/destroy-by-list?ids={{docIds}}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Send a GET request to fetch the admin list\r",
													"pm.sendRequest({\r",
													"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching admins:\", err);\r",
													"    } else {\r",
													"        const responseData = res.json();\r",
													"        const admins = responseData.data;\r",
													"\r",
													"        console.log(admins)\r",
													"\r",
													"        if (admins && admins.length > 0) {\r",
													"            // Extract all admin IDs\r",
													"            const adminIds = admins.map(admin => admin._id);\r",
													"\r",
													"            // Convert the array of IDs into a comma-separated string\r",
													"            const ids = adminIds.join(',');\r",
													"\r",
													"            // Set as an environment variable\r",
													"            pm.environment.set(\"docIds\", ids);\r",
													"\r",
													"            console.log(\"Document IDs set:\", ids);\r",
													"        } else {\r",
													"            pm.environment.set(\"docIds\", '');\r",
													"            console.log(\"No admins found in the response.\");\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "8539a253-d833-43bc-a58c-15aecd6120c1"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [],
												"type": "text/javascript",
												"id": "193b7a5c-c81f-4d13-b824-74d1c1fee691"
											}
										}
									],
									"id": "844a5cd2-054e-40d4-988d-21c38285d2a5",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/admins/destroy-by-list",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins",
												"destroy-by-list"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE /api/admin/delete/all",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "e2c87c18-a8de-4377-8f5c-822993971472"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response time is less than 6000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(6000);",
													"});",
													"",
													"",
													"pm.test(\"Verify the response body format\", function () {",
													"    const responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
													"    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
													"    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"id": "3afe1488-cd70-462f-942f-8734f87ea6b4"
											}
										}
									],
									"id": "4c18cad1-aa23-4291-a3c4-9e95a9ac98dd",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/admins/delete/all",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"admins",
												"delete",
												"all"
											]
										}
									},
									"response": []
								}
							],
							"id": "5f91b365-9f86-44f5-bbec-67707b947e49",
							"description": "Routes for DELETE requests for admins"
						}
					],
					"id": "6f0e0626-2a5e-41c7-b58b-ecadf47e5c6b",
					"description": "Dynamic routes for admins"
				},
				{
					"name": "routes-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Meta object should exist and be non-empty\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.meta).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Verify success status and message in the status object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('status');",
									"  pm.expect(responseData.status).to.have.property('success', true);",
									"  pm.expect(responseData.status).to.have.property('message').that.is.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Data object should contain users and admins with their respective HTTP methods and endpoints\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.be.an('object');",
									"  pm.expect(responseData.data.users).to.be.an('object');",
									"  pm.expect(responseData.data.users.POST).to.be.an('array');",
									"  pm.expect(responseData.data.users.GET).to.be.an('array');",
									"  pm.expect(responseData.data.users.PATCH).to.be.an('array');",
									"  pm.expect(responseData.data.users.DELETE).to.be.an('array');",
									"  ",
									"  pm.expect(responseData.data.admins).to.be.an('object');",
									"  pm.expect(responseData.data.admins.POST).to.be.an('array');",
									"  pm.expect(responseData.data.admins.GET).to.be.an('array');",
									"  pm.expect(responseData.data.admins.PATCH).to.be.an('array');",
									"  pm.expect(responseData.data.admins.DELETE).to.be.an('array');",
									"});"
								],
								"type": "text/javascript",
								"id": "551ca575-cb89-416d-9781-fa1fc96762c1"
							}
						}
					],
					"id": "d1157b75-2822-45c6-99cb-fec936f10b8a",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{SERVER_URL}}/api/routes-info",
							"host": [
								"{{SERVER_URL}}"
							],
							"path": [
								"api",
								"routes-info"
							]
						}
					},
					"response": [
						{
							"id": "b1b35f6b-c375-4f8d-bb86-1248822c4d77",
							"name": "OK 200",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}/api/routes-info",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"routes-info"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Security-Policy-Report-Only",
									"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Content-Length",
									"value": "344"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 11 Feb 2025 11:02:53 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"meta\": {\n        \"route\": \"/api/routes-info\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Successfully retrieved available routes.\"\n    },\n    \"data\": {\n        \"users\": {\n            \"POST\": [\n                \"/api/users/\",\n                \"/api/users/create\",\n                \"/api/users/new\",\n                \"/api/users/create/dummy\",\n                \"/api/users/create-dummy\",\n                \"/api/users/create-dummy-data\",\n                \"/api/users/create-fake\",\n                \"/api/users/create-fake-data\",\n                \"/api/users/create-sample\",\n                \"/api/users/create-sample-data\",\n                \"/api/users/generate-sample\",\n                \"/api/users/generate-sample-data\"\n            ],\n            \"GET\": [\n                \"/api/users/\",\n                \"/api/users/all\",\n                \"/api/users/list\",\n                \"/api/users/read\",\n                \"/api/users/show\",\n                \"/api/users/view\",\n                \"/api/users/:id\",\n                \"/api/users/read/:id\",\n                \"/api/users/show/:id\",\n                \"/api/users/view/:id\"\n            ],\n            \"PATCH\": [\n                \"/api/users/:id\",\n                \"/api/users/edit/:id\",\n                \"/api/users/update/:id\"\n            ],\n            \"DELETE\": [\n                \"/api/users/:id\",\n                \"/api/users/delete/:id\",\n                \"/api/users/destroy/:id\",\n                \"/api/users/\",\n                \"/api/users/delete-list\",\n                \"/api/users/delete-by-list\",\n                \"/api/users/destroy-list\",\n                \"/api/users/destroy-by-list\"\n            ]\n        },\n        \"admins\": {\n            \"POST\": [\n                \"/api/admins/\"\n            ],\n            \"GET\": [\n                \"/api/admins/\",\n                \"/api/admins/all\",\n                \"/api/admins/list\",\n                \"/api/admins/:id\"\n            ],\n            \"PATCH\": [\n                \"/api/admins/:id\"\n            ],\n            \"DELETE\": [\n                \"/api/admins/:id\",\n                \"/api/admins/\",\n                \"/api/admins/delete-list\",\n                \"/api/admins/delete-by-list\",\n                \"/api/admins/destroy-list\",\n                \"/api/admins/destroy-by-list\"\n            ]\n        }\n    },\n    \"errors\": {}\n}"
						},
						{
							"id": "8d9070ed-5609-4b92-9471-1a128c9d4f63",
							"name": "NOT_FOUND 404",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{SERVER_URL}}/api/routes-infos",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"routes-infos"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "raw",
							"_postman_previewtype": "html",
							"header": [
								{
									"key": "Content-Security-Policy-Report-Only",
									"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin-when-cross-origin"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Content-Length",
									"value": "121"
								},
								{
									"key": "Content-Type",
									"value": "[object Object]"
								},
								{
									"key": "Date",
									"value": "Tue, 11 Feb 2025 11:03:07 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\"meta\":{\"route\":\"/api/routes-infos\"},\"status\":{\"message\":\"Not Found: The route GET /api/routes-infos does not exist.\"},\"data\":{},\"errors\":{}}"
						}
					]
				}
			],
			"id": "070ccfa2-1d6d-4765-9efc-0da6ba7d5e63"
		}
	]
}