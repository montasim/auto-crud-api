{
  "info": {
    "_postman_id": "a83e252c-7765-4a84-9c77-9fd34f0495d3",
    "name": "auto-crud-api",
    "description": "A collection generated from dynamic API routes grouped by HTTP method.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_uid": "12432462-a83e252c-7765-4a84-9c77-9fd34f0495d3"
  },
  "item": [
    {
      "name": "api",
      "item": [
        {
          "name": "users",
          "item": [
            {
              "name": "POST",
              "item": [
                {
                  "name": "POST /api/users/",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "ca5d542c-27c3-4c97-8335-074a1c397acf",
                        "exec": [
                          "// Generate random data with valid name\r",
                          "const randomId = Math.floor(Math.random() * 1000);\r",
                          "const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
                          "\r",
                          "pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
                          "pm.environment.set(\"phone\", randomPhone);\r",
                          "pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "927b3e06-2aa7-4ff2-99fc-50ae3040985b",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Content type is application/json\", function () {\r",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Response time is less than 5000ms\", function () {\r",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Verify the response body format\", function () {\r",
                          "    const responseBody = pm.response.json();\r",
                          "\r",
                          "    if (pm.response.code === 201) {\r",
                          "        // Ensure the response has the expected top-level keys\r",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');\r",
                          "        pm.expect(responseBody.status).to.have.property('success', true);\r",
                          "\r",
                          "        // List of allowed keys in the data object\r",
                          "        const allowedKeys = [\r",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',\r",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',\r",
                          "            'createdAt', 'updatedAt'\r",
                          "        ];\r",
                          "\r",
                          "        // Get the actual keys present in the data object\r",
                          "        const dataKeys = Object.keys(responseBody.data);\r",
                          "\r",
                          "        // Loop through each key in the data object and verify it is allowed\r",
                          "        dataKeys.forEach(function(key) {\r",
                          "            pm.expect(allowedKeys).to.include(key);\r",
                          "        });\r",
                          "    } else if (pm.response.code === 409) {\r",
                          "        // For a 409 response, check that the expected keys exist and that\r",
                          "        // both data and errors are empty objects.\r",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');\r",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;\r",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;\r",
                          "    } else {\r",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);\r",
                          "    }\r",
                          "});\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "6959f800-8254-47d8-93b7-05d4f49256aa",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "X-Site-Identifier",
                        "value": "auto-crud-api",
                        "type": "text"
                      },
                      {
                        "key": "x-mock-response-code",
                        "value": "403",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{$randomFirstName}} {{$randomLastName}}\",\n    \"avatarUrl\": \"{{$randomAvatarImage}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{$randomLoremSentence}}\",\n    \"portfolio\": \"{{$randomUrl}}\",\n    \"age\": {{age}},\n    \"isActive\": {{$randomBoolean}}\n}\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users"]
                    }
                  },
                  "response": [
                    {
                      "id": "cb88e119-a049-45f4-8d45-d997cc8eb50d",
                      "name": "OK 201",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{SERVER_URL}}/api/users",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "users"]
                        }
                      },
                      "status": "Created",
                      "code": 201,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "0bfa6066-2b86-42bf-b823-c44d93cb43c7"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "0706077e-76bb-4f69-bbf3-a7fc47c344b5"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "d164f680-87ff-408c-834c-43dc146e737c"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "9439f64c-6b95-4f2e-aab5-1b2c224fa188"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "6fe82012-5e05-4829-abea-08077831dfaf"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "150c1c24-1d04-471d-a960-a1c844342e94"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "7c8941fa-f83c-4408-beca-ba6d54c8152b"
                        },
                        {
                          "key": "X-DNS-Prefetch-Control",
                          "value": "off",
                          "uuid": "4ee3bd15-89b5-4da0-a860-386b18210e6c"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "06141b46-76be-4afc-bebe-d48ed6be82d6"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "d388c048-d475-42e9-a86a-601c9aae651c"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "5abef99c-6827-4ae9-ad50-383ded65af82"
                        },
                        {
                          "key": "X-XSS-Protection",
                          "value": "0",
                          "uuid": "cddd2c6e-4a96-4c6c-9749-e66a64ff922b"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin, Accept-Encoding",
                          "uuid": "d277ddb4-0a1a-4509-b4b0-148dc5f3a0c6"
                        },
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "5d32e1b8-88b7-485a-9789-c000bf43629a"
                        },
                        {
                          "key": "RateLimit-Policy",
                          "value": "100;w=60",
                          "uuid": "94cf838d-3401-4dda-9ebe-88f4eeb22a3d"
                        },
                        {
                          "key": "RateLimit-Limit",
                          "value": "100",
                          "uuid": "f080f7fb-2513-4386-9d6e-94ce9714cb78"
                        },
                        {
                          "key": "RateLimit-Remaining",
                          "value": "99",
                          "uuid": "594589d2-f845-4051-8e03-5c72fa7f12ad"
                        },
                        {
                          "key": "RateLimit-Reset",
                          "value": "60",
                          "uuid": "d4686ca3-9f0a-4685-9d89-f3cacd6fc8b6"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "f8495528-a811-4a11-a636-680292f4f8ca"
                        },
                        {
                          "key": "Content-Length",
                          "value": "314",
                          "uuid": "27e1628d-c909-49cb-9b6a-ad1a53e40bc5"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "uuid": "fb023fb6-1523-4cfc-a00c-e1b3883344a0"
                        },
                        {
                          "key": "Date",
                          "value": "Tue, 11 Feb 2025 09:35:28 GMT",
                          "uuid": "453ca1df-dadf-4f3a-9903-686ed1e00c4c"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "uuid": "ee3cbd50-7609-49cb-8618-314ac8ff096e"
                        },
                        {
                          "key": "Keep-Alive",
                          "value": "timeout=5",
                          "uuid": "7ec90411-c271-48ad-8e42-30452751b617"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"meta\": {\n        \"route\": \"/\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: New Users created with ID \\\"67ab19e051cb68b48e9a9146\\\".\"\n    },\n    \"data\": {\n        \"_id\": \"67ab19e051cb68b48e9a9146\",\n        \"name\": \"Emily Davis\",\n        \"avatarUrl\": \"http://example.com/avatar.png\",\n        \"email\": \"user553@example.com\",\n        \"nid\": \"1000000553\",\n        \"phone\": \"+8801758126687\",\n        \"bio\": \"This is a sample bio.\",\n        \"portfolio\": \"http://example.com/553\",\n        \"age\": 54,\n        \"isActive\": true,\n        \"createdAt\": \"2025-02-11T09:35:28.449Z\",\n        \"updatedAt\": \"2025-02-11T09:35:28.449Z\"\n    },\n    \"errors\": {}\n}"
                    },
                    {
                      "id": "750bfa99-749f-4044-af6c-191c2f47175e",
                      "name": "BAD_REQUEST 400",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{SERVER_URL}}/api/users",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "users"]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "raw",
                      "header": [
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "ba5b9f03-c3b5-4257-a99f-04fff55636a8"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "03cd411e-3001-4596-b88c-4e7c591a7e19"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "55abd5fa-d4ab-4618-baf6-06c3c769d64a"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "fd0f3d7f-9ace-4c4b-bbd9-dbe0172694ae"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "2ea8dd0a-070d-4a87-af37-9b923b49a8af"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "139051de-2771-40f0-a8bc-91640f5c6a9c"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "4c904604-5796-40e6-85d3-5fbcb3c966a0"
                        },
                        {
                          "key": "X-DNS-Prefetch-Control",
                          "value": "off",
                          "uuid": "bf50d442-ac98-475b-a274-1ff2337bb88f"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "15b23fce-4519-4db4-a08c-9bf6b461b7e6"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "8e4d6c30-ffbe-4438-b77d-02fa1ec58103"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "2b83692a-c603-43b4-b060-08318be49101"
                        },
                        {
                          "key": "X-XSS-Protection",
                          "value": "0",
                          "uuid": "7caf5bcf-3be0-4749-8d01-de7f3bb7d64e"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin",
                          "uuid": "2d8b4ab8-6c03-4745-a84f-6a65a14f5208"
                        },
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "9a55f3a4-04f2-4e4b-9b35-beb284b2ec06"
                        },
                        {
                          "key": "RateLimit-Policy",
                          "value": "100;w=60",
                          "uuid": "5d8d03f8-509b-4fa4-ad16-66bd96568b25"
                        },
                        {
                          "key": "RateLimit-Limit",
                          "value": "100",
                          "uuid": "19455b7d-18b3-40cf-aab0-f30de13f5895"
                        },
                        {
                          "key": "RateLimit-Remaining",
                          "value": "98",
                          "uuid": "99afff4b-df45-455d-9719-8a9efb459a94"
                        },
                        {
                          "key": "RateLimit-Reset",
                          "value": "27",
                          "uuid": "8b783a5c-c955-453c-aa50-cd9253a86c5d"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "ac5880de-6b90-4bbf-bb49-c77e25b51743"
                        },
                        {
                          "key": "Content-Length",
                          "value": "158",
                          "uuid": "9a79c778-f89c-40a5-a406-0e146a21f6f6"
                        },
                        {
                          "key": "Content-Type",
                          "value": "[object Object]",
                          "uuid": "a258d6a2-d25f-448c-9f94-757d2a64c670"
                        },
                        {
                          "key": "Date",
                          "value": "Tue, 11 Feb 2025 09:36:01 GMT",
                          "uuid": "b4bd86b6-c195-475e-8b49-4464739467df"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "uuid": "c167401e-a421-42e6-babd-24a37c84b5f2"
                        },
                        {
                          "key": "Keep-Alive",
                          "value": "timeout=5",
                          "uuid": "974e2d79-fa60-4522-8062-6fc3c90b735f"
                        }
                      ],
                      "cookie": [],
                      "body": "{\"meta\":{\"route\":\"/\"},\"status\":{\"message\":\"Data validation failed\"},\"data\":{},\"errors\":[{\"field\":\"name\",\"message\":\"Name must be between 3 and 50 characters and contain only letters and spaces\"}]}"
                    },
                    {
                      "id": "ec9f77b0-53d0-4741-a726-3608eeb27b8f",
                      "name": "FORBIDDEN 403",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{SERVER_URL}}/api/users",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "users"]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "7b7cafa5-470f-42c3-b131-12fa7fb8f13e"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "390de812-85d3-4361-a5dd-264064b8efc7"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "b9fda218-962b-4922-93ad-7f9215fae8c4"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "23aab088-4557-49b7-820a-7ecbb182b2d0"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "76954264-0954-4ed9-85a6-e37148866132"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "b8a2e1e0-fe24-4753-88ad-8e6827012c17"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "8abd6163-2b06-4cbc-8712-5fb6aabb9520"
                        },
                        {
                          "key": "X-DNS-Prefetch-Control",
                          "value": "off",
                          "uuid": "98d2fee8-ecf8-4355-97a6-98bd17ff9e0e"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "154588cb-992c-46db-b570-4ff23f3c8029"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "290664b1-59dc-43c8-9aae-156028f7ff4b"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "5817bbf9-c5e1-4d31-8b9b-7519b34e572b"
                        },
                        {
                          "key": "X-XSS-Protection",
                          "value": "0",
                          "uuid": "faa0e734-9734-4c4e-9051-4dde4e816187"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin",
                          "uuid": "2f917e75-b917-47d4-84bb-4f7e468cca6e"
                        },
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "1cc4844d-b4c8-442a-9df0-9676a150ae45"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json; charset=utf-8",
                          "uuid": "30e851d9-4537-4fff-9314-3123abce8f14"
                        },
                        {
                          "key": "Content-Length",
                          "value": "102",
                          "uuid": "2cb0795d-4523-4a15-9063-fc2933aa532b"
                        },
                        {
                          "key": "ETag",
                          "value": "W/\"66-RMZ3/ejO/1q/Hwq4XIYQOzOO7WU\"",
                          "uuid": "b8c718fe-a2f2-4e6b-ba76-008adbcab7cc"
                        },
                        {
                          "key": "Date",
                          "value": "Tue, 11 Feb 2025 11:50:05 GMT",
                          "uuid": "2aa5d03e-2f05-44eb-84f5-b8471e1c3c33"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "uuid": "ee18fc07-6993-4d00-bc06-cea51eec2523"
                        },
                        {
                          "key": "Keep-Alive",
                          "value": "timeout=5",
                          "uuid": "07136353-191d-4e48-8d5c-70b686998990"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"error\": \"Missing 'X-Site-Identifier' header in the request.\",\n    \"errorCode\": \"MISSING_IDENTIFIER_HEADER\"\n}"
                    }
                  ]
                },
                {
                  "name": "POST /api/users/create",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "ec48a53f-da44-4164-b5db-e4282f6664c6",
                        "exec": [
                          "// Generate random data with valid name\r",
                          "const randomId = Math.floor(Math.random() * 1000);\r",
                          "const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
                          "const isActive = Math.random() < 0.5;\r",
                          "\r",
                          "// Generate a valid name (3-50 characters, letters, and spaces only)\r",
                          "const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
                          "const randomName = names[Math.floor(Math.random() * names.length)];\r",
                          "\r",
                          "pm.environment.set(\"name\", randomName);\r",
                          "pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
                          "pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
                          "pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
                          "pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
                          "pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
                          "pm.environment.set(\"phone\", randomPhone);\r",
                          "pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
                          "pm.environment.set(\"isActive\", isActive);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "6ce08842-ab64-4832-950c-969684d251f4",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    if (pm.response.code === 201) {",
                          "        // Ensure the response has the expected top-level keys",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.status).to.have.property('success', true);",
                          "",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(responseBody.data);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "    } else if (pm.response.code === 409) {",
                          "        // For a 409 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "    }",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "4c92ebb3-78c4-4b42-bb86-4da2804a28dd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/create",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "create"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "POST /api/users/new",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "48814f12-99e2-4a95-95dc-49e4a306dd78",
                        "exec": [
                          "// Generate random data with valid name\r",
                          "const randomId = Math.floor(Math.random() * 1000);\r",
                          "const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
                          "const isActive = Math.random() < 0.5;\r",
                          "\r",
                          "// Generate a valid name (3-50 characters, letters, and spaces only)\r",
                          "const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
                          "const randomName = names[Math.floor(Math.random() * names.length)];\r",
                          "\r",
                          "pm.environment.set(\"name\", randomName);\r",
                          "pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
                          "pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
                          "pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
                          "pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
                          "pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
                          "pm.environment.set(\"phone\", randomPhone);\r",
                          "pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
                          "pm.environment.set(\"isActive\", isActive);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "82585a9d-bd35-45fc-afd4-a3fdaceff378",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    if (pm.response.code === 201) {",
                          "        // Ensure the response has the expected top-level keys",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.status).to.have.property('success', true);",
                          "",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(responseBody.data);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "    } else if (pm.response.code === 409) {",
                          "        // For a 409 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "    }",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "1d356fe6-1218-49d1-b826-b0f9a01fa01f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/new",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "new"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "POST /api/users/create/dummy?count={{count}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "35963da3-0290-4334-a88d-a01a3189c0a0",
                        "exec": [
                          "pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "2da7681e-828c-4710-9b4e-861b56dc70b7",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
                          "",
                          "// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
                          "",
                          "// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    if (pm.response.code === 201) {",
                          "        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
                          "",
                          "        responseData.data.forEach(function (user) {",
                          "            pm.expect(user).to.be.an('object');",
                          "            pm.expect(user._id).to.be.a('string');",
                          "            pm.expect(user.name).to.be.a('string');",
                          "            pm.expect(user.avatarUrl).to.be.a('string');",
                          "            pm.expect(user.email).to.be.a('string');",
                          "            pm.expect(user.nid).to.be.a('string');",
                          "            pm.expect(user.phone).to.be.a('string');",
                          "            pm.expect(user.bio).to.be.a('string');",
                          "            pm.expect(user.portfolio).to.be.a('string');",
                          "            pm.expect(user.age).to.be.a('number');",
                          "            pm.expect(user.isActive).to.be.a('boolean');",
                          "            pm.expect(user.createdAt).to.be.a('string');",
                          "            pm.expect(user.updatedAt).to.be.a('string');",
                          "        });",
                          "",
                          "        // You can add more specific value checks here if needed, for example:",
                          "        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
                          "",
                          "    } else if (pm.response.code === 409) {",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.meta).to.have.property('route', '/');",
                          "        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
                          "        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
                          "        pm.expect(responseBody.errors).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "ed03e727-2cc7-4609-a604-d6e0029453e0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/create/dummy?count={{count}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "create", "dummy"],
                      "query": [
                        {
                          "key": "count",
                          "value": "{{count}}"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "34f61ae7-221a-41cc-8f0f-a0400b79d8db",
                      "name": "OK 200",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{SERVER_URL}}/api/users/create/dummy?count={{count}}",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "users", "create", "dummy"],
                          "query": [
                            {
                              "key": "count",
                              "value": "{{count}}"
                            }
                          ]
                        }
                      },
                      "status": "Created",
                      "code": 201,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "a5a8197a-7334-4a06-9cd5-08c2c1b63db2"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "f375abcf-12d3-4e7d-b601-c3aba6171d59"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "9a303fcd-f4fa-4044-b8d4-966b20623138"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "5f28be56-123d-47c0-89b9-21324271cff6"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "a3d3962a-3a03-4036-ae7f-9600717cb2b6"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "bb3d5f04-06c9-4c7f-9981-2c6b9ddfc239"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "00d716d7-a2e8-4cc2-bbdb-220cd0b923d9"
                        },
                        {
                          "key": "X-DNS-Prefetch-Control",
                          "value": "off",
                          "uuid": "f2b5b75c-c165-4d8c-b98c-6bf1fb515b6a"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "119c78ca-f234-44d0-9de0-9b01fa7252e6"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "5e946d79-19e8-47da-a101-2d874e3e9e29"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "e779d7d3-be47-4caf-b409-5f88b7c90941"
                        },
                        {
                          "key": "X-XSS-Protection",
                          "value": "0",
                          "uuid": "9ed0d01c-7858-47dc-a200-c16ec5111594"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin, Accept-Encoding",
                          "uuid": "4e040d32-4117-4360-ab39-110a4b5c5b5e"
                        },
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "5fd8c790-da63-4c5e-9184-e4dc0e1be699"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "cddf5532-2b6b-4001-b78a-c7dc2266896d"
                        },
                        {
                          "key": "Content-Length",
                          "value": "6321",
                          "uuid": "e49d1ec1-9b26-4e20-95b5-1268fe06e402"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "uuid": "3ca1d358-bbe8-4794-8991-0af2d0cf313d"
                        },
                        {
                          "key": "Date",
                          "value": "Tue, 11 Feb 2025 10:33:20 GMT",
                          "uuid": "c4e9d0d9-206c-4f41-bf14-2ac27b6d9bdc"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "uuid": "0c3405fa-80d3-44a1-99c4-47547214de6f"
                        },
                        {
                          "key": "Keep-Alive",
                          "value": "timeout=5",
                          "uuid": "ec8d72b5-efc2-4234-8a69-931daa3750e0"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"meta\": {\n        \"route\": \"/create/dummy?count=56\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 56 Userss created with dummy data.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67ab276fe8de5d3e450769e6\",\n            \"name\": \"Usque molestiae \",\n            \"avatarUrl\": \"Templum aegrotatio\",\n            \"email\": \"jared93@gmail.com\",\n            \"nid\": \"4165601751\",\n            \"phone\": \"+01405606656\",\n            \"bio\": \"Defessus accedo fugiat utpote verecundia valeo.\",\n            \"portfolio\": \"https://example.com/PVGce\",\n            \"age\": 80,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-15T04:37:01.654Z\",\n            \"updatedAt\": \"2024-07-22T23:13:58.723Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769e8\",\n            \"name\": \"Fuga conculco am\",\n            \"avatarUrl\": \"Culpo amet demergo\",\n            \"email\": \"gabriella.rodriguez48@hotmail.com\",\n            \"nid\": \"2227024215\",\n            \"phone\": \"+01703237657\",\n            \"bio\": \"Sulum vicissitudo denique compello considero demonstro.\",\n            \"portfolio\": \"https://example.com/FUaOM\",\n            \"age\": 40,\n            \"isActive\": true,\n            \"createdAt\": \"2024-03-02T14:29:11.068Z\",\n            \"updatedAt\": \"2025-01-27T11:36:46.553Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769e9\",\n            \"name\": \"Voco aureus cano\",\n            \"avatarUrl\": \"Collum vivo\",\n            \"email\": \"luella69@hotmail.com\",\n            \"nid\": \"4020610221\",\n            \"phone\": \"8801424537746\",\n            \"bio\": \"Nisi defungo nesciunt umquam usitas nulla collum accendo valens conservo.\",\n            \"portfolio\": \"https://example.com/8jnIc\",\n            \"age\": 96,\n            \"isActive\": true,\n            \"createdAt\": \"2024-07-28T11:09:22.323Z\",\n            \"updatedAt\": \"2024-04-01T12:56:20.221Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ea\",\n            \"name\": \"Caute cotidie te\",\n            \"avatarUrl\": \"Spargo tergum\",\n            \"email\": \"harold_wisozk67@gmail.com\",\n            \"nid\": \"1024083945\",\n            \"phone\": \"01718044037\",\n            \"bio\": \"Molestiae contego tamen volaticus blanditiis tumultus crudelis adfectus.\",\n            \"portfolio\": \"https://example.com/ZtFlg\",\n            \"age\": 69,\n            \"isActive\": false,\n            \"createdAt\": \"2024-02-17T17:17:35.021Z\",\n            \"updatedAt\": \"2024-10-03T06:48:29.341Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ec\",\n            \"name\": \"Incidunt deduco \",\n            \"avatarUrl\": \"Angelus despecto\",\n            \"email\": \"myra.schmidt@yahoo.com\",\n            \"nid\": \"0519207223\",\n            \"phone\": \"8801557074366\",\n            \"bio\": \"Cauda tabella cervus ad corpus neque.\",\n            \"portfolio\": \"https://example.com/iOg9Z\",\n            \"age\": 64,\n            \"isActive\": true,\n            \"createdAt\": \"2024-03-26T12:10:13.888Z\",\n            \"updatedAt\": \"2024-11-21T04:20:07.786Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ed\",\n            \"name\": \"Ater abstergo de\",\n            \"avatarUrl\": \"Suscipit officiis\",\n            \"email\": \"darron12@gmail.com\",\n            \"nid\": \"8017579556\",\n            \"phone\": \"8801760769413\",\n            \"bio\": \"Amplus amiculum spes.\",\n            \"portfolio\": \"https://example.com/ddLKg\",\n            \"age\": 39,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-27T05:38:58.172Z\",\n            \"updatedAt\": \"2024-12-05T17:45:23.356Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ee\",\n            \"name\": \"Tonsor a adempti\",\n            \"avatarUrl\": \"Curtus custodia\",\n            \"email\": \"everardo.casper49@gmail.com\",\n            \"nid\": \"2506279295\",\n            \"phone\": \"8801848375950\",\n            \"bio\": \"Dicta error adipiscor.\",\n            \"portfolio\": \"https://example.com/1dh1A\",\n            \"age\": 43,\n            \"isActive\": true,\n            \"createdAt\": \"2024-02-17T04:59:18.749Z\",\n            \"updatedAt\": \"2024-12-14T13:09:35.570Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ef\",\n            \"name\": \"Cerno approbo de\",\n            \"avatarUrl\": \"Tenax subiungo\",\n            \"email\": \"kyla6@yahoo.com\",\n            \"nid\": \"3100963505\",\n            \"phone\": \"+8801972516004\",\n            \"bio\": \"Corrumpo benevolentia deludo.\",\n            \"portfolio\": \"https://example.com/nS0ra\",\n            \"age\": 113,\n            \"isActive\": true,\n            \"createdAt\": \"2024-08-02T12:30:00.698Z\",\n            \"updatedAt\": \"2024-11-23T16:18:39.489Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f0\",\n            \"name\": \"Coniuratio bland\",\n            \"avatarUrl\": \"Accusantium curvo\",\n            \"email\": \"bethel.nikolaus71@yahoo.com\",\n            \"nid\": \"3128702300\",\n            \"phone\": \"+8801859654199\",\n            \"bio\": \"Aspicio compono alo qui non animadverto.\",\n            \"portfolio\": \"https://example.com/MgqcE\",\n            \"age\": 36,\n            \"isActive\": true,\n            \"createdAt\": \"2024-08-22T16:07:48.867Z\",\n            \"updatedAt\": \"2024-08-21T12:21:41.959Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f1\",\n            \"name\": \"Vivo sortitus pr\",\n            \"avatarUrl\": \"Averto dolor\",\n            \"email\": \"tillman10@gmail.com\",\n            \"nid\": \"5079988777\",\n            \"phone\": \"8801516030568\",\n            \"bio\": \"Beneficium artificiose circumvenio apud ademptio.\",\n            \"portfolio\": \"https://example.com/sMhEe\",\n            \"age\": 101,\n            \"isActive\": true,\n            \"createdAt\": \"2025-01-29T12:33:32.538Z\",\n            \"updatedAt\": \"2024-04-03T09:20:45.518Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f2\",\n            \"name\": \"Umerus tener nam\",\n            \"avatarUrl\": \"Neque sophismata ex\",\n            \"email\": \"jarret_dach48@yahoo.com\",\n            \"nid\": \"0270582586\",\n            \"phone\": \"+8801920285783\",\n            \"bio\": \"Defaeco absum aestas tunc chirographum auctus.\",\n            \"portfolio\": \"https://example.com/BQfI2\",\n            \"age\": 87,\n            \"isActive\": true,\n            \"createdAt\": \"2024-08-29T15:04:02.983Z\",\n            \"updatedAt\": \"2024-07-05T22:01:37.027Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f3\",\n            \"name\": \"Tui clarus porro\",\n            \"avatarUrl\": \"Tribuo fuga sollers\",\n            \"email\": \"brandi_lockman@hotmail.com\",\n            \"nid\": \"4823128419\",\n            \"phone\": \"+01985496511\",\n            \"bio\": \"Cupio debitis depereo cibo sonitus.\",\n            \"portfolio\": \"https://example.com/edqr2\",\n            \"age\": 82,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-26T05:20:28.040Z\",\n            \"updatedAt\": \"2024-03-14T14:27:37.180Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f4\",\n            \"name\": \"Aliquam ustilo c\",\n            \"avatarUrl\": \"Conscendo\",\n            \"email\": \"fatima.runolfsson@gmail.com\",\n            \"nid\": \"1674663504\",\n            \"phone\": \"8801663526141\",\n            \"bio\": \"Deprecator aliquid spiritus suscipit alioqui angulus tamen.\",\n            \"portfolio\": \"https://example.com/HC0sA\",\n            \"age\": 23,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-10T02:04:24.815Z\",\n            \"updatedAt\": \"2024-11-06T09:10:47.112Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f5\",\n            \"name\": \"Ab pectus conspe\",\n            \"avatarUrl\": \"Nihil auxilium\",\n            \"email\": \"aditya.goyette68@hotmail.com\",\n            \"nid\": \"6574413698\",\n            \"phone\": \"+01695828022\",\n            \"bio\": \"Facilis avaritia desino ut aestivus ciminatio defungo corrumpo coaegresco.\",\n            \"portfolio\": \"https://example.com/xhQmw\",\n            \"age\": 90,\n            \"isActive\": true,\n            \"createdAt\": \"2024-04-15T06:50:43.951Z\",\n            \"updatedAt\": \"2024-06-02T04:28:32.396Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f6\",\n            \"name\": \"Confero pecus an\",\n            \"avatarUrl\": \"Totus ulciscor\",\n            \"email\": \"adolph.kunde71@yahoo.com\",\n            \"nid\": \"6164094261\",\n            \"phone\": \"01929911501\",\n            \"bio\": \"Alter turbo cernuus.\",\n            \"portfolio\": \"https://example.com/z3GiJ\",\n            \"age\": 96,\n            \"isActive\": true,\n            \"createdAt\": \"2024-11-04T09:16:20.749Z\",\n            \"updatedAt\": \"2024-07-11T04:28:53.890Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f7\",\n            \"name\": \"Demitto vos alia\",\n            \"avatarUrl\": \"Desolo deputo\",\n            \"email\": \"marian99@hotmail.com\",\n            \"nid\": \"0504320085\",\n            \"phone\": \"01482042777\",\n            \"bio\": \"Fugiat alioqui quam altus architecto colo colo sufficio.\",\n            \"portfolio\": \"https://example.com/voH76\",\n            \"age\": 42,\n            \"isActive\": false,\n            \"createdAt\": \"2024-09-25T13:06:11.678Z\",\n            \"updatedAt\": \"2024-07-12T10:52:55.251Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f8\",\n            \"name\": \"Eaque aeternus e\",\n            \"avatarUrl\": \"Corrigo esse\",\n            \"email\": \"myriam8@hotmail.com\",\n            \"nid\": \"4170951397\",\n            \"phone\": \"+8801904475854\",\n            \"bio\": \"Benigne annus carus depereo demum sapiente.\",\n            \"portfolio\": \"https://example.com/hDLti\",\n            \"age\": 105,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-23T21:56:35.849Z\",\n            \"updatedAt\": \"2025-02-02T20:51:24.590Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f9\",\n            \"name\": \"Vinco vinco repu\",\n            \"avatarUrl\": \"Ulciscor damnatio\",\n            \"email\": \"lafayette5@gmail.com\",\n            \"nid\": \"7719992680\",\n            \"phone\": \"+8801322240239\",\n            \"bio\": \"Trepide censura quo.\",\n            \"portfolio\": \"https://example.com/RShxt\",\n            \"age\": 83,\n            \"isActive\": false,\n            \"createdAt\": \"2024-07-14T11:49:10.367Z\",\n            \"updatedAt\": \"2024-08-13T00:39:42.739Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fa\",\n            \"name\": \"Templum decet te\",\n            \"avatarUrl\": \"Curatio video cito\",\n            \"email\": \"hailie.senger16@gmail.com\",\n            \"nid\": \"9084989709\",\n            \"phone\": \"8801920949522\",\n            \"bio\": \"Tener bibo cribro censura vesper.\",\n            \"portfolio\": \"https://example.com/gG5yi\",\n            \"age\": 96,\n            \"isActive\": true,\n            \"createdAt\": \"2024-05-25T03:14:12.070Z\",\n            \"updatedAt\": \"2024-07-06T08:10:30.950Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fb\",\n            \"name\": \"Debitis tersus a\",\n            \"avatarUrl\": \"Cetera adsidue via.\",\n            \"email\": \"beryl98@gmail.com\",\n            \"nid\": \"6858515636\",\n            \"phone\": \"01802038028\",\n            \"bio\": \"Terror vito currus creta nesciunt turbo.\",\n            \"portfolio\": \"https://example.com/t61cs\",\n            \"age\": 64,\n            \"isActive\": true,\n            \"createdAt\": \"2024-06-01T06:02:23.836Z\",\n            \"updatedAt\": \"2024-02-13T04:17:15.846Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fc\",\n            \"name\": \"Nemo tandem carp\",\n            \"avatarUrl\": \"Delinquo bene\",\n            \"email\": \"gerry_pfeffer6@yahoo.com\",\n            \"nid\": \"9225230893\",\n            \"phone\": \"8801403120329\",\n            \"bio\": \"Umbra spiculum validus thesis optio sono decipio.\",\n            \"portfolio\": \"https://example.com/s4vWD\",\n            \"age\": 39,\n            \"isActive\": false,\n            \"createdAt\": \"2024-02-19T03:36:12.755Z\",\n            \"updatedAt\": \"2024-04-02T17:25:44.501Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fd\",\n            \"name\": \"Reprehenderit ce\",\n            \"avatarUrl\": \"Caecus nesciunt\",\n            \"email\": \"ruthe.maggio25@gmail.com\",\n            \"nid\": \"4087375185\",\n            \"phone\": \"+01751730054\",\n            \"bio\": \"Pauci rerum coruscus accusamus uterque.\",\n            \"portfolio\": \"https://example.com/gPdM0\",\n            \"age\": 68,\n            \"isActive\": false,\n            \"createdAt\": \"2024-02-24T06:24:38.257Z\",\n            \"updatedAt\": \"2024-03-27T04:00:29.208Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fe\",\n            \"name\": \"Corporis comis v\",\n            \"avatarUrl\": \"Dolores coepi adamo.\",\n            \"email\": \"camren79@yahoo.com\",\n            \"nid\": \"0047494867\",\n            \"phone\": \"+01765802496\",\n            \"bio\": \"Accusator quod veritatis colo.\",\n            \"portfolio\": \"https://example.com/bv2oA\",\n            \"age\": 28,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-07T02:14:40.539Z\",\n            \"updatedAt\": \"2024-12-07T21:13:24.086Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ff\",\n            \"name\": \"Appositus tenus \",\n            \"avatarUrl\": \"Ascit ater\",\n            \"email\": \"annabel_purdy@yahoo.com\",\n            \"nid\": \"0639936859\",\n            \"phone\": \"8801808175718\",\n            \"bio\": \"Capio curtus bis damnatio voluntarius arceo caute totus suscipit.\",\n            \"portfolio\": \"https://example.com/oPciC\",\n            \"age\": 107,\n            \"isActive\": true,\n            \"createdAt\": \"2024-07-17T09:01:44.244Z\",\n            \"updatedAt\": \"2024-04-16T19:42:42.813Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a00\",\n            \"name\": \"Nam statua appel\",\n            \"avatarUrl\": \"Demonstro adipiscor\",\n            \"email\": \"brody26@hotmail.com\",\n            \"nid\": \"4963682076\",\n            \"phone\": \"+01370023155\",\n            \"bio\": \"Tenus cibus eum verbum tantillus adnuo cura tutamen debilito.\",\n            \"portfolio\": \"https://example.com/ngvnY\",\n            \"age\": 80,\n            \"isActive\": false,\n            \"createdAt\": \"2024-08-12T05:13:18.054Z\",\n            \"updatedAt\": \"2024-04-23T15:29:23.435Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a01\",\n            \"name\": \"Iusto magnam cur\",\n            \"avatarUrl\": \"Perspiciatis\",\n            \"email\": \"guido72@yahoo.com\",\n            \"nid\": \"8411411792\",\n            \"phone\": \"8801315883112\",\n            \"bio\": \"Tabula appello blandior tepesco cras depromo.\",\n            \"portfolio\": \"https://example.com/gGGN6\",\n            \"age\": 77,\n            \"isActive\": false,\n            \"createdAt\": \"2024-04-10T19:54:01.148Z\",\n            \"updatedAt\": \"2024-04-25T13:26:58.518Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a02\",\n            \"name\": \"Dicta spes suppo\",\n            \"avatarUrl\": \"Subnecto tyrannus\",\n            \"email\": \"cristina13@yahoo.com\",\n            \"nid\": \"4450546006\",\n            \"phone\": \"+01807783221\",\n            \"bio\": \"Articulus amicitia sed antiquus utrum censura cur vere quisquam.\",\n            \"portfolio\": \"https://example.com/oGIzl\",\n            \"age\": 51,\n            \"isActive\": true,\n            \"createdAt\": \"2024-10-30T09:48:57.350Z\",\n            \"updatedAt\": \"2025-01-31T13:24:53.990Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a03\",\n            \"name\": \"Volaticus creber\",\n            \"avatarUrl\": \"Utrimque velociter\",\n            \"email\": \"perry.heidenreich-abshire@gmail.com\",\n            \"nid\": \"8571318683\",\n            \"phone\": \"+01844628900\",\n            \"bio\": \"Sui bibo cornu deinde tot certe.\",\n            \"portfolio\": \"https://example.com/y0kPU\",\n            \"age\": 115,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-01T06:36:28.134Z\",\n            \"updatedAt\": \"2024-04-30T12:14:13.586Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a04\",\n            \"name\": \"Caries adsuesco \",\n            \"avatarUrl\": \"Universe numquam\",\n            \"email\": \"claudie53@gmail.com\",\n            \"nid\": \"0490873132\",\n            \"phone\": \"01828531262\",\n            \"bio\": \"Desino ventosus ter.\",\n            \"portfolio\": \"https://example.com/7OiKm\",\n            \"age\": 117,\n            \"isActive\": true,\n            \"createdAt\": \"2024-05-28T12:01:56.389Z\",\n            \"updatedAt\": \"2024-03-31T11:27:28.094Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a05\",\n            \"name\": \"Sumo toties perf\",\n            \"avatarUrl\": \"Vomica tergo\",\n            \"email\": \"marley93@yahoo.com\",\n            \"nid\": \"7545461286\",\n            \"phone\": \"+01401478565\",\n            \"bio\": \"Confugo sum eligendi utrum.\",\n            \"portfolio\": \"https://example.com/hW8CB\",\n            \"age\": 72,\n            \"isActive\": false,\n            \"createdAt\": \"2024-04-13T04:52:40.603Z\",\n            \"updatedAt\": \"2024-10-29T01:56:18.368Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a06\",\n            \"name\": \"Defungo accommod\",\n            \"avatarUrl\": \"Degusto quod uredo\",\n            \"email\": \"darion33@gmail.com\",\n            \"nid\": \"6290918144\",\n            \"phone\": \"01958837049\",\n            \"bio\": \"Vos tandem aegrus.\",\n            \"portfolio\": \"https://example.com/EblFe\",\n            \"age\": 30,\n            \"isActive\": true,\n            \"createdAt\": \"2024-05-19T12:41:20.756Z\",\n            \"updatedAt\": \"2024-05-22T06:16:08.834Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a07\",\n            \"name\": \"Audio sonitus co\",\n            \"avatarUrl\": \"Demum tui ager\",\n            \"email\": \"zelma80@yahoo.com\",\n            \"nid\": \"3827989719\",\n            \"phone\": \"01588428062\",\n            \"bio\": \"Veniam sophismata combibo conatus atqui suasoria amplitudo commodi denego vivo.\",\n            \"portfolio\": \"https://example.com/GzuG9\",\n            \"age\": 56,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-21T08:58:42.212Z\",\n            \"updatedAt\": \"2024-07-26T08:43:38.586Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a08\",\n            \"name\": \"Creta advenio al\",\n            \"avatarUrl\": \"Tamdiu una\",\n            \"email\": \"savanna49@hotmail.com\",\n            \"nid\": \"8493653373\",\n            \"phone\": \"+01859947328\",\n            \"bio\": \"Territo delicate torqueo dolorem carmen.\",\n            \"portfolio\": \"https://example.com/DIUcF\",\n            \"age\": 120,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-18T07:43:18.833Z\",\n            \"updatedAt\": \"2025-01-27T21:41:42.483Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a09\",\n            \"name\": \"Pecus thymum tho\",\n            \"avatarUrl\": \"Fugit repellendus\",\n            \"email\": \"amy_conroy@gmail.com\",\n            \"nid\": \"8978868946\",\n            \"phone\": \"01397088338\",\n            \"bio\": \"Clementia depulso cupiditas mollitia velut celebrer uberrime clamo.\",\n            \"portfolio\": \"https://example.com/yEbDN\",\n            \"age\": 26,\n            \"isActive\": false,\n            \"createdAt\": \"2024-07-16T14:56:14.760Z\",\n            \"updatedAt\": \"2024-07-10T23:25:16.425Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0a\",\n            \"name\": \"Umerus vorax cal\",\n            \"avatarUrl\": \"Vomito benigne\",\n            \"email\": \"bernie.bruen-ondricka59@gmail.com\",\n            \"nid\": \"6808190207\",\n            \"phone\": \"+01422881828\",\n            \"bio\": \"Beatus verto sed voco carcer cursus.\",\n            \"portfolio\": \"https://example.com/ksRoy\",\n            \"age\": 72,\n            \"isActive\": true,\n            \"createdAt\": \"2024-02-16T11:24:14.198Z\",\n            \"updatedAt\": \"2024-09-02T13:25:53.319Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0b\",\n            \"name\": \"Advoco subnecto \",\n            \"avatarUrl\": \"Abundans damno\",\n            \"email\": \"orin.mayert@hotmail.com\",\n            \"nid\": \"3588566313\",\n            \"phone\": \"+01331438527\",\n            \"bio\": \"Credo est textus adsuesco capillus talus decumbo est vix thorax.\",\n            \"portfolio\": \"https://example.com/POvh2\",\n            \"age\": 55,\n            \"isActive\": true,\n            \"createdAt\": \"2024-06-11T10:21:41.988Z\",\n            \"updatedAt\": \"2024-07-30T16:22:51.938Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0c\",\n            \"name\": \"Assentator solli\",\n            \"avatarUrl\": \"Tepidus amo\",\n            \"email\": \"isaias_waelchi70@hotmail.com\",\n            \"nid\": \"3443123639\",\n            \"phone\": \"+8801895785858\",\n            \"bio\": \"Qui utilis conculco audax antea.\",\n            \"portfolio\": \"https://example.com/WTPlD\",\n            \"age\": 21,\n            \"isActive\": true,\n            \"createdAt\": \"2025-01-22T17:52:08.377Z\",\n            \"updatedAt\": \"2024-12-05T03:35:44.855Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0d\",\n            \"name\": \"Turpis pauper as\",\n            \"avatarUrl\": \"Nostrum et desidero\",\n            \"email\": \"marley_smitham23@yahoo.com\",\n            \"nid\": \"3655890641\",\n            \"phone\": \"01795231643\",\n            \"bio\": \"Truculenter vulgivagus vallum crinis eligendi.\",\n            \"portfolio\": \"https://example.com/jrcM7\",\n            \"age\": 45,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-17T22:37:05.681Z\",\n            \"updatedAt\": \"2024-06-28T12:53:59.732Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0e\",\n            \"name\": \"Quaerat bellicus\",\n            \"avatarUrl\": \"Aiunt antea\",\n            \"email\": \"cedrick_kuvalis@gmail.com\",\n            \"nid\": \"0031691223\",\n            \"phone\": \"01999840662\",\n            \"bio\": \"Adfectus contigo comparo custodia creator animus voco.\",\n            \"portfolio\": \"https://example.com/LccHZ\",\n            \"age\": 68,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-19T19:04:42.112Z\",\n            \"updatedAt\": \"2024-08-03T10:10:17.860Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0f\",\n            \"name\": \"Surculus magni p\",\n            \"avatarUrl\": \"Derelinquo capto\",\n            \"email\": \"edmund_vonrueden@hotmail.com\",\n            \"nid\": \"0010936746\",\n            \"phone\": \"01434535142\",\n            \"bio\": \"Creta assentator acceptus laborum varius cur decens.\",\n            \"portfolio\": \"https://example.com/ZjuSb\",\n            \"age\": 28,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-10T13:13:04.660Z\",\n            \"updatedAt\": \"2024-07-04T22:26:38.177Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a10\",\n            \"name\": \"Viscus aspicio t\",\n            \"avatarUrl\": \"Blandior corrupti\",\n            \"email\": \"buddy85@hotmail.com\",\n            \"nid\": \"0338402204\",\n            \"phone\": \"+01725589888\",\n            \"bio\": \"Credo decretum conspergo quasi.\",\n            \"portfolio\": \"https://example.com/qmszV\",\n            \"age\": 84,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-08T05:46:06.913Z\",\n            \"updatedAt\": \"2025-02-10T05:02:15.968Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a11\",\n            \"name\": \"Strenuus vigor v\",\n            \"avatarUrl\": \"Cena tricesimus qui\",\n            \"email\": \"raegan58@gmail.com\",\n            \"nid\": \"9826221883\",\n            \"phone\": \"+01837549031\",\n            \"bio\": \"Acsi coerceo sequi arcesso.\",\n            \"portfolio\": \"https://example.com/V8uBn\",\n            \"age\": 21,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-12T12:28:07.953Z\",\n            \"updatedAt\": \"2024-09-27T08:11:52.379Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a12\",\n            \"name\": \"Turpis corrigo v\",\n            \"avatarUrl\": \"Voluptatem urbanus\",\n            \"email\": \"hazle_bins@yahoo.com\",\n            \"nid\": \"8801535029\",\n            \"phone\": \"+8801809545006\",\n            \"bio\": \"Uredo territo civis carus uterque vir.\",\n            \"portfolio\": \"https://example.com/busP9\",\n            \"age\": 40,\n            \"isActive\": false,\n            \"createdAt\": \"2024-10-26T20:51:08.661Z\",\n            \"updatedAt\": \"2024-03-16T01:49:27.253Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a13\",\n            \"name\": \"Aqua correptius \",\n            \"avatarUrl\": \"Vigilo vix apto\",\n            \"email\": \"eloy_jaskolski@gmail.com\",\n            \"nid\": \"8118323352\",\n            \"phone\": \"8801549362998\",\n            \"bio\": \"Xiphias tibi audeo vesper vicinus laudantium.\",\n            \"portfolio\": \"https://example.com/7ZKUh\",\n            \"age\": 84,\n            \"isActive\": false,\n            \"createdAt\": \"2024-07-07T17:39:32.304Z\",\n            \"updatedAt\": \"2024-03-18T19:14:27.206Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a14\",\n            \"name\": \"Centum altus app\",\n            \"avatarUrl\": \"Templum comburo\",\n            \"email\": \"irma.hermiston-ruecker@hotmail.com\",\n            \"nid\": \"4670756720\",\n            \"phone\": \"8801678481273\",\n            \"bio\": \"Terga cum claudeo cunabula cursus appono dicta quaerat astrum spes.\",\n            \"portfolio\": \"https://example.com/f7V5U\",\n            \"age\": 67,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-02T10:53:14.541Z\",\n            \"updatedAt\": \"2024-10-08T23:47:51.198Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a15\",\n            \"name\": \"Carmen vis confo\",\n            \"avatarUrl\": \"Auctor surculus\",\n            \"email\": \"annamae_gerhold58@yahoo.com\",\n            \"nid\": \"0284379838\",\n            \"phone\": \"+01724602837\",\n            \"bio\": \"Contego traho verus appello animus acidus.\",\n            \"portfolio\": \"https://example.com/HoWCH\",\n            \"age\": 108,\n            \"isActive\": false,\n            \"createdAt\": \"2024-03-07T00:11:32.612Z\",\n            \"updatedAt\": \"2024-09-01T19:50:46.405Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a16\",\n            \"name\": \"Crustulum vapulu\",\n            \"avatarUrl\": \"Rerum causa benigne\",\n            \"email\": \"anita3@gmail.com\",\n            \"nid\": \"9181455743\",\n            \"phone\": \"+01889490291\",\n            \"bio\": \"Curatio tot cura deinde tutis sonitus subiungo summa.\",\n            \"portfolio\": \"https://example.com/rXDeS\",\n            \"age\": 35,\n            \"isActive\": true,\n            \"createdAt\": \"2024-11-10T08:36:06.892Z\",\n            \"updatedAt\": \"2024-09-19T05:59:51.245Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a17\",\n            \"name\": \"Urbs clibanus vu\",\n            \"avatarUrl\": \"Vobis adulescens\",\n            \"email\": \"victoria_ledner56@gmail.com\",\n            \"nid\": \"2674253851\",\n            \"phone\": \"8801904963730\",\n            \"bio\": \"Umerus cursim cenaculum surculus cultura blanditiis.\",\n            \"portfolio\": \"https://example.com/qkLDD\",\n            \"age\": 80,\n            \"isActive\": false,\n            \"createdAt\": \"2024-06-23T17:30:33.320Z\",\n            \"updatedAt\": \"2024-08-23T02:48:38.898Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a18\",\n            \"name\": \"Tergeo unde amit\",\n            \"avatarUrl\": \"Cras occaecati iste\",\n            \"email\": \"rashawn92@gmail.com\",\n            \"nid\": \"5723803331\",\n            \"phone\": \"01965293619\",\n            \"bio\": \"Dedecor utroque creber aliquid trans.\",\n            \"portfolio\": \"https://example.com/HObzu\",\n            \"age\": 56,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-26T02:30:23.658Z\",\n            \"updatedAt\": \"2025-02-04T22:35:51.647Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a19\",\n            \"name\": \"Commemoro suasor\",\n            \"avatarUrl\": \"Coruscus curto\",\n            \"email\": \"lue.walsh25@yahoo.com\",\n            \"nid\": \"2005062830\",\n            \"phone\": \"+8801384918375\",\n            \"bio\": \"Toties adiuvo patior sulum asporto terminatio vetus viduo exercitationem.\",\n            \"portfolio\": \"https://example.com/Pijph\",\n            \"age\": 22,\n            \"isActive\": true,\n            \"createdAt\": \"2024-10-04T17:58:18.346Z\",\n            \"updatedAt\": \"2024-03-06T18:35:28.441Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1a\",\n            \"name\": \"Conitor caritas \",\n            \"avatarUrl\": \"Cenaculum uredo\",\n            \"email\": \"sage_stark37@gmail.com\",\n            \"nid\": \"8135499898\",\n            \"phone\": \"8801617432400\",\n            \"bio\": \"Vulnus vel rem.\",\n            \"portfolio\": \"https://example.com/kVf8N\",\n            \"age\": 18,\n            \"isActive\": true,\n            \"createdAt\": \"2024-06-07T04:45:25.849Z\",\n            \"updatedAt\": \"2024-06-21T13:39:45.183Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1b\",\n            \"name\": \"Curatio tenax va\",\n            \"avatarUrl\": \"Fuga quod cetera\",\n            \"email\": \"alfonzo7@hotmail.com\",\n            \"nid\": \"8258919865\",\n            \"phone\": \"+01526774098\",\n            \"bio\": \"Cimentarius ascit defetiscor spargo.\",\n            \"portfolio\": \"https://example.com/OSGJX\",\n            \"age\": 79,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-05T22:44:18.577Z\",\n            \"updatedAt\": \"2024-05-08T13:12:31.676Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1c\",\n            \"name\": \"Curriculum compo\",\n            \"avatarUrl\": \"Quos pax verbera\",\n            \"email\": \"raphaelle.crist77@gmail.com\",\n            \"nid\": \"7972140208\",\n            \"phone\": \"+8801504720084\",\n            \"bio\": \"Volutabrum vicissitudo vulgivagus votum terga.\",\n            \"portfolio\": \"https://example.com/ecR8s\",\n            \"age\": 117,\n            \"isActive\": true,\n            \"createdAt\": \"2024-07-15T09:32:38.365Z\",\n            \"updatedAt\": \"2024-02-18T01:15:28.834Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1d\",\n            \"name\": \"Claudeo accusant\",\n            \"avatarUrl\": \"Tolero velociter\",\n            \"email\": \"amely55@yahoo.com\",\n            \"nid\": \"0215393649\",\n            \"phone\": \"+8801861044705\",\n            \"bio\": \"Depono veritas solitudo comes coniecto velut admitto sonitus.\",\n            \"portfolio\": \"https://example.com/nHrXn\",\n            \"age\": 81,\n            \"isActive\": true,\n            \"createdAt\": \"2024-04-10T07:04:37.760Z\",\n            \"updatedAt\": \"2025-02-07T06:30:56.425Z\"\n        }\n    ],\n    \"errors\": {}\n}"
                    },
                    {
                      "id": "9ecf9e9f-8d13-4a0e-b8a2-0baa182839d0",
                      "name": "BAD_REQUEST 400",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{SERVER_URL}}/api/users/create/dummy?counts={{count}}",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "users", "create", "dummy"],
                          "query": [
                            {
                              "key": "counts",
                              "value": "{{count}}"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "e9b4dce5-e170-43ef-a3ca-48f2eccaae50"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "c1ef30ea-638f-42de-9918-552da256fa50"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "8f7a0925-4ad7-4532-ba76-1cba2c553dfc"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "5294d4dc-b791-4d0d-a6a0-cb409a95fd1d"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "9d021498-a49b-4725-8530-2e534a8cc649"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "1eb3984f-6558-4bc0-a7d6-799c621e3323"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "e6be10b7-d7d4-4002-bc26-8a8bbad08094"
                        },
                        {
                          "key": "X-DNS-Prefetch-Control",
                          "value": "off",
                          "uuid": "158da444-a4f1-43cf-b7a9-464d5896dbb1"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "4cbb2f1e-820c-4660-826c-5a0df52c7c94"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "fc814b3b-4389-4a12-9eff-60dae1174a3b"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "a78fed84-c870-49c2-bfa0-d867c66c7101"
                        },
                        {
                          "key": "X-XSS-Protection",
                          "value": "0",
                          "uuid": "c8e624da-c3c2-4bec-baed-de9c697d9532"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin, Accept-Encoding",
                          "uuid": "42d902f8-6f25-4985-89e4-50f2fe338ab8"
                        },
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "edde5564-6a68-488f-8c61-933f136c012e"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "a2df6049-4409-4123-a4d7-95848c7c88b5"
                        },
                        {
                          "key": "Content-Length",
                          "value": "142",
                          "uuid": "f0811bb9-4d4f-4118-934e-9671e51584b0"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "uuid": "c9f70ef5-ca3c-4e32-9345-11c9fbd9acc1"
                        },
                        {
                          "key": "Date",
                          "value": "Tue, 11 Feb 2025 10:37:05 GMT",
                          "uuid": "6328d480-9bd3-4c85-aedb-f6d298d745ea"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "uuid": "a65554de-678f-4046-8667-f163e7081f48"
                        },
                        {
                          "key": "Keep-Alive",
                          "value": "timeout=5",
                          "uuid": "e7c8f00e-3fdd-4041-96ad-9b13ec39c52e"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"meta\": {\n        \"route\": \"/create/dummy?counts=34\"\n    },\n    \"status\": {\n        \"message\": \"Bad Request: The \\\"count\\\" parameter is required to create dummy data.\"\n    },\n    \"data\": {},\n    \"errors\": {}\n}"
                    }
                  ]
                },
                {
                  "name": "POST /api/users/create-dummy?count={{count}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "7ce03b57-74ad-40cb-a25d-228ae518c237",
                        "exec": [
                          "pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "2e900bd5-8059-4541-89fd-287460990165",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
                          "",
                          "// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
                          "",
                          "// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    if (pm.response.code === 201) {",
                          "        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
                          "",
                          "        responseData.data.forEach(function (user) {",
                          "            pm.expect(user).to.be.an('object');",
                          "            pm.expect(user._id).to.be.a('string');",
                          "            pm.expect(user.name).to.be.a('string');",
                          "            pm.expect(user.avatarUrl).to.be.a('string');",
                          "            pm.expect(user.email).to.be.a('string');",
                          "            pm.expect(user.nid).to.be.a('string');",
                          "            pm.expect(user.phone).to.be.a('string');",
                          "            pm.expect(user.bio).to.be.a('string');",
                          "            pm.expect(user.portfolio).to.be.a('string');",
                          "            pm.expect(user.age).to.be.a('number');",
                          "            pm.expect(user.isActive).to.be.a('boolean');",
                          "            pm.expect(user.createdAt).to.be.a('string');",
                          "            pm.expect(user.updatedAt).to.be.a('string');",
                          "        });",
                          "",
                          "        // You can add more specific value checks here if needed, for example:",
                          "        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
                          "",
                          "    } else if (pm.response.code === 409) {",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.meta).to.have.property('route', '/');",
                          "        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
                          "        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
                          "        pm.expect(responseBody.errors).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "1e625561-a693-42f9-9443-3a867cdb5dd1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/create-dummy?count={{count}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "create-dummy"],
                      "query": [
                        {
                          "key": "count",
                          "value": "{{count}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "POST /api/users/create-dummy-data?count={{count}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "08d2a4dc-6e8e-4cd3-837e-4f253153f1b4",
                        "exec": [
                          "pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "e23d5117-768d-463f-8bd5-c3fa45a1af81",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
                          "",
                          "// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
                          "",
                          "// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    if (pm.response.code === 201) {",
                          "        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
                          "",
                          "        responseData.data.forEach(function (user) {",
                          "            pm.expect(user).to.be.an('object');",
                          "            pm.expect(user._id).to.be.a('string');",
                          "            pm.expect(user.name).to.be.a('string');",
                          "            pm.expect(user.avatarUrl).to.be.a('string');",
                          "            pm.expect(user.email).to.be.a('string');",
                          "            pm.expect(user.nid).to.be.a('string');",
                          "            pm.expect(user.phone).to.be.a('string');",
                          "            pm.expect(user.bio).to.be.a('string');",
                          "            pm.expect(user.portfolio).to.be.a('string');",
                          "            pm.expect(user.age).to.be.a('number');",
                          "            pm.expect(user.isActive).to.be.a('boolean');",
                          "            pm.expect(user.createdAt).to.be.a('string');",
                          "            pm.expect(user.updatedAt).to.be.a('string');",
                          "        });",
                          "",
                          "        // You can add more specific value checks here if needed, for example:",
                          "        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
                          "",
                          "    } else if (pm.response.code === 409) {",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.meta).to.have.property('route', '/');",
                          "        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
                          "        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
                          "        pm.expect(responseBody.errors).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "f471f6c4-988d-49d3-b49f-8e792c820c7a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/create-dummy-data?count={{count}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "create-dummy-data"],
                      "query": [
                        {
                          "key": "count",
                          "value": "{{count}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "POST /api/users/create-fake?count={{count}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "c7b0b046-28c8-40e5-8fb9-23a5613e3e72",
                        "exec": [
                          "pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "a3efe77a-2783-4014-afde-95e07e28da7e",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
                          "",
                          "// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
                          "",
                          "// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    if (pm.response.code === 201) {",
                          "        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
                          "",
                          "        responseData.data.forEach(function (user) {",
                          "            pm.expect(user).to.be.an('object');",
                          "            pm.expect(user._id).to.be.a('string');",
                          "            pm.expect(user.name).to.be.a('string');",
                          "            pm.expect(user.avatarUrl).to.be.a('string');",
                          "            pm.expect(user.email).to.be.a('string');",
                          "            pm.expect(user.nid).to.be.a('string');",
                          "            pm.expect(user.phone).to.be.a('string');",
                          "            pm.expect(user.bio).to.be.a('string');",
                          "            pm.expect(user.portfolio).to.be.a('string');",
                          "            pm.expect(user.age).to.be.a('number');",
                          "            pm.expect(user.isActive).to.be.a('boolean');",
                          "            pm.expect(user.createdAt).to.be.a('string');",
                          "            pm.expect(user.updatedAt).to.be.a('string');",
                          "        });",
                          "",
                          "        // You can add more specific value checks here if needed, for example:",
                          "        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
                          "",
                          "    } else if (pm.response.code === 409) {",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.meta).to.have.property('route', '/');",
                          "        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
                          "        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
                          "        pm.expect(responseBody.errors).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "abc87251-2b73-4f79-a925-07cfc67560ea",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/create-fake?count={{count}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "create-fake"],
                      "query": [
                        {
                          "key": "count",
                          "value": "{{count}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "POST /api/users/create-fake-data?count={{count}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "a10241ce-1c42-4315-8a92-40f892978026",
                        "exec": [
                          "pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "335a57db-7e0a-407e-a6d7-96eb3132c206",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
                          "",
                          "// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
                          "",
                          "// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    if (pm.response.code === 201) {",
                          "        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
                          "",
                          "        responseData.data.forEach(function (user) {",
                          "            pm.expect(user).to.be.an('object');",
                          "            pm.expect(user._id).to.be.a('string');",
                          "            pm.expect(user.name).to.be.a('string');",
                          "            pm.expect(user.avatarUrl).to.be.a('string');",
                          "            pm.expect(user.email).to.be.a('string');",
                          "            pm.expect(user.nid).to.be.a('string');",
                          "            pm.expect(user.phone).to.be.a('string');",
                          "            pm.expect(user.bio).to.be.a('string');",
                          "            pm.expect(user.portfolio).to.be.a('string');",
                          "            pm.expect(user.age).to.be.a('number');",
                          "            pm.expect(user.isActive).to.be.a('boolean');",
                          "            pm.expect(user.createdAt).to.be.a('string');",
                          "            pm.expect(user.updatedAt).to.be.a('string');",
                          "        });",
                          "",
                          "        // You can add more specific value checks here if needed, for example:",
                          "        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
                          "",
                          "    } else if (pm.response.code === 409) {",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.meta).to.have.property('route', '/');",
                          "        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
                          "        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
                          "        pm.expect(responseBody.errors).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "25bf3724-9dd2-466d-a871-9686b86b95a5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/create-fake-data?count={{count}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "create-fake-data"],
                      "query": [
                        {
                          "key": "count",
                          "value": "{{count}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "POST /api/users/create-sample?count={{count}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "0bfb0844-d7af-4833-9438-4383b07d971e",
                        "exec": [
                          "pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "bf25debd-c562-4ec0-94c6-b86489f52907",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
                          "",
                          "// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
                          "",
                          "// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    if (pm.response.code === 201) {",
                          "        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
                          "",
                          "        responseData.data.forEach(function (user) {",
                          "            pm.expect(user).to.be.an('object');",
                          "            pm.expect(user._id).to.be.a('string');",
                          "            pm.expect(user.name).to.be.a('string');",
                          "            pm.expect(user.avatarUrl).to.be.a('string');",
                          "            pm.expect(user.email).to.be.a('string');",
                          "            pm.expect(user.nid).to.be.a('string');",
                          "            pm.expect(user.phone).to.be.a('string');",
                          "            pm.expect(user.bio).to.be.a('string');",
                          "            pm.expect(user.portfolio).to.be.a('string');",
                          "            pm.expect(user.age).to.be.a('number');",
                          "            pm.expect(user.isActive).to.be.a('boolean');",
                          "            pm.expect(user.createdAt).to.be.a('string');",
                          "            pm.expect(user.updatedAt).to.be.a('string');",
                          "        });",
                          "",
                          "        // You can add more specific value checks here if needed, for example:",
                          "        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
                          "",
                          "    } else if (pm.response.code === 409) {",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.meta).to.have.property('route', '/');",
                          "        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
                          "        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
                          "        pm.expect(responseBody.errors).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "bd197fe7-4c4e-4ac7-87d1-80ac7b823783",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/create-sample?count={{count}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "create-sample"],
                      "query": [
                        {
                          "key": "count",
                          "value": "{{count}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "POST /api/users/create-sample-data?count={{count}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eeaa8c2f-000d-47e1-9d55-10f91d29c0c8",
                        "exec": [
                          "pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "0dcec601-bd65-4229-b424-aec6f23b14fd",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
                          "",
                          "// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
                          "",
                          "// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    if (pm.response.code === 201) {",
                          "        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
                          "",
                          "        responseData.data.forEach(function (user) {",
                          "            pm.expect(user).to.be.an('object');",
                          "            pm.expect(user._id).to.be.a('string');",
                          "            pm.expect(user.name).to.be.a('string');",
                          "            pm.expect(user.avatarUrl).to.be.a('string');",
                          "            pm.expect(user.email).to.be.a('string');",
                          "            pm.expect(user.nid).to.be.a('string');",
                          "            pm.expect(user.phone).to.be.a('string');",
                          "            pm.expect(user.bio).to.be.a('string');",
                          "            pm.expect(user.portfolio).to.be.a('string');",
                          "            pm.expect(user.age).to.be.a('number');",
                          "            pm.expect(user.isActive).to.be.a('boolean');",
                          "            pm.expect(user.createdAt).to.be.a('string');",
                          "            pm.expect(user.updatedAt).to.be.a('string');",
                          "        });",
                          "",
                          "        // You can add more specific value checks here if needed, for example:",
                          "        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
                          "",
                          "    } else if (pm.response.code === 409) {",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.meta).to.have.property('route', '/');",
                          "        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
                          "        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
                          "        pm.expect(responseBody.errors).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "b7b5067c-012f-4988-a3af-8c11ab84b7f9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/create-sample-data?count={{count}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "create-sample-data"],
                      "query": [
                        {
                          "key": "count",
                          "value": "{{count}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "POST /api/users/generate-sample?count={{count}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "69bc5e11-ef35-49bc-a3a2-35e19eaa4570",
                        "exec": [
                          "pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "6d74e923-8157-483f-9ef0-a75d6f4b6afb",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
                          "",
                          "// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
                          "",
                          "// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    if (pm.response.code === 201) {",
                          "        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
                          "",
                          "        responseData.data.forEach(function (user) {",
                          "            pm.expect(user).to.be.an('object');",
                          "            pm.expect(user._id).to.be.a('string');",
                          "            pm.expect(user.name).to.be.a('string');",
                          "            pm.expect(user.avatarUrl).to.be.a('string');",
                          "            pm.expect(user.email).to.be.a('string');",
                          "            pm.expect(user.nid).to.be.a('string');",
                          "            pm.expect(user.phone).to.be.a('string');",
                          "            pm.expect(user.bio).to.be.a('string');",
                          "            pm.expect(user.portfolio).to.be.a('string');",
                          "            pm.expect(user.age).to.be.a('number');",
                          "            pm.expect(user.isActive).to.be.a('boolean');",
                          "            pm.expect(user.createdAt).to.be.a('string');",
                          "            pm.expect(user.updatedAt).to.be.a('string');",
                          "        });",
                          "",
                          "        // You can add more specific value checks here if needed, for example:",
                          "        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
                          "",
                          "    } else if (pm.response.code === 409) {",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.meta).to.have.property('route', '/');",
                          "        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
                          "        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
                          "        pm.expect(responseBody.errors).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "41d40cf6-e131-446f-be99-391b245fbe8c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/generate-sample?count={{count}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "generate-sample"],
                      "query": [
                        {
                          "key": "count",
                          "value": "{{count}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "POST /api/users/generate-sample-data?count={{count}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "01b1162c-9f10-45b3-bca8-3f71edd06a63",
                        "exec": [
                          "pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "10f93904-c61b-4340-995b-5a85eb56eae3",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
                          "",
                          "// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
                          "",
                          "// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    if (pm.response.code === 201) {",
                          "        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
                          "",
                          "        responseData.data.forEach(function (user) {",
                          "            pm.expect(user).to.be.an('object');",
                          "            pm.expect(user._id).to.be.a('string');",
                          "            pm.expect(user.name).to.be.a('string');",
                          "            pm.expect(user.avatarUrl).to.be.a('string');",
                          "            pm.expect(user.email).to.be.a('string');",
                          "            pm.expect(user.nid).to.be.a('string');",
                          "            pm.expect(user.phone).to.be.a('string');",
                          "            pm.expect(user.bio).to.be.a('string');",
                          "            pm.expect(user.portfolio).to.be.a('string');",
                          "            pm.expect(user.age).to.be.a('number');",
                          "            pm.expect(user.isActive).to.be.a('boolean');",
                          "            pm.expect(user.createdAt).to.be.a('string');",
                          "            pm.expect(user.updatedAt).to.be.a('string');",
                          "        });",
                          "",
                          "        // You can add more specific value checks here if needed, for example:",
                          "        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
                          "",
                          "    } else if (pm.response.code === 409) {",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.meta).to.have.property('route', '/');",
                          "        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
                          "        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
                          "        pm.expect(responseBody.errors).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "61b075c2-47f6-484e-a460-76adbf635490",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/generate-sample-data?count={{count}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "generate-sample-data"],
                      "query": [
                        {
                          "key": "count",
                          "value": "{{count}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "id": "cacbaa3f-f79b-44ae-82fc-89949f0760d5",
              "description": "Routes for POST requests for users"
            },
            {
              "name": "GET",
              "item": [
                {
                  "name": "GET /api/users/",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "47cc0d09-094d-4876-91ae-2be4750a202e",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "const users = responseData.data;",
                          "",
                          "pm.test(\"Response status code is 200 or 404\", function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "  const responseBody = pm.response.json();",
                          "",
                          "  // Check top-level keys",
                          "  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "",
                          "  if (pm.response.code === 200) {",
                          "      // For a successful GET request, expect a success status",
                          "      pm.expect(responseBody.status).to.have.property('success', true);",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
                          "",
                          "      // Validate that data is an array",
                          "      pm.expect(responseBody.data).to.be.an('array');",
                          "",
                          "      // For each user, validate required keys and their types",
                          "      responseBody.data.forEach(user => {",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(user);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "      });",
                          "  } else if (pm.response.code === 409) {",
                          "      // In case of a conflict error, verify that the response is formatted as expected",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
                          "      pm.expect(responseBody.data).to.be.empty;",
                          "      pm.expect(responseBody.errors).to.be.empty;",
                          "  } else {",
                          "      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "  }",
                          "});",
                          "",
                          "// Define groups",
                          "const groups = {",
                          "  \"20s\": [],",
                          "  \"30s\": [],",
                          "  \"40s\": [],",
                          "  \"50s\": [],",
                          "  \"60s\": []",
                          "};",
                          "",
                          "// Group users by age",
                          "users.forEach(user => {",
                          "  if (user.age < 30) {",
                          "    groups[\"20s\"].push(user);",
                          "  } else if (user.age < 40) {",
                          "    groups[\"30s\"].push(user);",
                          "  } else if (user.age < 50) {",
                          "    groups[\"40s\"].push(user);",
                          "  } else if (user.age < 60) {",
                          "    groups[\"50s\"].push(user);",
                          "  } else {",
                          "    groups[\"60s\"].push(user);",
                          "  }",
                          "});",
                          "",
                          "// Convert groups object into an array for easier iteration in Handlebars",
                          "const groupArray = [];",
                          "for (let key in groups) {",
                          "  if (groups[key].length > 0) {",
                          "    groupArray.push({ group: key, users: groups[key] });",
                          "  }",
                          "}",
                          "",
                          "// Prepare data for the pie chart",
                          "const chartLabels = groupArray.map(g => g.group);",
                          "const chartCounts = groupArray.map(g => g.users.length);",
                          "// Define colors for each slice of the pie chart",
                          "const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
                          "",
                          "// Pre-stringify chart data to inject valid JSON into the template",
                          "const chartLabelsJSON = JSON.stringify(chartLabels);",
                          "const chartCountsJSON = JSON.stringify(chartCounts);",
                          "const chartColorsJSON = JSON.stringify(chartColors);",
                          "",
                          "// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
                          "pm.visualizer.set(`",
                          "<html>",
                          "  <head>",
                          "    <!-- Load Tailwind CSS from CDN -->",
                          "    <script src=\"https://cdn.tailwindcss.com\"></script>",
                          "",
                          "    <!-- Load Chart.js from CDN -->",
                          "    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
                          "  </head>",
                          "",
                          "  <body class=\"bg-gray-100 font-sans\">",
                          "    <div class=\"container mx-auto p-4\">",
                          "      <!-- Pie Chart Section -->",
                          "      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
                          "        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
                          "         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
                          "      </div>",
                          "      ",
                          "      <!-- Tables for Each Age Group -->",
                          "      {{#each groups}}",
                          "        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
                          "          <div class=\"bg-blue-500 px-4 py-1\">",
                          "            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
                          "          </div>",
                          "          <div class=\"overflow-x-auto\">",
                          "            <table class=\"min-w-full divide-y divide-gray-200\">",
                          "              <thead class=\"bg-gray-50\">",
                          "                <tr>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
                          "                </tr>",
                          "              </thead>",
                          "              <tbody class=\"bg-white divide-y divide-gray-200\">",
                          "                {{#each users}}",
                          "                  <tr class=\"hover:bg-gray-100\">",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
                          "                  </tr>",
                          "                {{/each}}",
                          "              </tbody>",
                          "            </table>",
                          "          </div>",
                          "        </div>",
                          "      {{/each}}",
                          "    </div>",
                          "    ",
                          "    <!-- Inline Script to Initialize the Pie Chart -->",
                          "    <script>",
                          "      // Get the 2D drawing context of the pieChart canvas",
                          "      const ctx = document.getElementById('pieChart').getContext('2d');",
                          "      // Create a new pie chart using Chart.js",
                          "      new Chart(ctx, {",
                          "        type: 'pie',",
                          "        data: {",
                          "          labels: {{{chartLabels}}},",
                          "          datasets: [{",
                          "            data: {{{chartCounts}}},",
                          "            backgroundColor: {{{chartColors}}}",
                          "          }]",
                          "        },",
                          "        options: {",
                          "          responsive: true,",
                          "          plugins: {",
                          "            legend: {",
                          "              position: 'bottom'",
                          "            }",
                          "          }",
                          "        }",
                          "      });",
                          "    </script>",
                          "  </body>",
                          "</html>",
                          "`, { ",
                          "  groups: groupArray,",
                          "  chartLabels: chartLabelsJSON,",
                          "  chartCounts: chartCountsJSON,",
                          "  chartColors: chartColorsJSON",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "cc5f2944-48e0-47c2-b9f0-c055a4885d45",
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "1bde89d6-5673-482e-8fb0-b18e73e032a0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users"]
                    }
                  },
                  "response": [
                    {
                      "id": "f96929a3-b997-4d32-b218-ec8ec286fe8a",
                      "name": "OK 200",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{SERVER_URL}}/api/users",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "users"]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "5a2c034a-0c04-4c3e-acb6-643eed69477c"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "e1a9be9c-6518-474f-9f2a-8bccde6ef99c"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "d818f0d8-36ac-43ce-bf3d-44e2f99ef9ed"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "299579fc-c8e0-4557-8ac6-4c92747b2942"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "b8a19e80-ca8f-4deb-80c4-119b98daf90c"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "9dc71115-f441-4dc8-b9ba-83d99f2b3805"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "575c02b1-398a-4050-a873-7a1e7c5e8d27"
                        },
                        {
                          "key": "X-DNS-Prefetch-Control",
                          "value": "off",
                          "uuid": "20dc519a-3265-4abe-9a44-0ce7f1e4dcce"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "3d863b60-3a55-419e-8377-468d7ff571e6"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "45973955-5903-4a72-adfb-0749f2a9b33b"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "b1d4ae5f-9145-4940-a5c4-9ad3a6ab7116"
                        },
                        {
                          "key": "X-XSS-Protection",
                          "value": "0",
                          "uuid": "08148469-77f6-4279-b96e-ead56d852bf7"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin, Accept-Encoding",
                          "uuid": "10b5775f-0944-4aa7-a01e-3e915f5fa76d"
                        },
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "fb4111bf-9940-46a4-8d25-4805ac086826"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "35f67e7b-27df-435b-8fb0-1f3e6a90d11a"
                        },
                        {
                          "key": "Content-Length",
                          "value": "1053",
                          "uuid": "0eb95ceb-f638-4da6-b243-96f3f3e8d3d2"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "uuid": "77f1e6cc-588e-47a3-82ec-59d3c5d0d332"
                        },
                        {
                          "key": "Date",
                          "value": "Wed, 12 Feb 2025 11:03:31 GMT",
                          "uuid": "e07215df-b59c-413e-947e-40b9bd3f89a8"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "uuid": "d8cfeddd-3776-43f8-8951-4f584d205200"
                        },
                        {
                          "key": "Keep-Alive",
                          "value": "timeout=5",
                          "uuid": "389d61ba-2dd4-46d1-abdb-ea81d06d081b"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"meta\": {\n        \"route\": \"/\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 10 Userss found with filters: None, sorted by '-createdAt', page 1, limit 10.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67ac69c1b73620249f25e387\",\n            \"name\": \"Thomas\",\n            \"avatarUrl\": \"https://avatars.githubusercontent.com/u/85088082\",\n            \"email\": \"Daphney_Torphy@gmail.com\",\n            \"nid\": \"1000000732\",\n            \"phone\": \"+8801750501605\",\n            \"bio\": \"Veritatis sit voluptatem.\",\n            \"portfolio\": \"https://claudie.name\",\n            \"age\": 21,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-12T09:28:33.207Z\",\n            \"updatedAt\": \"2025-02-12T09:28:33.207Z\"\n        },\n        {\n            \"_id\": \"67ac69a6b73620249f25e381\",\n            \"name\": \"Tony Kertzmann\",\n            \"avatarUrl\": \"https://avatars.githubusercontent.com/u/68896972\",\n            \"email\": \"Carissa_Feeney@gmail.com\",\n            \"nid\": \"1000000401\",\n            \"phone\": \"+8801734669415\",\n            \"bio\": \"Velit et iste aliquam et voluptates ex.\",\n            \"portfolio\": \"http://arlene.info\",\n            \"age\": 27,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-12T09:28:06.326Z\",\n            \"updatedAt\": \"2025-02-12T09:28:06.326Z\"\n        },\n        {\n            \"_id\": \"67ac69a1b73620249f25e37b\",\n            \"name\": \"Lillie Hintz\",\n            \"avatarUrl\": \"https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1011.jpg\",\n            \"email\": \"Rashawn23@hotmail.com\",\n            \"nid\": \"1000000004\",\n            \"phone\": \"+8801718463621\",\n            \"bio\": \"Inventore libero ad ut est ratione ea.\",\n            \"portfolio\": \"http://bryana.name\",\n            \"age\": 40,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-12T09:28:01.194Z\",\n            \"updatedAt\": \"2025-02-12T09:28:01.194Z\"\n        },\n        {\n            \"_id\": \"67ac681eb73620249f25e375\",\n            \"name\": \"Andre Sporer\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"Nia44@yahoo.com\",\n            \"nid\": \"1000000041\",\n            \"phone\": \"+8801724256094\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/41\",\n            \"age\": 23,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-12T09:21:34.866Z\",\n            \"updatedAt\": \"2025-02-12T09:21:34.866Z\"\n        },\n        {\n            \"_id\": \"67ac6817b73620249f25e36f\",\n            \"name\": \"Marty Sipes\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"Nicholaus_Stehr@hotmail.com\",\n            \"nid\": \"1000000153\",\n            \"phone\": \"+8801741837241\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/153\",\n            \"age\": 44,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-12T09:21:27.863Z\",\n            \"updatedAt\": \"2025-02-12T09:21:27.863Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b90\",\n            \"name\": \"Alice Johnson\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user226@example.com\",\n            \"nid\": \"1000000226\",\n            \"phone\": \"+8801792028713\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/226\",\n            \"age\": 44,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-11T12:40:43.127Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.127Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b8e\",\n            \"name\": \"Jane Smith\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user682@example.com\",\n            \"nid\": \"1000000682\",\n            \"phone\": \"+8801752993212\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/682\",\n            \"age\": 34,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-11T12:40:43.125Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.125Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b8c\",\n            \"name\": \"Emily Davis\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user148@example.com\",\n            \"nid\": \"1000000148\",\n            \"phone\": \"+8801780771528\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/148\",\n            \"age\": 27,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-11T12:40:43.123Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.123Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b8a\",\n            \"name\": \"John Doe\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user258@example.com\",\n            \"nid\": \"1000000258\",\n            \"phone\": \"+8801790854544\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/258\",\n            \"age\": 19,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-11T12:40:43.122Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.122Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b87\",\n            \"name\": \"Jane Smith\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user140@example.com\",\n            \"nid\": \"1000000140\",\n            \"phone\": \"+8801792123970\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/140\",\n            \"age\": 62,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-11T12:40:43.112Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.112Z\"\n        }\n    ],\n    \"errors\": {}\n}"
                    }
                  ]
                },
                {
                  "name": "GET /api/users/all",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5e5e12fd-ca77-4007-bee9-41952c3ea6d5",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "const users = responseData.data;",
                          "",
                          "pm.test(\"Response status code is 200 or 404\", function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "  const responseBody = pm.response.json();",
                          "",
                          "  // Check top-level keys",
                          "  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "",
                          "  if (pm.response.code === 200) {",
                          "      // For a successful GET request, expect a success status",
                          "      pm.expect(responseBody.status).to.have.property('success', true);",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
                          "",
                          "      // Validate that data is an array",
                          "      pm.expect(responseBody.data).to.be.an('array');",
                          "",
                          "      // For each user, validate required keys and their types",
                          "      responseBody.data.forEach(user => {",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(user);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "      });",
                          "  } else if (pm.response.code === 409) {",
                          "      // In case of a conflict error, verify that the response is formatted as expected",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
                          "      pm.expect(responseBody.data).to.be.empty;",
                          "      pm.expect(responseBody.errors).to.be.empty;",
                          "  } else {",
                          "      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "  }",
                          "});",
                          "",
                          "// Define groups",
                          "const groups = {",
                          "  \"20s\": [],",
                          "  \"30s\": [],",
                          "  \"40s\": [],",
                          "  \"50s\": [],",
                          "  \"60s\": []",
                          "};",
                          "",
                          "// Group users by age",
                          "users.forEach(user => {",
                          "  if (user.age < 30) {",
                          "    groups[\"20s\"].push(user);",
                          "  } else if (user.age < 40) {",
                          "    groups[\"30s\"].push(user);",
                          "  } else if (user.age < 50) {",
                          "    groups[\"40s\"].push(user);",
                          "  } else if (user.age < 60) {",
                          "    groups[\"50s\"].push(user);",
                          "  } else {",
                          "    groups[\"60s\"].push(user);",
                          "  }",
                          "});",
                          "",
                          "// Convert groups object into an array for easier iteration in Handlebars",
                          "const groupArray = [];",
                          "for (let key in groups) {",
                          "  if (groups[key].length > 0) {",
                          "    groupArray.push({ group: key, users: groups[key] });",
                          "  }",
                          "}",
                          "",
                          "// Prepare data for the pie chart",
                          "const chartLabels = groupArray.map(g => g.group);",
                          "const chartCounts = groupArray.map(g => g.users.length);",
                          "// Define colors for each slice of the pie chart",
                          "const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
                          "",
                          "// Pre-stringify chart data to inject valid JSON into the template",
                          "const chartLabelsJSON = JSON.stringify(chartLabels);",
                          "const chartCountsJSON = JSON.stringify(chartCounts);",
                          "const chartColorsJSON = JSON.stringify(chartColors);",
                          "",
                          "// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
                          "pm.visualizer.set(`",
                          "<html>",
                          "  <head>",
                          "    <!-- Load Tailwind CSS from CDN -->",
                          "    <script src=\"https://cdn.tailwindcss.com\"></script>",
                          "",
                          "    <!-- Load Chart.js from CDN -->",
                          "    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
                          "  </head>",
                          "",
                          "  <body class=\"bg-gray-100 font-sans\">",
                          "    <div class=\"container mx-auto p-4\">",
                          "      <!-- Pie Chart Section -->",
                          "      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
                          "        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
                          "         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
                          "      </div>",
                          "      ",
                          "      <!-- Tables for Each Age Group -->",
                          "      {{#each groups}}",
                          "        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
                          "          <div class=\"bg-blue-500 px-4 py-1\">",
                          "            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
                          "          </div>",
                          "          <div class=\"overflow-x-auto\">",
                          "            <table class=\"min-w-full divide-y divide-gray-200\">",
                          "              <thead class=\"bg-gray-50\">",
                          "                <tr>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
                          "                </tr>",
                          "              </thead>",
                          "              <tbody class=\"bg-white divide-y divide-gray-200\">",
                          "                {{#each users}}",
                          "                  <tr class=\"hover:bg-gray-100\">",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
                          "                  </tr>",
                          "                {{/each}}",
                          "              </tbody>",
                          "            </table>",
                          "          </div>",
                          "        </div>",
                          "      {{/each}}",
                          "    </div>",
                          "    ",
                          "    <!-- Inline Script to Initialize the Pie Chart -->",
                          "    <script>",
                          "      // Get the 2D drawing context of the pieChart canvas",
                          "      const ctx = document.getElementById('pieChart').getContext('2d');",
                          "      // Create a new pie chart using Chart.js",
                          "      new Chart(ctx, {",
                          "        type: 'pie',",
                          "        data: {",
                          "          labels: {{{chartLabels}}},",
                          "          datasets: [{",
                          "            data: {{{chartCounts}}},",
                          "            backgroundColor: {{{chartColors}}}",
                          "          }]",
                          "        },",
                          "        options: {",
                          "          responsive: true,",
                          "          plugins: {",
                          "            legend: {",
                          "              position: 'bottom'",
                          "            }",
                          "          }",
                          "        }",
                          "      });",
                          "    </script>",
                          "  </body>",
                          "</html>",
                          "`, { ",
                          "  groups: groupArray,",
                          "  chartLabels: chartLabelsJSON,",
                          "  chartCounts: chartCountsJSON,",
                          "  chartColors: chartColorsJSON",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "7fce26c6-0e1b-4552-b0da-e4516cef3fb6",
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "9f30a019-9110-414c-9e40-32e4e629ec52",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/all",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "all"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET /api/users/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "797d6ee4-fcbd-4583-afe6-af9b054e5984",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "const users = responseData.data;",
                          "",
                          "pm.test(\"Response status code is 200 or 404\", function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "  const responseBody = pm.response.json();",
                          "",
                          "  // Check top-level keys",
                          "  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "",
                          "  if (pm.response.code === 200) {",
                          "      // For a successful GET request, expect a success status",
                          "      pm.expect(responseBody.status).to.have.property('success', true);",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
                          "",
                          "      // Validate that data is an array",
                          "      pm.expect(responseBody.data).to.be.an('array');",
                          "",
                          "      // For each user, validate required keys and their types",
                          "      responseBody.data.forEach(user => {",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(user);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "      });",
                          "  } else if (pm.response.code === 409) {",
                          "      // In case of a conflict error, verify that the response is formatted as expected",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
                          "      pm.expect(responseBody.data).to.be.empty;",
                          "      pm.expect(responseBody.errors).to.be.empty;",
                          "  } else {",
                          "      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "  }",
                          "});",
                          "",
                          "// Define groups",
                          "const groups = {",
                          "  \"20s\": [],",
                          "  \"30s\": [],",
                          "  \"40s\": [],",
                          "  \"50s\": [],",
                          "  \"60s\": []",
                          "};",
                          "",
                          "// Group users by age",
                          "users.forEach(user => {",
                          "  if (user.age < 30) {",
                          "    groups[\"20s\"].push(user);",
                          "  } else if (user.age < 40) {",
                          "    groups[\"30s\"].push(user);",
                          "  } else if (user.age < 50) {",
                          "    groups[\"40s\"].push(user);",
                          "  } else if (user.age < 60) {",
                          "    groups[\"50s\"].push(user);",
                          "  } else {",
                          "    groups[\"60s\"].push(user);",
                          "  }",
                          "});",
                          "",
                          "// Convert groups object into an array for easier iteration in Handlebars",
                          "const groupArray = [];",
                          "for (let key in groups) {",
                          "  if (groups[key].length > 0) {",
                          "    groupArray.push({ group: key, users: groups[key] });",
                          "  }",
                          "}",
                          "",
                          "// Prepare data for the pie chart",
                          "const chartLabels = groupArray.map(g => g.group);",
                          "const chartCounts = groupArray.map(g => g.users.length);",
                          "// Define colors for each slice of the pie chart",
                          "const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
                          "",
                          "// Pre-stringify chart data to inject valid JSON into the template",
                          "const chartLabelsJSON = JSON.stringify(chartLabels);",
                          "const chartCountsJSON = JSON.stringify(chartCounts);",
                          "const chartColorsJSON = JSON.stringify(chartColors);",
                          "",
                          "// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
                          "pm.visualizer.set(`",
                          "<html>",
                          "  <head>",
                          "    <!-- Load Tailwind CSS from CDN -->",
                          "    <script src=\"https://cdn.tailwindcss.com\"></script>",
                          "",
                          "    <!-- Load Chart.js from CDN -->",
                          "    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
                          "  </head>",
                          "",
                          "  <body class=\"bg-gray-100 font-sans\">",
                          "    <div class=\"container mx-auto p-4\">",
                          "      <!-- Pie Chart Section -->",
                          "      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
                          "        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
                          "         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
                          "      </div>",
                          "      ",
                          "      <!-- Tables for Each Age Group -->",
                          "      {{#each groups}}",
                          "        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
                          "          <div class=\"bg-blue-500 px-4 py-1\">",
                          "            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
                          "          </div>",
                          "          <div class=\"overflow-x-auto\">",
                          "            <table class=\"min-w-full divide-y divide-gray-200\">",
                          "              <thead class=\"bg-gray-50\">",
                          "                <tr>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
                          "                </tr>",
                          "              </thead>",
                          "              <tbody class=\"bg-white divide-y divide-gray-200\">",
                          "                {{#each users}}",
                          "                  <tr class=\"hover:bg-gray-100\">",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
                          "                  </tr>",
                          "                {{/each}}",
                          "              </tbody>",
                          "            </table>",
                          "          </div>",
                          "        </div>",
                          "      {{/each}}",
                          "    </div>",
                          "    ",
                          "    <!-- Inline Script to Initialize the Pie Chart -->",
                          "    <script>",
                          "      // Get the 2D drawing context of the pieChart canvas",
                          "      const ctx = document.getElementById('pieChart').getContext('2d');",
                          "      // Create a new pie chart using Chart.js",
                          "      new Chart(ctx, {",
                          "        type: 'pie',",
                          "        data: {",
                          "          labels: {{{chartLabels}}},",
                          "          datasets: [{",
                          "            data: {{{chartCounts}}},",
                          "            backgroundColor: {{{chartColors}}}",
                          "          }]",
                          "        },",
                          "        options: {",
                          "          responsive: true,",
                          "          plugins: {",
                          "            legend: {",
                          "              position: 'bottom'",
                          "            }",
                          "          }",
                          "        }",
                          "      });",
                          "    </script>",
                          "  </body>",
                          "</html>",
                          "`, { ",
                          "  groups: groupArray,",
                          "  chartLabels: chartLabelsJSON,",
                          "  chartCounts: chartCountsJSON,",
                          "  chartColors: chartColorsJSON",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "c36a5c72-8e3a-45d4-8302-eacb3a01a422",
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "f9af6d43-646b-4341-9330-23e6b1c2178f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/list",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "list"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET /api/users/read",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "426d6070-c7cc-4c3c-a7e3-f0bdaa101988",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "const users = responseData.data;",
                          "",
                          "pm.test(\"Response status code is 200 or 404\", function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "  const responseBody = pm.response.json();",
                          "",
                          "  // Check top-level keys",
                          "  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "",
                          "  if (pm.response.code === 200) {",
                          "      // For a successful GET request, expect a success status",
                          "      pm.expect(responseBody.status).to.have.property('success', true);",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
                          "",
                          "      // Validate that data is an array",
                          "      pm.expect(responseBody.data).to.be.an('array');",
                          "",
                          "      // For each user, validate required keys and their types",
                          "      responseBody.data.forEach(user => {",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(user);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "      });",
                          "  } else if (pm.response.code === 409) {",
                          "      // In case of a conflict error, verify that the response is formatted as expected",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
                          "      pm.expect(responseBody.data).to.be.empty;",
                          "      pm.expect(responseBody.errors).to.be.empty;",
                          "  } else {",
                          "      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "  }",
                          "});",
                          "",
                          "// Define groups",
                          "const groups = {",
                          "  \"20s\": [],",
                          "  \"30s\": [],",
                          "  \"40s\": [],",
                          "  \"50s\": [],",
                          "  \"60s\": []",
                          "};",
                          "",
                          "// Group users by age",
                          "users.forEach(user => {",
                          "  if (user.age < 30) {",
                          "    groups[\"20s\"].push(user);",
                          "  } else if (user.age < 40) {",
                          "    groups[\"30s\"].push(user);",
                          "  } else if (user.age < 50) {",
                          "    groups[\"40s\"].push(user);",
                          "  } else if (user.age < 60) {",
                          "    groups[\"50s\"].push(user);",
                          "  } else {",
                          "    groups[\"60s\"].push(user);",
                          "  }",
                          "});",
                          "",
                          "// Convert groups object into an array for easier iteration in Handlebars",
                          "const groupArray = [];",
                          "for (let key in groups) {",
                          "  if (groups[key].length > 0) {",
                          "    groupArray.push({ group: key, users: groups[key] });",
                          "  }",
                          "}",
                          "",
                          "// Prepare data for the pie chart",
                          "const chartLabels = groupArray.map(g => g.group);",
                          "const chartCounts = groupArray.map(g => g.users.length);",
                          "// Define colors for each slice of the pie chart",
                          "const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
                          "",
                          "// Pre-stringify chart data to inject valid JSON into the template",
                          "const chartLabelsJSON = JSON.stringify(chartLabels);",
                          "const chartCountsJSON = JSON.stringify(chartCounts);",
                          "const chartColorsJSON = JSON.stringify(chartColors);",
                          "",
                          "// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
                          "pm.visualizer.set(`",
                          "<html>",
                          "  <head>",
                          "    <!-- Load Tailwind CSS from CDN -->",
                          "    <script src=\"https://cdn.tailwindcss.com\"></script>",
                          "",
                          "    <!-- Load Chart.js from CDN -->",
                          "    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
                          "  </head>",
                          "",
                          "  <body class=\"bg-gray-100 font-sans\">",
                          "    <div class=\"container mx-auto p-4\">",
                          "      <!-- Pie Chart Section -->",
                          "      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
                          "        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
                          "         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
                          "      </div>",
                          "      ",
                          "      <!-- Tables for Each Age Group -->",
                          "      {{#each groups}}",
                          "        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
                          "          <div class=\"bg-blue-500 px-4 py-1\">",
                          "            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
                          "          </div>",
                          "          <div class=\"overflow-x-auto\">",
                          "            <table class=\"min-w-full divide-y divide-gray-200\">",
                          "              <thead class=\"bg-gray-50\">",
                          "                <tr>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
                          "                </tr>",
                          "              </thead>",
                          "              <tbody class=\"bg-white divide-y divide-gray-200\">",
                          "                {{#each users}}",
                          "                  <tr class=\"hover:bg-gray-100\">",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
                          "                  </tr>",
                          "                {{/each}}",
                          "              </tbody>",
                          "            </table>",
                          "          </div>",
                          "        </div>",
                          "      {{/each}}",
                          "    </div>",
                          "    ",
                          "    <!-- Inline Script to Initialize the Pie Chart -->",
                          "    <script>",
                          "      // Get the 2D drawing context of the pieChart canvas",
                          "      const ctx = document.getElementById('pieChart').getContext('2d');",
                          "      // Create a new pie chart using Chart.js",
                          "      new Chart(ctx, {",
                          "        type: 'pie',",
                          "        data: {",
                          "          labels: {{{chartLabels}}},",
                          "          datasets: [{",
                          "            data: {{{chartCounts}}},",
                          "            backgroundColor: {{{chartColors}}}",
                          "          }]",
                          "        },",
                          "        options: {",
                          "          responsive: true,",
                          "          plugins: {",
                          "            legend: {",
                          "              position: 'bottom'",
                          "            }",
                          "          }",
                          "        }",
                          "      });",
                          "    </script>",
                          "  </body>",
                          "</html>",
                          "`, { ",
                          "  groups: groupArray,",
                          "  chartLabels: chartLabelsJSON,",
                          "  chartCounts: chartCountsJSON,",
                          "  chartColors: chartColorsJSON",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "6266d7b1-16e2-4c19-b0f2-54b3b087003c",
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "595c60e9-8087-438e-8187-1ebd0a34476f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/read",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "read"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET /api/users/show",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f8b624fb-54dd-4a10-b832-538dea6a9539",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "const users = responseData.data;",
                          "",
                          "pm.test(\"Response status code is 200 or 404\", function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "  const responseBody = pm.response.json();",
                          "",
                          "  // Check top-level keys",
                          "  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "",
                          "  if (pm.response.code === 200) {",
                          "      // For a successful GET request, expect a success status",
                          "      pm.expect(responseBody.status).to.have.property('success', true);",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
                          "",
                          "      // Validate that data is an array",
                          "      pm.expect(responseBody.data).to.be.an('array');",
                          "",
                          "      // For each user, validate required keys and their types",
                          "      responseBody.data.forEach(user => {",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(user);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "      });",
                          "  } else if (pm.response.code === 409) {",
                          "      // In case of a conflict error, verify that the response is formatted as expected",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
                          "      pm.expect(responseBody.data).to.be.empty;",
                          "      pm.expect(responseBody.errors).to.be.empty;",
                          "  } else {",
                          "      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "  }",
                          "});",
                          "",
                          "// Define groups",
                          "const groups = {",
                          "  \"20s\": [],",
                          "  \"30s\": [],",
                          "  \"40s\": [],",
                          "  \"50s\": [],",
                          "  \"60s\": []",
                          "};",
                          "",
                          "// Group users by age",
                          "users.forEach(user => {",
                          "  if (user.age < 30) {",
                          "    groups[\"20s\"].push(user);",
                          "  } else if (user.age < 40) {",
                          "    groups[\"30s\"].push(user);",
                          "  } else if (user.age < 50) {",
                          "    groups[\"40s\"].push(user);",
                          "  } else if (user.age < 60) {",
                          "    groups[\"50s\"].push(user);",
                          "  } else {",
                          "    groups[\"60s\"].push(user);",
                          "  }",
                          "});",
                          "",
                          "// Convert groups object into an array for easier iteration in Handlebars",
                          "const groupArray = [];",
                          "for (let key in groups) {",
                          "  if (groups[key].length > 0) {",
                          "    groupArray.push({ group: key, users: groups[key] });",
                          "  }",
                          "}",
                          "",
                          "// Prepare data for the pie chart",
                          "const chartLabels = groupArray.map(g => g.group);",
                          "const chartCounts = groupArray.map(g => g.users.length);",
                          "// Define colors for each slice of the pie chart",
                          "const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
                          "",
                          "// Pre-stringify chart data to inject valid JSON into the template",
                          "const chartLabelsJSON = JSON.stringify(chartLabels);",
                          "const chartCountsJSON = JSON.stringify(chartCounts);",
                          "const chartColorsJSON = JSON.stringify(chartColors);",
                          "",
                          "// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
                          "pm.visualizer.set(`",
                          "<html>",
                          "  <head>",
                          "    <!-- Load Tailwind CSS from CDN -->",
                          "    <script src=\"https://cdn.tailwindcss.com\"></script>",
                          "",
                          "    <!-- Load Chart.js from CDN -->",
                          "    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
                          "  </head>",
                          "",
                          "  <body class=\"bg-gray-100 font-sans\">",
                          "    <div class=\"container mx-auto p-4\">",
                          "      <!-- Pie Chart Section -->",
                          "      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
                          "        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
                          "         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
                          "      </div>",
                          "      ",
                          "      <!-- Tables for Each Age Group -->",
                          "      {{#each groups}}",
                          "        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
                          "          <div class=\"bg-blue-500 px-4 py-1\">",
                          "            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
                          "          </div>",
                          "          <div class=\"overflow-x-auto\">",
                          "            <table class=\"min-w-full divide-y divide-gray-200\">",
                          "              <thead class=\"bg-gray-50\">",
                          "                <tr>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
                          "                </tr>",
                          "              </thead>",
                          "              <tbody class=\"bg-white divide-y divide-gray-200\">",
                          "                {{#each users}}",
                          "                  <tr class=\"hover:bg-gray-100\">",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
                          "                  </tr>",
                          "                {{/each}}",
                          "              </tbody>",
                          "            </table>",
                          "          </div>",
                          "        </div>",
                          "      {{/each}}",
                          "    </div>",
                          "    ",
                          "    <!-- Inline Script to Initialize the Pie Chart -->",
                          "    <script>",
                          "      // Get the 2D drawing context of the pieChart canvas",
                          "      const ctx = document.getElementById('pieChart').getContext('2d');",
                          "      // Create a new pie chart using Chart.js",
                          "      new Chart(ctx, {",
                          "        type: 'pie',",
                          "        data: {",
                          "          labels: {{{chartLabels}}},",
                          "          datasets: [{",
                          "            data: {{{chartCounts}}},",
                          "            backgroundColor: {{{chartColors}}}",
                          "          }]",
                          "        },",
                          "        options: {",
                          "          responsive: true,",
                          "          plugins: {",
                          "            legend: {",
                          "              position: 'bottom'",
                          "            }",
                          "          }",
                          "        }",
                          "      });",
                          "    </script>",
                          "  </body>",
                          "</html>",
                          "`, { ",
                          "  groups: groupArray,",
                          "  chartLabels: chartLabelsJSON,",
                          "  chartCounts: chartCountsJSON,",
                          "  chartColors: chartColorsJSON",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "7b6a59d3-b34f-456b-8694-6a3e482f3200",
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "e09b7f23-3b27-4379-924f-8d1502e8a730",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/show",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "show"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET /api/users/view",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f45b4c4e-3b4e-4af6-a8db-a70987a9eec0",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "const users = responseData.data;",
                          "",
                          "pm.test(\"Response status code is 200 or 404\", function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "  const responseBody = pm.response.json();",
                          "",
                          "  // Check top-level keys",
                          "  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "",
                          "  if (pm.response.code === 200) {",
                          "      // For a successful GET request, expect a success status",
                          "      pm.expect(responseBody.status).to.have.property('success', true);",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
                          "",
                          "      // Validate that data is an array",
                          "      pm.expect(responseBody.data).to.be.an('array');",
                          "",
                          "      // For each user, validate required keys and their types",
                          "      responseBody.data.forEach(user => {",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(user);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "      });",
                          "  } else if (pm.response.code === 409) {",
                          "      // In case of a conflict error, verify that the response is formatted as expected",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
                          "      pm.expect(responseBody.data).to.be.empty;",
                          "      pm.expect(responseBody.errors).to.be.empty;",
                          "  } else {",
                          "      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "  }",
                          "});",
                          "",
                          "// Define groups",
                          "const groups = {",
                          "  \"20s\": [],",
                          "  \"30s\": [],",
                          "  \"40s\": [],",
                          "  \"50s\": [],",
                          "  \"60s\": []",
                          "};",
                          "",
                          "// Group users by age",
                          "users.forEach(user => {",
                          "  if (user.age < 30) {",
                          "    groups[\"20s\"].push(user);",
                          "  } else if (user.age < 40) {",
                          "    groups[\"30s\"].push(user);",
                          "  } else if (user.age < 50) {",
                          "    groups[\"40s\"].push(user);",
                          "  } else if (user.age < 60) {",
                          "    groups[\"50s\"].push(user);",
                          "  } else {",
                          "    groups[\"60s\"].push(user);",
                          "  }",
                          "});",
                          "",
                          "// Convert groups object into an array for easier iteration in Handlebars",
                          "const groupArray = [];",
                          "for (let key in groups) {",
                          "  if (groups[key].length > 0) {",
                          "    groupArray.push({ group: key, users: groups[key] });",
                          "  }",
                          "}",
                          "",
                          "// Prepare data for the pie chart",
                          "const chartLabels = groupArray.map(g => g.group);",
                          "const chartCounts = groupArray.map(g => g.users.length);",
                          "// Define colors for each slice of the pie chart",
                          "const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
                          "",
                          "// Pre-stringify chart data to inject valid JSON into the template",
                          "const chartLabelsJSON = JSON.stringify(chartLabels);",
                          "const chartCountsJSON = JSON.stringify(chartCounts);",
                          "const chartColorsJSON = JSON.stringify(chartColors);",
                          "",
                          "// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
                          "pm.visualizer.set(`",
                          "<html>",
                          "  <head>",
                          "    <!-- Load Tailwind CSS from CDN -->",
                          "    <script src=\"https://cdn.tailwindcss.com\"></script>",
                          "",
                          "    <!-- Load Chart.js from CDN -->",
                          "    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
                          "  </head>",
                          "",
                          "  <body class=\"bg-gray-100 font-sans\">",
                          "    <div class=\"container mx-auto p-4\">",
                          "      <!-- Pie Chart Section -->",
                          "      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
                          "        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
                          "         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
                          "      </div>",
                          "      ",
                          "      <!-- Tables for Each Age Group -->",
                          "      {{#each groups}}",
                          "        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
                          "          <div class=\"bg-blue-500 px-4 py-1\">",
                          "            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
                          "          </div>",
                          "          <div class=\"overflow-x-auto\">",
                          "            <table class=\"min-w-full divide-y divide-gray-200\">",
                          "              <thead class=\"bg-gray-50\">",
                          "                <tr>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
                          "                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
                          "                </tr>",
                          "              </thead>",
                          "              <tbody class=\"bg-white divide-y divide-gray-200\">",
                          "                {{#each users}}",
                          "                  <tr class=\"hover:bg-gray-100\">",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
                          "                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
                          "                  </tr>",
                          "                {{/each}}",
                          "              </tbody>",
                          "            </table>",
                          "          </div>",
                          "        </div>",
                          "      {{/each}}",
                          "    </div>",
                          "    ",
                          "    <!-- Inline Script to Initialize the Pie Chart -->",
                          "    <script>",
                          "      // Get the 2D drawing context of the pieChart canvas",
                          "      const ctx = document.getElementById('pieChart').getContext('2d');",
                          "      // Create a new pie chart using Chart.js",
                          "      new Chart(ctx, {",
                          "        type: 'pie',",
                          "        data: {",
                          "          labels: {{{chartLabels}}},",
                          "          datasets: [{",
                          "            data: {{{chartCounts}}},",
                          "            backgroundColor: {{{chartColors}}}",
                          "          }]",
                          "        },",
                          "        options: {",
                          "          responsive: true,",
                          "          plugins: {",
                          "            legend: {",
                          "              position: 'bottom'",
                          "            }",
                          "          }",
                          "        }",
                          "      });",
                          "    </script>",
                          "  </body>",
                          "</html>",
                          "`, { ",
                          "  groups: groupArray,",
                          "  chartLabels: chartLabelsJSON,",
                          "  chartCounts: chartCountsJSON,",
                          "  chartColors: chartColorsJSON",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "7de4b316-c0bb-4639-8c4b-765e4a0a4845",
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "4639e16b-169f-4f05-b1d0-5e4c8fc9ee14",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/view",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "view"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET /api/users/{{user_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "048f088d-e15f-4270-b28a-b20e42971483",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        // Parse the response to extract user data\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Select a random user from the list\r",
                          "            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"user_id\", randomUser._id);\r",
                          "            console.log(\"User ID set:\", randomUser._id);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"user_id\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "02bc5436-3274-4131-8585-50e978a843c1",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "",
                          "",
                          "pm.test(\"Status code is 200 or 404\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content-Type header is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    if (pm.response.code === 200) {",
                          "        // Ensure the response has the expected top-level keys",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.status).to.have.property('success', true);",
                          "",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(responseBody.data);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "    } else if (pm.response.code === 404) {",
                          "        // For a 409 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "    }",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "6965d46a-0838-4b5d-b4dd-eaf75c19978c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/{{user_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "{{user_id}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET /api/users/read/{{user_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "a2d49279-5a67-4272-9fb0-6d15a7e448d3",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        // Parse the response to extract user data\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Select a random user from the list\r",
                          "            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
                          "\r",
                          "            console.log(randomUser)\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"user_id\", randomUser._id);\r",
                          "            console.log(\"User ID set:\", randomUser._id);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"user_id\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "6531445a-0ccc-48c2-ad4d-4cf894623afc",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "",
                          "",
                          "pm.test(\"Status code is 200 or 404\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content-Type header is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    if (pm.response.code === 200) {",
                          "        // Ensure the response has the expected top-level keys",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.status).to.have.property('success', true);",
                          "",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(responseBody.data);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "    } else if (pm.response.code === 404) {",
                          "        // For a 409 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "    }",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "e695b26b-1e29-42c6-97d6-822229c33622",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/read/{{user_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "read", "{{user_id}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET /api/users/show/{{user_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "0350e06c-dd2d-4384-9cf5-a5fbc62e746a",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        // Parse the response to extract user data\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Select a random user from the list\r",
                          "            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
                          "\r",
                          "            console.log(randomUser)\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"user_id\", randomUser._id);\r",
                          "            console.log(\"User ID set:\", randomUser._id);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"user_id\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "e793f91d-a01c-4d48-b6ec-a6735fcab152",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "",
                          "",
                          "pm.test(\"Status code is 200 or 404\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content-Type header is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    if (pm.response.code === 200) {",
                          "        // Ensure the response has the expected top-level keys",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.status).to.have.property('success', true);",
                          "",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(responseBody.data);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "    } else if (pm.response.code === 404) {",
                          "        // For a 409 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "    }",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "24eac16c-02ab-4b00-89f5-e3deab93fcd9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/show/{{user_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "show", "{{user_id}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET /api/users/view/{{user_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "9be228bb-2f12-463b-8d87-c08dfde1f8ce",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        // Parse the response to extract user data\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Select a random user from the list\r",
                          "            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
                          "\r",
                          "            console.log(randomUser)\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"user_id\", randomUser._id);\r",
                          "            console.log(\"User ID set:\", randomUser._id);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"user_id\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "e3fda203-af6b-46d0-8a4e-d282d77d6701",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "",
                          "",
                          "pm.test(\"Status code is 200 or 404\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content-Type header is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    if (pm.response.code === 200) {",
                          "        // Ensure the response has the expected top-level keys",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.status).to.have.property('success', true);",
                          "",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(responseBody.data);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "    } else if (pm.response.code === 404) {",
                          "        // For a 409 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "    }",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "4fb67f73-4ab8-46f7-9d2c-8833cfec896d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/view/{{user_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "view", "{{user_id}}"]
                    }
                  },
                  "response": []
                }
              ],
              "id": "42be8e37-b555-459e-a574-9646dfd050ed",
              "description": "Routes for GET requests for users"
            },
            {
              "name": "PATCH",
              "item": [
                {
                  "name": "PATCH /api/users/{{user_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e17e845e-0de8-47ef-a5b9-6197c4143104",
                        "exec": [
                          "// Step 1: Fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Step 2: Select a random user\r",
                          "            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"user_id\", randomUser._id);\r",
                          "\r",
                          "            // Step 3: Generate random data\r",
                          "            // Generate random data with valid name\r",
                          "            const randomId = Math.floor(Math.random() * 1000);\r",
                          "            const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
                          "\r",
                          "            pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
                          "            pm.environment.set(\"phone\", randomPhone);\r",
                          "            pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"user_id\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "98059dc0-cfa9-4b22-8834-a5c9a6d26d34",
                        "exec": [
                          "pm.test(\"Status code is 200, 404 or 409\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 409]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    if (pm.response.code === 200) {",
                          "        // Ensure the response has the expected top-level keys",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.status).to.have.property('success', true);",
                          "",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(responseBody.data);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "    } else if (pm.response.code === 404) {",
                          "        // For a 404 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else if (pm.response.code === 409) {",
                          "        // For a 409 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "    }",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "40d2f325-3201-423f-8d77-986ea1070857",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"avatarUrl\": \"{{$randomAvatarImage}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{$randomLoremSentence}}\",\n    \"portfolio\": \"{{$randomUrl}}\",\n    \"age\": {{age}},\n    \"isActive\": {{$randomBoolean}}\n}\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/{{user_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "{{user_id}}"]
                    }
                  },
                  "response": [
                    {
                      "id": "072003e7-aef0-4386-8741-5677bc977e46",
                      "name": "INTERNAL_SERVER_ERROR 500",
                      "originalRequest": {
                        "method": "PATCH",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{SERVER_URL}}/api/users/{{user_id}}",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "users", "{{user_id}}"]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "raw",
                      "header": [
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "b68cd25b-a264-4f05-bb37-92ae8f3f4ffe"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "c75ec4a2-3323-420e-807b-37ea53e5c6f1"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "fa19b8c1-d54e-40d0-a23c-c41392e3d3e5"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "bf401ef6-4330-4c39-9df4-08285e9f7bf2"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "53b4bf61-b314-4d64-9487-f3fa7a6b38f7"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "5cf881c1-4470-4a42-a607-07ef924638e9"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "12f2f7eb-9c37-4131-b4ff-0103a38561cd"
                        },
                        {
                          "key": "X-DNS-Prefetch-Control",
                          "value": "off",
                          "uuid": "265084de-41b6-4f43-a4ba-435844c9cab3"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "943680cc-b965-4c03-982b-8be64e698ca6"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "50cc38a2-f982-417c-852a-9edac92044bd"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "24d52423-ebb4-4ae9-985f-2ed1dee63641"
                        },
                        {
                          "key": "X-XSS-Protection",
                          "value": "0",
                          "uuid": "6e081dee-1af8-433f-ba86-c4fcfee41ad9"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin",
                          "uuid": "f590da9f-9ca1-437c-8f4b-f619020cb93e"
                        },
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "59e0b0e9-a4e7-4ecf-9bb7-e5fa551a11d0"
                        },
                        {
                          "key": "RateLimit-Policy",
                          "value": "100;w=60",
                          "uuid": "6f85ccbd-2c99-4725-bd01-cc26fbbaf38e"
                        },
                        {
                          "key": "RateLimit-Limit",
                          "value": "100",
                          "uuid": "4b3057a2-e388-4033-ae11-9c4e6b5c76af"
                        },
                        {
                          "key": "RateLimit-Remaining",
                          "value": "98",
                          "uuid": "25759cd4-3987-4996-aa10-3f4fca39e930"
                        },
                        {
                          "key": "RateLimit-Reset",
                          "value": "60",
                          "uuid": "d1de3d61-539d-43cc-9f6a-20c3488cfe13"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "b0b98d17-334d-4cff-ba9c-862b23bf83c0"
                        },
                        {
                          "key": "Content-Length",
                          "value": "292",
                          "uuid": "472769a0-d992-4ab4-b844-b0d4a61a3352"
                        },
                        {
                          "key": "Content-Type",
                          "value": "[object Object]",
                          "uuid": "a4fda2fb-24c7-4975-bf0d-f612eb41302a"
                        },
                        {
                          "key": "Date",
                          "value": "Tue, 11 Feb 2025 11:11:32 GMT",
                          "uuid": "cdb02b33-03cb-4743-b55a-6d3ee33627ca"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "uuid": "5b167bbc-8b62-4285-92fb-6a990062b492"
                        },
                        {
                          "key": "Keep-Alive",
                          "value": "timeout=5",
                          "uuid": "486b518b-dee6-45b9-b5f3-0a4fd4a57d91"
                        }
                      ],
                      "cookie": [],
                      "body": "{\"meta\":{\"route\":\"/67ab2ebed3c81db68b98f2d1\"},\"status\":{\"message\":\"model.findById(...).aggregate is not a function\"},\"data\":{},\"errors\":\"TypeError: model.findById(...).aggregate is not a function\\n    at updateADocument (file:///E:/PERSONAL/auto-crud-api/src/service/updateADocument.js:59:52)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\\n    at async file:///E:/PERSONAL/auto-crud-api/src/utils/asyncHandler.js:26:13\"}"
                    }
                  ]
                },
                {
                  "name": "PATCH /api/users/edit/{{user_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "eec193a1-54d3-4046-b664-0e342ecd66be",
                        "exec": [
                          "// Step 1: Fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Step 2: Select a random user\r",
                          "            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"user_id\", randomUser._id);\r",
                          "            console.log(\"User ID set:\", randomUser._id);\r",
                          "\r",
                          "            // Step 3: Generate random data\r",
                          "            const randomId = Math.floor(Math.random() * 1000);\r",
                          "            const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
                          "            const isActive = Math.random() < 0.5;\r",
                          "\r",
                          "            const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
                          "            const randomName = names[Math.floor(Math.random() * names.length)];\r",
                          "\r",
                          "            pm.environment.set(\"name\", randomName);\r",
                          "            pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
                          "            pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
                          "            pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
                          "            pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
                          "            pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
                          "            pm.environment.set(\"phone\", randomPhone);\r",
                          "            pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
                          "            pm.environment.set(\"isActive\", isActive);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"user_id\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "f6d04bfa-0399-4b11-ab9c-c57d40fa1b37",
                        "exec": [
                          "pm.test(\"Status code is 200, 404 or 409\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 409]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    if (pm.response.code === 200) {",
                          "        // Ensure the response has the expected top-level keys",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.status).to.have.property('success', true);",
                          "",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(responseBody.data);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "    } else if (pm.response.code === 404) {",
                          "        // For a 404 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else if (pm.response.code === 409) {",
                          "        // For a 409 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "    }",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "ac447f0f-98ae-454d-99cb-c03a1a7f76ac",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"avatarUrl\": \"{{$randomAvatarImage}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{$randomLoremSentence}}\",\n    \"portfolio\": \"{{$randomUrl}}\",\n    \"age\": {{age}},\n    \"isActive\": {{$randomBoolean}}\n}\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/edit/{{user_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "edit", "{{user_id}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "PATCH /api/users/update/{{user_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "6280fb8a-b1f4-4e87-a9a7-cd05a4b06403",
                        "exec": [
                          "// Step 1: Fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Step 2: Select a random user\r",
                          "            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"user_id\", randomUser._id);\r",
                          "            console.log(\"User ID set:\", randomUser._id);\r",
                          "\r",
                          "            // Step 3: Generate random data\r",
                          "            const randomId = Math.floor(Math.random() * 1000);\r",
                          "            const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
                          "            const isActive = Math.random() < 0.5;\r",
                          "\r",
                          "            const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
                          "            const randomName = names[Math.floor(Math.random() * names.length)];\r",
                          "\r",
                          "            pm.environment.set(\"name\", randomName);\r",
                          "            pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
                          "            pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
                          "            pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
                          "            pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
                          "            pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
                          "            pm.environment.set(\"phone\", randomPhone);\r",
                          "            pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
                          "            pm.environment.set(\"isActive\", isActive);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"user_id\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "69c23e79-9043-4774-804c-5d5d23b5f325",
                        "exec": [
                          "pm.test(\"Status code is 200, 404 or 409\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 409]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    if (pm.response.code === 200) {",
                          "        // Ensure the response has the expected top-level keys",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.status).to.have.property('success', true);",
                          "",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'avatarUrl', 'email', 'nid',",
                          "            'phone', 'bio', 'portfolio', 'age', 'isActive',",
                          "            'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(responseBody.data);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "    } else if (pm.response.code === 404) {",
                          "        // For a 404 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else if (pm.response.code === 409) {",
                          "        // For a 409 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "    }",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "cfd0f6b6-f5bb-4c5d-9ad2-cf0567743a9a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"avatarUrl\": \"{{$randomAvatarImage}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{$randomLoremSentence}}\",\n    \"portfolio\": \"{{$randomUrl}}\",\n    \"age\": {{age}},\n    \"isActive\": {{$randomBoolean}}\n}\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/update/{{user_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "update", "{{user_id}}"]
                    }
                  },
                  "response": []
                }
              ],
              "id": "d5163f0b-da5d-4002-80c5-b8fc356cba5b",
              "description": "Routes for PATCH requests for users",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f298b073-4fde-49d6-8a22-dc0f6709d541",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "ebf5d444-b007-4edd-83cd-07087e19d68b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [""]
                  }
                }
              ]
            },
            {
              "name": "DELETE",
              "item": [
                {
                  "name": "DELETE /api/users/{{user_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "3a15f668-4c18-4461-a613-fc66351adc81",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Select a random user from the list\r",
                          "            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
                          "\r",
                          "            console.log(\"Selected User:\", randomUser);\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"user_id\", randomUser._id);\r",
                          "            console.log(\"User ID set:\", randomUser._id);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"user_id\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "fb1134dc-7505-42d9-9fa7-4e08c4a12cc9",
                        "exec": [
                          "pm.test(\"Status code is 200, 404 or 500\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "f62ca504-4d17-438d-a73a-31fbb11afdc0",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/{{user_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "{{user_id}}"]
                    }
                  },
                  "response": [
                    {
                      "id": "7aa4a74d-119f-402e-8628-9db5c8c8bf4e",
                      "name": "OK 200",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{SERVER_URL}}/api/users/{{user_id}}",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "users", "{{user_id}}"]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "8a553de0-7ac1-4b65-bfb0-578f6530b72d"
                        },
                        {
                          "key": "Cache-Control",
                          "value": "public, max-age=0, must-revalidate",
                          "uuid": "a7a1642d-35c4-4e2c-8bf8-ba8b90034b0f"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "da20a355-c288-4f34-927f-d077dfb24eff"
                        },
                        {
                          "key": "Content-Length",
                          "value": "148",
                          "uuid": "e0f248ba-870d-4c21-9631-8834e9cf9adb"
                        },
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "73e18226-12b8-47ce-948b-04f891d4a9cc"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "uuid": "0f84001d-6103-4478-a213-d6d2b1f415d3"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "b29bacd7-cc02-41d0-a616-1b6d198af6ea"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "e3df05e7-9371-4fed-bf80-8a42e7a318ba"
                        },
                        {
                          "key": "Date",
                          "value": "Wed, 12 Feb 2025 15:00:09 GMT",
                          "uuid": "089840a0-dd22-4f9c-9a41-a2c60c112840"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "357cc6ee-04b9-41bf-a342-9a0e92bb5c49"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "147bc7e8-be02-4cb5-a6a8-c327e45ce723"
                        },
                        {
                          "key": "Server",
                          "value": "Vercel",
                          "uuid": "e7bb398f-6a72-4c46-b869-9950d403227f"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "04b958b5-ea08-4af9-9055-f3f968121743"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin, Accept-Encoding",
                          "uuid": "acbc9aeb-c31c-41d8-b219-4573bed3f7a6"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "bbca7e7f-b122-4e03-adb6-82e75b57b008"
                        },
                        {
                          "key": "X-Dns-Prefetch-Control",
                          "value": "off",
                          "uuid": "1c654b8e-dde2-43c0-9b64-e3e4fa5e2eda"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "87ba11f4-62b0-436c-9f28-c1d725e7c814"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "f6a4d609-b85a-43cc-aff5-e5ad19aac27b"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "ee7f744e-46e4-4c90-b046-c869f3a27298"
                        },
                        {
                          "key": "X-Vercel-Cache",
                          "value": "MISS",
                          "uuid": "b36b14fc-1d37-4419-aa8c-12f423189780"
                        },
                        {
                          "key": "X-Vercel-Id",
                          "value": "bom1::iad1::grj8p-1739372408742-4b990d731087",
                          "uuid": "c102d1ee-8ff4-49d1-8e78-18804c0b3e47"
                        },
                        {
                          "key": "X-Xss-Protection",
                          "value": "0",
                          "uuid": "f527ee3f-12d0-4422-9e54-aa0597aafaed"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"meta\": {\n        \"route\": \"/67ab361c693c7beef483e4eb\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: Users with ID \\\"67ab361c693c7beef483e4eb\\\" deleted successfully.\"\n    },\n    \"data\": {},\n    \"errors\": {}\n}"
                    }
                  ]
                },
                {
                  "name": "DELETE /api/users/delete/{{user_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "747d493d-82e4-4db0-944b-0fba58aef83a",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Select a random user from the list\r",
                          "            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
                          "\r",
                          "            console.log(\"Selected User:\", randomUser);\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"user_id\", randomUser._id);\r",
                          "            console.log(\"User ID set:\", randomUser._id);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"user_id\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "75fa4b81-f145-4166-9b3d-8e0398c49b3d",
                        "exec": [
                          "pm.test(\"Status code is 200, 404 or 500\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "f0bdc42e-7533-4ca2-88b5-00f61ec89eb4",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/delete/{{user_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "delete", "{{user_id}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "DELETE /api/users/destroy/{{user_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "7bea6799-4f78-4d1e-bd09-0a342453b343",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Select a random user from the list\r",
                          "            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
                          "\r",
                          "            console.log(\"Selected User:\", randomUser);\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"user_id\", randomUser._id);\r",
                          "            console.log(\"User ID set:\", randomUser._id);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"user_id\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "5243e8d8-3a46-4b87-bc3a-e2491f77d02d",
                        "exec": [
                          "pm.test(\"Status code is 200, 404 or 500\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 500]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "  pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "84546091-dc6a-4788-877d-cd2bad81e67d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/destroy/{{user_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "destroy", "{{user_id}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "DELETE /api/users?ids={{docIds}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "682bf743-1198-4b47-996c-674819d17689",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Extract all user IDs\r",
                          "            const userIds = users.map(user => user._id);\r",
                          "\r",
                          "            // Convert the array of IDs into a comma-separated string\r",
                          "            const ids = userIds.join(',');\r",
                          "\r",
                          "            // Set as an environment variable\r",
                          "            pm.environment.set(\"docIds\", ids);\r",
                          "\r",
                          "            console.log(\"Document IDs set:\", ids);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"docIds\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "def5c9e0-7b92-4a2c-b832-be2eb520b089",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "b22b5030-a62c-4016-92cb-acdb553cc6e5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users?ids={{docIds}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users"],
                      "query": [
                        {
                          "key": "ids",
                          "value": "{{docIds}}"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "a1fdf94f-5de3-4591-ae2c-72a4024c71d5",
                      "name": "OK 200",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{SERVER_URL}}/api/users?ids={{docIds}}",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "users"],
                          "query": [
                            {
                              "key": "ids",
                              "value": "{{docIds}}"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "74e0e960-6180-47be-be2c-cce5f6eca590"
                        },
                        {
                          "key": "Cache-Control",
                          "value": "public, max-age=0, must-revalidate",
                          "uuid": "1e53b7c4-3a2c-4f4f-8caf-04202f60ac6f"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "3e3c6241-5542-4686-82e6-a84334bbcb40"
                        },
                        {
                          "key": "Content-Length",
                          "value": "196",
                          "uuid": "b4df717a-a037-4ab3-a9e3-402e7aaf4766"
                        },
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "c5d1d47a-f9e2-40f1-8c7c-f24e220c7308"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "uuid": "50be5af4-f9bd-4965-aed4-0cf4d49b3ddb"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "c0ea89fc-b725-464e-a47f-9e44dcdac84e"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "19767779-232d-474f-a965-3b7b88f02410"
                        },
                        {
                          "key": "Date",
                          "value": "Wed, 12 Feb 2025 15:00:27 GMT",
                          "uuid": "b8139ac5-ef5f-4568-912e-9043412cd425"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "18202a01-56b2-409c-a804-9c3154c4dd41"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "d5d15f74-a87c-44a0-9fd9-871c4a2b3437"
                        },
                        {
                          "key": "Server",
                          "value": "Vercel",
                          "uuid": "8712e6ea-e45c-4733-b77d-69e9edf25465"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "321edbbb-1b9c-4377-b7b5-50cf5c46aea6"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin, Accept-Encoding",
                          "uuid": "085c1b2c-64cc-4b5a-a632-25a4ae441ec5"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "bfd3ccf5-e3ed-483c-a1b3-deddf8937a5c"
                        },
                        {
                          "key": "X-Dns-Prefetch-Control",
                          "value": "off",
                          "uuid": "1989fd9e-f26b-4ca5-a5b4-9a29974cd6cd"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "9f8736a7-3c56-4b49-aec8-8c7696d1f82b"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "5e71a742-5c43-4448-8ec6-b869de5e47d9"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "c6dcf3e3-5ec1-4351-88a7-c48d5bae0330"
                        },
                        {
                          "key": "X-Vercel-Cache",
                          "value": "MISS",
                          "uuid": "4112e52e-2361-4c83-9f05-905e3847ef51"
                        },
                        {
                          "key": "X-Vercel-Id",
                          "value": "bom1::iad1::42m5c-1739372427091-d679d647308f",
                          "uuid": "a0c55ae2-98eb-4d7d-bb26-b3770365931c"
                        },
                        {
                          "key": "X-Xss-Protection",
                          "value": "0",
                          "uuid": "a79c7131-4ee3-4247-9e61-d9fc196b81b6"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"meta\": {\n        \"route\": \"/?ids=67ab361c693c7beef483e4fe%2C67ab361c693c7beef483e4fb%2C67ab361c693c7beef483e4f9%2C67ab361c693c7beef483e4f7%2C67ab361c693c7beef483e4f5%2C67ab361c693c7beef483e4f3%2C67ab361c693c7beef483e4f0%2C67ab361c693c7beef483e4ed%2C67ab361c693c7beef483e4e5%2C67ab361c693c7beef483e4e3\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: Users with ID: 67ab361c693c7beef483e4fe, 67ab361c693c7beef483e4fb, 67ab361c693c7beef483e4f9, 67ab361c693c7beef483e4f7, 67ab361c693c7beef483e4f5, 67ab361c693c7beef483e4f3, 67ab361c693c7beef483e4f0, 67ab361c693c7beef483e4ed, 67ab361c693c7beef483e4e5, 67ab361c693c7beef483e4e3 deleted successfully.\"\n    },\n    \"data\": {},\n    \"errors\": {}\n}"
                    },
                    {
                      "id": "fb84536c-e3a7-4eaf-b7e7-77bc2b03bc76",
                      "name": "BAD_REQUEST 400",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{SERVER_URL}}/api/users?ids={{docIds}}",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "users"],
                          "query": [
                            {
                              "key": "ids",
                              "value": "{{docIds}}"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "abba5ffd-a16a-4505-93ae-3705042116e6"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "dde5bbbf-1e4a-4e85-9a7c-7373fad5f53d"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "ab1ce8ea-6f03-4a5a-aa1c-ac973ed6bcf3"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "2d857853-4f6a-4b33-9c78-b2449daeb699"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "edf55c81-9f8e-4ca8-89ef-da4167ab66fe"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "e91a85d2-2cc7-4f2b-b055-8f5d87a328b5"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "79c3d589-6316-497c-93b8-4cd5452b9a55"
                        },
                        {
                          "key": "X-DNS-Prefetch-Control",
                          "value": "off",
                          "uuid": "514969ee-36e3-403f-beba-c0f1a88c4db3"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "9687fcbb-66bf-4c2b-912f-eafd4dfc17fe"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "242f9568-4054-4542-b197-530f34c3dda4"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "17e556f0-d38a-41aa-b608-a661c33d36e7"
                        },
                        {
                          "key": "X-XSS-Protection",
                          "value": "0",
                          "uuid": "14cd743e-15be-4547-addc-f6f3d8df2306"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin, Accept-Encoding",
                          "uuid": "a1d4fffb-225d-4743-8844-9385ea365724"
                        },
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "54aba648-0a25-4f06-aace-2c98e68dc443"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "11dea281-cd4b-40ea-a0c2-8abccfaa6a06"
                        },
                        {
                          "key": "Content-Length",
                          "value": "121",
                          "uuid": "48fd06b4-867a-4be7-9d31-9739c0b3e5db"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "uuid": "06e0a883-06ca-471e-afa2-7c4c9ff49eae"
                        },
                        {
                          "key": "Date",
                          "value": "Thu, 13 Feb 2025 10:40:38 GMT",
                          "uuid": "10ed2429-5820-4efb-9f32-94177b4cc80a"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "uuid": "b0acf4c1-adcc-465e-a78e-cf915de2df8a"
                        },
                        {
                          "key": "Keep-Alive",
                          "value": "timeout=5",
                          "uuid": "47758b7b-dac7-4746-8bd5-882662ef63db"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"meta\": {\n        \"route\": \"/?ids=\"\n    },\n    \"status\": {\n        \"message\": \"Bad Request: ID must be a valid MongoDB ObjectId\"\n    },\n    \"data\": {},\n    \"errors\": {}\n}"
                    }
                  ]
                },
                {
                  "name": "DELETE /api/users/delete-list?ids={{docIds}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f7d6a3b8-44c1-462a-b5f6-49959c8bdb62",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Extract all user IDs\r",
                          "            const userIds = users.map(user => user._id);\r",
                          "\r",
                          "            // Convert the array of IDs into a comma-separated string\r",
                          "            const ids = userIds.join(',');\r",
                          "\r",
                          "            // Set as an environment variable\r",
                          "            pm.environment.set(\"docIds\", ids);\r",
                          "\r",
                          "            console.log(\"Document IDs set:\", ids);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"docIds\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "b8358334-1df2-4a5a-943d-89fbe398982b",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "496f999f-f63b-4a4e-869b-1e6cfd8339dc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/delete-list?ids={{docIds}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "delete-list"],
                      "query": [
                        {
                          "key": "ids",
                          "value": "{{docIds}}"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "d52ab901-9d0c-412b-8baf-8b0e2ba246c4",
                      "name": "BAD_REQUEST 400",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{SERVER_URL}}/api/users/delete-list?ids={{docIds}}",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "users", "delete-list"],
                          "query": [
                            {
                              "key": "ids",
                              "value": "{{docIds}}"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "raw",
                      "header": [
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "afcef96c-9551-47f0-97d6-868c346a2bc7"
                        },
                        {
                          "key": "Cache-Control",
                          "value": "public, max-age=0, must-revalidate",
                          "uuid": "dcd05209-488b-4dd6-94c7-8d65bcce736a"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "ffb16b78-1712-42cc-bac9-2c7e147ee8d8"
                        },
                        {
                          "key": "Content-Length",
                          "value": "206",
                          "uuid": "d5f5fba8-7f40-497c-be43-1a89ccc273a1"
                        },
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "ba4d16b8-68fb-4fe9-b8e5-7763051a80d5"
                        },
                        {
                          "key": "Content-Type",
                          "value": "[object Object]",
                          "uuid": "2bec2234-1608-4a82-a393-11ac84f56ff4"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "80991725-d91b-4463-a5e4-448e4e7729a3"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "d0e090d4-7abb-4f9f-aa82-fe11baa9803d"
                        },
                        {
                          "key": "Date",
                          "value": "Wed, 12 Feb 2025 15:00:40 GMT",
                          "uuid": "85fc6a16-dd92-495e-9626-0ed1cfab1dcf"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "ac8a5c57-c23f-473f-91f1-bef1d175a822"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "aceefcc0-0c9b-443e-88f1-b23910bb6adc"
                        },
                        {
                          "key": "Server",
                          "value": "Vercel",
                          "uuid": "d0b3e492-06af-4f49-a141-54a50f1bf507"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "bb9839b0-af43-4100-ad95-ecaa0895b4f9"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin",
                          "uuid": "d1d1ce2d-fafa-490d-907b-82f1b704b49a"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "b0e66e3f-0ff4-4b88-a4e9-7818c6184510"
                        },
                        {
                          "key": "X-Dns-Prefetch-Control",
                          "value": "off",
                          "uuid": "2171b979-44bf-4cee-b884-50cff62d41f4"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "47c0b0ab-aee9-48f4-8f45-0b078a813aaa"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "b5d52034-3cba-4233-96e0-803208253335"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "9643496f-0939-456d-983c-edfb8596f2be"
                        },
                        {
                          "key": "X-Vercel-Cache",
                          "value": "MISS",
                          "uuid": "2c3b30fa-8b9a-4318-a20e-ebc1db7d93ea"
                        },
                        {
                          "key": "X-Vercel-Id",
                          "value": "bom1::iad1::2xnhl-1739372440450-e5b762ea2891",
                          "uuid": "6df3e1dd-911d-4da4-a3cf-607643c4e746"
                        },
                        {
                          "key": "X-Xss-Protection",
                          "value": "0",
                          "uuid": "5a3d4a34-5f1e-4ab3-9cc6-91cca3fd725d"
                        }
                      ],
                      "cookie": [],
                      "body": "{\"meta\":{\"route\":\"/delete-list?ids=67ab361c693c7beef483e4e0%2C67ab361c693c7beef483e4dd%2C67ab361c693c7beef483e4d1%2C67ab361c693c7beef483e4ca%2C67ab361c693c7beef483e4c8%2C67ab3609693c7beef483dd8f%2C67ab3609693c7beef483dd88%2C67ab3609693c7beef483dd86%2C67ab3609693c7beef483dd84%2C67ab3609693c7beef483dd82\"},\"status\":{\"message\":\"Data validation failed\"},\"data\":{},\"errors\":[{\"field\":\"id\",\"message\":\"ID must be a valid MongoDB ObjectId\"}]}"
                    }
                  ]
                },
                {
                  "name": "DELETE /api/users/delete-by-list?ids={{docIds}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "0b4ce426-afd1-4a0b-bcd9-feebb2ee3a0b",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Extract all user IDs\r",
                          "            const userIds = users.map(user => user._id);\r",
                          "\r",
                          "            // Convert the array of IDs into a comma-separated string\r",
                          "            const ids = userIds.join(',');\r",
                          "\r",
                          "            // Set as an environment variable\r",
                          "            pm.environment.set(\"docIds\", ids);\r",
                          "\r",
                          "            console.log(\"Document IDs set:\", ids);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"docIds\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "1921932a-1e55-446f-bcfd-b7dc6dff0ac0",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "f94c2633-0ad2-447d-b7d1-82c75958467b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/delete-by-list?ids={{docIds}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "delete-by-list"],
                      "query": [
                        {
                          "key": "ids",
                          "value": "{{docIds}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "DELETE /api/users/destroy-list?ids={{docIds}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "be1717f4-a528-428a-b03c-030fa04b3786",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Extract all user IDs\r",
                          "            const userIds = users.map(user => user._id);\r",
                          "\r",
                          "            // Convert the array of IDs into a comma-separated string\r",
                          "            const ids = userIds.join(',');\r",
                          "\r",
                          "            // Set as an environment variable\r",
                          "            pm.environment.set(\"docIds\", ids);\r",
                          "\r",
                          "            console.log(\"Document IDs set:\", ids);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"docIds\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "ea6f7a1a-9492-4194-b887-b97abba26da3",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "b7d41f63-bd84-43b6-ac33-20bf0307c1aa",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/destroy-list?ids={{docIds}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "destroy-list"],
                      "query": [
                        {
                          "key": "ids",
                          "value": "{{docIds}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "DELETE /api/users/destroy-by-list?ids={{docIds}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "a5248ad9-d928-45cc-86ea-4eff18d1d00b",
                        "exec": [
                          "// Send a GET request to fetch the user list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching users:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const users = responseData.data;\r",
                          "\r",
                          "        if (users && users.length > 0) {\r",
                          "            // Extract all user IDs\r",
                          "            const userIds = users.map(user => user._id);\r",
                          "\r",
                          "            // Convert the array of IDs into a comma-separated string\r",
                          "            const ids = userIds.join(',');\r",
                          "\r",
                          "            // Set as an environment variable\r",
                          "            pm.environment.set(\"docIds\", ids);\r",
                          "\r",
                          "            console.log(\"Document IDs set:\", ids);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"docIds\", '');\r",
                          "            console.log(\"No users found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "0ebf305b-0754-4163-a007-6cad3bc5debf",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "fc5c8abb-17f1-415a-b0b7-801f1a16003a",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/destroy-by-list?ids={{docIds}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "destroy-by-list"],
                      "query": [
                        {
                          "key": "ids",
                          "value": "{{docIds}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "DELETE /api/users/delete/all",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "466b438d-2988-48fa-99e3-5ca7676956a6",
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "f97b11f3-465b-4067-bc57-d68f9c350e02",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 8000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(8000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "fd03038d-ac24-4e6b-9af8-f3d2c233bb0c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/users/delete/all",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "users", "delete", "all"]
                    }
                  },
                  "response": []
                }
              ],
              "id": "5b0c12b8-f9e0-4c95-9f91-e2096f567b19",
              "description": "Routes for DELETE requests for users"
            }
          ],
          "id": "bff4c587-cd34-4928-b7e1-4575f6d921fc",
          "description": "Dynamic routes for users"
        },
        {
          "name": "admins",
          "item": [
            {
              "name": "POST",
              "item": [
                {
                  "name": "POST /api/admins/",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "6698680c-2246-4aaf-8681-d53dc3b2d17e",
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "85b7dc51-6abf-490d-af9e-05f7d0eca5b3",
                        "exec": [
                          "pm.test(\"Status code is 409 or 201\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    if (pm.response.code === 201) {",
                          "        // Ensure the response has the expected top-level keys",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.status).to.have.property('success', true);",
                          "",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'email', 'isActive', 'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(responseBody.data);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "    } else if (pm.response.code === 409) {",
                          "        // For a 409 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "    }",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "93c787a9-913b-4fde-9a17-11a7d614ec18",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"isActive\": {{$randomBoolean}}\n}\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins"]
                    }
                  },
                  "response": [
                    {
                      "id": "36aefd31-7a05-4eb0-85f3-81d66cd50bdc",
                      "name": "OK 200",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"isActive\": {{$randomBoolean}}\n}\n",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{SERVER_URL}}/api/admins",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "admins"]
                        }
                      },
                      "status": "Created",
                      "code": 201,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "5c34b756-cc88-48d9-b2a5-a9c0649721a6"
                        },
                        {
                          "key": "Cache-Control",
                          "value": "public, max-age=0, must-revalidate",
                          "uuid": "be33f991-c1ca-4e43-b0b0-cd6d097538f5"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "622c67ec-9833-47d5-a4d9-0eca29896fbf"
                        },
                        {
                          "key": "Content-Length",
                          "value": "229",
                          "uuid": "b65d42a8-31c0-40f7-8363-48ee00704178"
                        },
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "c9193db3-a6d3-4dca-91ba-8fe5fa47ab3f"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "uuid": "d20cfe84-847b-4c25-88e9-79dda1a7751b"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "a4debcc7-93a3-44eb-9670-b57eef667b89"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "a4da2275-0da2-49f0-bece-30cdb4a12920"
                        },
                        {
                          "key": "Date",
                          "value": "Wed, 12 Feb 2025 14:59:30 GMT",
                          "uuid": "8cc663bc-9cda-43ae-9d66-7113f4254454"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "5eb1efe4-5fb3-4173-9ea9-8847b2aabb27"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "e82ecb47-9134-4b45-b972-6ce0ea2c8f12"
                        },
                        {
                          "key": "Server",
                          "value": "Vercel",
                          "uuid": "8782aecd-46e7-44b8-8dbf-20e908187448"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "750cf230-eaeb-4e09-a488-4a249a3c4a3b"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin, Accept-Encoding",
                          "uuid": "c0e1dd60-724c-4876-8b73-43f56259ea8f"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "bac01be2-4413-4106-a0eb-ec49c3fceb82"
                        },
                        {
                          "key": "X-Dns-Prefetch-Control",
                          "value": "off",
                          "uuid": "ddc76f30-7839-4690-820e-4a08d582799f"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "ec6f8f88-7050-41ec-ae66-8570c58111f0"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "9877a657-5f11-431e-bb1d-ae1ecd38ba25"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "1269ec69-5a5d-4a9a-8d02-af20364aeb12"
                        },
                        {
                          "key": "X-Vercel-Cache",
                          "value": "MISS",
                          "uuid": "db78c952-90a2-4f9a-b1b5-d686f30adca3"
                        },
                        {
                          "key": "X-Vercel-Id",
                          "value": "bom1::iad1::m4hpd-1739372370221-1bf8be146daf",
                          "uuid": "78c5e3d0-1ee0-439b-8bb2-37a738066cf1"
                        },
                        {
                          "key": "X-Xss-Protection",
                          "value": "0",
                          "uuid": "a76a74cf-1410-4299-9035-fe0352362307"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"meta\": {\n        \"route\": \"/\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: New Admins created with ID \\\"67acb752e2dad2ccdcaa1bc9\\\".\"\n    },\n    \"data\": {\n        \"_id\": \"67acb752e2dad2ccdcaa1bc9\",\n        \"name\": \"Gregorio\",\n        \"email\": \"Jedediah56@yahoo.com\",\n        \"isActive\": false,\n        \"createdAt\": \"2025-02-12T14:59:30.536Z\",\n        \"updatedAt\": \"2025-02-12T14:59:30.536Z\"\n    },\n    \"errors\": {}\n}"
                    }
                  ]
                }
              ],
              "id": "4d18c2dd-ccb8-47e8-b586-0652c7a35193",
              "description": "Routes for POST requests for admins"
            },
            {
              "name": "GET",
              "item": [
                {
                  "name": "GET /api/admins/",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8a83c246-3b70-4acd-b890-7b77b3ec3869",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "const users = responseData.data;",
                          "",
                          "",
                          "pm.test(\"Response status code is 200 or 404\", function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "  const responseBody = pm.response.json();",
                          "",
                          "  // Check top-level keys",
                          "  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "",
                          "  if (pm.response.code === 200) {",
                          "      // For a successful GET request, expect a success status",
                          "      pm.expect(responseBody.status).to.have.property('success', true);",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
                          "",
                          "      // Validate that data is an array",
                          "      pm.expect(responseBody.data).to.be.an('array');",
                          "",
                          "      // For each user, validate required keys and their types",
                          "      responseBody.data.forEach(user => {",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'email', 'nid', 'isActive', 'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(user);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "      });",
                          "  } else if (pm.response.code === 409) {",
                          "      // In case of a conflict error, verify that the response is formatted as expected",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
                          "      pm.expect(responseBody.data).to.be.empty;",
                          "      pm.expect(responseBody.errors).to.be.empty;",
                          "  } else {",
                          "      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "  }",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e3d71a1d-f033-4533-8ec9-a0e6ad1346e3",
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "cf1ee8d6-e19c-462e-a1d5-cb92b3854cc1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins"]
                    }
                  },
                  "response": [
                    {
                      "id": "f50a03a7-bde6-4040-94e3-02171256c3ce",
                      "name": "OK 200",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{SERVER_URL}}/api/admins",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "admins"]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "a261e2a8-7496-4709-8df0-6b09530053d3"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "16e1cd34-3ba7-46a2-97fe-a070cf175f3b"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "70bf3f48-742c-47b0-b98b-461c63c9df8f"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "9e18b58b-8aa4-450f-a9c1-0691e91b443e"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "fb6b5f52-e1bd-41aa-a92a-5436cb95d9e4"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "5996a337-1828-4b32-8aee-0eb92a98caee"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "fea82776-c41b-4f13-8ace-f90a2a1b3535"
                        },
                        {
                          "key": "X-DNS-Prefetch-Control",
                          "value": "off",
                          "uuid": "75a817ab-5a7d-47eb-8896-b35e86676044"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "866c85b8-f345-4b92-b7f0-ae0eb25aaaeb"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "9f14923f-1723-45f2-861e-e75e24f092d9"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "902ae22e-7f95-4c19-b436-e7f7d8c82e23"
                        },
                        {
                          "key": "X-XSS-Protection",
                          "value": "0",
                          "uuid": "3b1100fd-13c8-40d4-921b-146e0ed7db54"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin, Accept-Encoding",
                          "uuid": "8e08b878-e4de-402f-b06a-8dd2d50931e4"
                        },
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "56d7afd3-aeef-4c2c-b175-7bb1d3e3b771"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "a816a000-e548-420e-bdee-9cf7d1028aeb"
                        },
                        {
                          "key": "Content-Length",
                          "value": "259",
                          "uuid": "0fafbc4c-48a8-41a7-bf76-627fa8ff5143"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "uuid": "e68ab833-c977-4896-b6ef-c45c01910217"
                        },
                        {
                          "key": "Date",
                          "value": "Thu, 13 Feb 2025 10:46:06 GMT",
                          "uuid": "9ec7b382-155d-4d28-8166-6daa611ba064"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "uuid": "9394b5ee-0e2d-4558-be62-4c51a48cb538"
                        },
                        {
                          "key": "Keep-Alive",
                          "value": "timeout=5",
                          "uuid": "519f5768-d9d7-49c1-88ec-a7eb5195108e"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"meta\": {\n        \"route\": \"/\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 1 Admins found with filters: None, sorted by '-createdAt', page 1, limit 10.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67adcd5b58b6381d08679603\",\n            \"name\": \"Ines\",\n            \"email\": \"Xavier.Robel@yahoo.com\",\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-13T10:45:47.239Z\",\n            \"updatedAt\": \"2025-02-13T10:45:47.239Z\"\n        }\n    ],\n    \"errors\": {}\n}"
                    }
                  ]
                },
                {
                  "name": "GET /api/admins/all",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "33369e1c-db1a-4482-9190-0263fa1272c4",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "const users = responseData.data;",
                          "",
                          "",
                          "pm.test(\"Response status code is 200 or 404\", function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "  const responseBody = pm.response.json();",
                          "",
                          "  // Check top-level keys",
                          "  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "",
                          "  if (pm.response.code === 200) {",
                          "      // For a successful GET request, expect a success status",
                          "      pm.expect(responseBody.status).to.have.property('success', true);",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
                          "",
                          "      // Validate that data is an array",
                          "      pm.expect(responseBody.data).to.be.an('array');",
                          "",
                          "      // For each user, validate required keys and their types",
                          "      responseBody.data.forEach(user => {",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'email', 'nid', 'isActive', 'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(user);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "      });",
                          "  } else if (pm.response.code === 409) {",
                          "      // In case of a conflict error, verify that the response is formatted as expected",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
                          "      pm.expect(responseBody.data).to.be.empty;",
                          "      pm.expect(responseBody.errors).to.be.empty;",
                          "  } else {",
                          "      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "  }",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "864a98fb-77c3-443c-ba2f-38ca8b8af8de",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins/all",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins", "all"]
                    }
                  },
                  "response": [
                    {
                      "id": "f9251de6-c586-4d08-8b62-2fa65011e633",
                      "name": "OK 200",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{SERVER_URL}}/api/admins/all",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "admins", "all"]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "3a42aa50-4908-4329-8b48-4d0d51f403ec"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "f6db3d47-5e2d-4fca-acfb-f2c6b424ab1f"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "36614545-2dd8-479b-9a17-fc1f1ffe5b53"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "79313c60-2ee9-4d61-995d-6ce2bf13069e"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "e4c2d36f-320a-4b48-9860-3484a48bde56"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "efd28ec6-506b-44e7-ba18-5b5b065b3432"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "21a3ef1f-6f56-45d1-be84-4f6c0ab5922f"
                        },
                        {
                          "key": "X-DNS-Prefetch-Control",
                          "value": "off",
                          "uuid": "f43dbbdb-4043-4f8a-b964-be628df1a2f0"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "0b69fdce-7e8a-4202-98f1-dfb896889b7e"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "eb07495e-10c2-4fa7-9b6f-71c071da76ed"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "6efd87d7-139a-4df5-9e99-dcc31d5b3b2f"
                        },
                        {
                          "key": "X-XSS-Protection",
                          "value": "0",
                          "uuid": "15656056-fbf0-467a-a0af-b6dc2163ef9e"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin, Accept-Encoding",
                          "uuid": "07d71f67-0b5d-477b-aa4d-b603cde9dc6f"
                        },
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "fc57eab8-bd05-4bf8-8ed8-950608752376"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "6079d802-9ea8-4f06-a7c0-153ede966184"
                        },
                        {
                          "key": "Content-Length",
                          "value": "260",
                          "uuid": "59e3aa7f-fa61-4ade-ad86-0f5d5a266c7e"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "uuid": "66d72ef5-ad22-4749-93f7-e93a58c8cfb8"
                        },
                        {
                          "key": "Date",
                          "value": "Thu, 13 Feb 2025 10:46:19 GMT",
                          "uuid": "ac7ab026-0ea4-40f9-9149-068bef12dcd5"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "uuid": "4326dcff-8abd-41fc-b139-f559cb90bdc4"
                        },
                        {
                          "key": "Keep-Alive",
                          "value": "timeout=5",
                          "uuid": "d52b4ef5-03c9-480e-85f3-6cf720253afa"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"meta\": {\n        \"route\": \"/all\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 1 Admins found with filters: None, sorted by '-createdAt', page 1, limit 10.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67adcd5b58b6381d08679603\",\n            \"name\": \"Ines\",\n            \"email\": \"Xavier.Robel@yahoo.com\",\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-13T10:45:47.239Z\",\n            \"updatedAt\": \"2025-02-13T10:45:47.239Z\"\n        }\n    ],\n    \"errors\": {}\n}"
                    }
                  ]
                },
                {
                  "name": "GET /api/admins/list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "5095bd7a-d34a-43fd-aeb8-c907fec89a5a",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "const users = responseData.data;",
                          "",
                          "",
                          "pm.test(\"Response status code is 200 or 404\", function () {",
                          "  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "  const responseBody = pm.response.json();",
                          "",
                          "  // Check top-level keys",
                          "  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "",
                          "  if (pm.response.code === 200) {",
                          "      // For a successful GET request, expect a success status",
                          "      pm.expect(responseBody.status).to.have.property('success', true);",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
                          "",
                          "      // Validate that data is an array",
                          "      pm.expect(responseBody.data).to.be.an('array');",
                          "",
                          "      // For each user, validate required keys and their types",
                          "      responseBody.data.forEach(user => {",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'email', 'nid', 'isActive', 'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(user);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "      });",
                          "  } else if (pm.response.code === 409) {",
                          "      // In case of a conflict error, verify that the response is formatted as expected",
                          "      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
                          "      pm.expect(responseBody.data).to.be.empty;",
                          "      pm.expect(responseBody.errors).to.be.empty;",
                          "  } else {",
                          "      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "  }",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "3931b3be-bc61-476e-93df-85139a0cf8dc",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins/list",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins", "list"]
                    }
                  },
                  "response": [
                    {
                      "id": "c66fb2da-1407-451d-b456-3ce0a251ada5",
                      "name": "OK 200",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{SERVER_URL}}/api/admins/list",
                          "host": ["{{SERVER_URL}}"],
                          "path": ["api", "admins", "list"]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Security-Policy-Report-Only",
                          "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                          "uuid": "aabcb1cb-7610-47c2-8d53-1d90564e85c3"
                        },
                        {
                          "key": "Cross-Origin-Opener-Policy",
                          "value": "same-origin",
                          "uuid": "9ecaeba1-bfbd-4b09-b89c-30fe7745834d"
                        },
                        {
                          "key": "Cross-Origin-Resource-Policy",
                          "value": "same-origin",
                          "uuid": "d69b37b7-35e4-4631-84e9-a16382e6a483"
                        },
                        {
                          "key": "Origin-Agent-Cluster",
                          "value": "?1",
                          "uuid": "460656d0-c4be-4385-84c7-33ce6d9a8519"
                        },
                        {
                          "key": "Referrer-Policy",
                          "value": "strict-origin-when-cross-origin",
                          "uuid": "49d6c95f-b4a1-42d8-b0e1-d6c535268465"
                        },
                        {
                          "key": "Strict-Transport-Security",
                          "value": "max-age=31536000; includeSubDomains",
                          "uuid": "9a888c35-c8e9-49cb-a0fd-31ad858eb92a"
                        },
                        {
                          "key": "X-Content-Type-Options",
                          "value": "nosniff",
                          "uuid": "306c7f23-b65e-4f40-b48a-071c1bb50feb"
                        },
                        {
                          "key": "X-DNS-Prefetch-Control",
                          "value": "off",
                          "uuid": "15c68ea6-f4c7-4c7a-9722-04085487dca2"
                        },
                        {
                          "key": "X-Download-Options",
                          "value": "noopen",
                          "uuid": "c12d8ac7-2484-4def-86d8-4d2ddc2b2c82"
                        },
                        {
                          "key": "X-Frame-Options",
                          "value": "SAMEORIGIN",
                          "uuid": "8895ca42-fc83-4c75-82e0-79fa9887df8d"
                        },
                        {
                          "key": "X-Permitted-Cross-Domain-Policies",
                          "value": "none",
                          "uuid": "eaec3931-f15a-4584-b7b5-490d63652ee8"
                        },
                        {
                          "key": "X-XSS-Protection",
                          "value": "0",
                          "uuid": "db5e0c7f-2b13-47dd-b732-7bc5742594a9"
                        },
                        {
                          "key": "Vary",
                          "value": "Origin, Accept-Encoding",
                          "uuid": "02d88ede-9b7d-4582-a850-2a02f50e12c3"
                        },
                        {
                          "key": "Access-Control-Allow-Credentials",
                          "value": "true",
                          "uuid": "e218da78-197d-48ac-b7d6-456ab2f8023c"
                        },
                        {
                          "key": "Content-Encoding",
                          "value": "gzip",
                          "uuid": "9da42fe5-caa3-415f-9877-534c495df96e"
                        },
                        {
                          "key": "Content-Length",
                          "value": "261",
                          "uuid": "955f1298-0d05-4ff8-b82b-085b98c11c09"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json",
                          "uuid": "0dcaccf8-3c81-41f7-9636-23317847e8e3"
                        },
                        {
                          "key": "Date",
                          "value": "Thu, 13 Feb 2025 10:46:38 GMT",
                          "uuid": "ffbf6d26-f033-4257-9847-cc3232c714da"
                        },
                        {
                          "key": "Connection",
                          "value": "keep-alive",
                          "uuid": "3b179999-6a3e-4aa6-875d-bdf78ce445b3"
                        },
                        {
                          "key": "Keep-Alive",
                          "value": "timeout=5",
                          "uuid": "d918cf0f-1566-455d-b210-2092c7a40739"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"meta\": {\n        \"route\": \"/list\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 1 Admins found with filters: None, sorted by '-createdAt', page 1, limit 10.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67adcd5b58b6381d08679603\",\n            \"name\": \"Ines\",\n            \"email\": \"Xavier.Robel@yahoo.com\",\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-13T10:45:47.239Z\",\n            \"updatedAt\": \"2025-02-13T10:45:47.239Z\"\n        }\n    ],\n    \"errors\": {}\n}"
                    }
                  ]
                },
                {
                  "name": "GET /api/admins/{{admin_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "21c15285-d700-414b-9535-9a5e349f04fd",
                        "exec": [
                          "// Send a GET request to fetch the admin list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching admins:\", err);\r",
                          "    } else {\r",
                          "        // Parse the response to extract admin data\r",
                          "        const responseData = res.json();\r",
                          "        const admins = responseData.data;\r",
                          "\r",
                          "        if (admins && admins.length > 0) {\r",
                          "            // Select a random admin from the list\r",
                          "            const randomadmin = admins[Math.floor(Math.random() * admins.length)];\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"admin_id\", randomadmin._id);\r",
                          "            console.log(\"admin ID set:\", randomadmin._id);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"admin_id\", '');\r",
                          "            console.log(\"No admins found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "28a109ce-0091-405b-8019-7334d9de18e2",
                        "exec": [
                          "const responseData = pm.response.json();",
                          "",
                          "",
                          "pm.test(\"Status code is 200 or 404\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content-Type header is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    if (pm.response.code === 200) {",
                          "        // Ensure the response has the expected top-level keys",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(responseBody.status).to.have.property('success', true);",
                          "",
                          "        // List of allowed keys in the data object",
                          "        const allowedKeys = [",
                          "            '_id', 'name', 'email', 'nid', 'isActive', 'createdAt', 'updatedAt'",
                          "        ];",
                          "",
                          "        // Get the actual keys present in the data object",
                          "        const dataKeys = Object.keys(responseBody.data);",
                          "",
                          "        // Loop through each key in the data object and verify it is allowed",
                          "        dataKeys.forEach(function(key) {",
                          "            pm.expect(allowedKeys).to.include(key);",
                          "        });",
                          "    } else if (pm.response.code === 404) {",
                          "        // For a 409 response, check that the expected keys exist and that",
                          "        // both data and errors are empty objects.",
                          "        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "        pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "        pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "    } else {",
                          "        pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
                          "    }",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "633795c8-91c0-4354-a754-5c058759bc1c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins/{{admin_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins", "{{admin_id}}"]
                    }
                  },
                  "response": []
                }
              ],
              "id": "65491ff7-8fb9-4880-b043-e339f3ef8521",
              "description": "Routes for GET requests for admins"
            },
            {
              "name": "PATCH",
              "item": [
                {
                  "name": "PATCH /api/admins/{{admin_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "6a5ce531-a1ef-4e14-8b90-fca6fa89cd3b",
                        "exec": [
                          "// Step 1: Fetch the admin list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching admins:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const admins = responseData.data;\r",
                          "\r",
                          "        if (admins && admins.length > 0) {\r",
                          "            // Step 2: Select a random admin\r",
                          "            const randomadmin = admins[Math.floor(Math.random() * admins.length)];\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"admin_id\", randomadmin._id);\r",
                          "            console.log(\"admin ID set:\", randomadmin._id);\r",
                          "\r",
                          "            // Step 3: Generate random data\r",
                          "            const randomId = Math.floor(Math.random() * 1000);\r",
                          "            const isActive = Math.random() < 0.5;\r",
                          "\r",
                          "            const names = [\"Admin John Doe\", \"Admin Jane Smith\", \"Admin Alice Johnson\", \"Admin Michael Brown\", \"Admin Emily Davis\"];\r",
                          "            const randomName = names[Math.floor(Math.random() * names.length)];\r",
                          "\r",
                          "            pm.environment.set(\"name\", randomName);\r",
                          "            pm.environment.set(\"email\", `admin${randomId}@example.com`);\r",
                          "            pm.environment.set(\"isActive\", isActive);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"admin_id\", '');\r",
                          "            console.log(\"No admins found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "7910ce83-e81f-4169-827c-49d7d9f3bba9",
                        "exec": [
                          "pm.test(\"Response status code is 200\", function () {",
                          "  pm.response.to.have.status(200);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content-Type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                          "});",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"Meta object should exist and be an object\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
                          "});",
                          "",
                          "",
                          "pm.test(\"Status object should exist and have properties\", function () {",
                          "  const responseData = pm.response.json();",
                          "  ",
                          "  pm.expect(responseData).to.be.an('object');",
                          "  pm.expect(responseData.status).to.exist.and.to.be.an('object');",
                          "  pm.expect(responseData.status.success).to.exist.and.to.be.a('boolean');",
                          "  pm.expect(responseData.status.message).to.exist.and.to.be.a('string');",
                          "});",
                          "",
                          "",
                          "pm.test(\"Data object properties are present\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData.data).to.be.an('object');",
                          "    pm.expect(responseData.data).to.have.property('name');",
                          "    pm.expect(responseData.data).to.have.property('email');",
                          "    pm.expect(responseData.data).to.have.property('isActive');",
                          "    pm.expect(responseData.data).to.have.property('createdAt');",
                          "    pm.expect(responseData.data).to.have.property('updatedAt');",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "45fc0a34-dbb2-4d82-8076-586343cc005d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"{{name}}\",\n    \"email\": \"{{email}}\",\n    \"isActive\": {{isActive}}\n}\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins/{{admin_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins", "{{admin_id}}"]
                    }
                  },
                  "response": []
                }
              ],
              "id": "ac1cfe88-ed9a-4ad2-8152-bf781c2772fa",
              "description": "Routes for PATCH requests for admins"
            },
            {
              "name": "DELETE",
              "item": [
                {
                  "name": "DELETE /api/admins/{{admin_id}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f1d16a60-e613-4cfd-a34f-c0d4a67e06ef",
                        "exec": [
                          "// Send a GET request to fetch the admin list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching admins:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const admins = responseData.data;\r",
                          "\r",
                          "        if (admins && admins.length > 0) {\r",
                          "            // Select a random admin from the list\r",
                          "            const randomadmin = admins[Math.floor(Math.random() * admins.length)];\r",
                          "\r",
                          "            console.log(\"Selected admin:\", randomadmin);\r",
                          "\r",
                          "            // Set the _id as an environment variable\r",
                          "            pm.environment.set(\"admin_id\", randomadmin._id);\r",
                          "            console.log(\"admin ID set:\", randomadmin._id);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"admin_id\", '');\r",
                          "            console.log(\"No admins found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "0d9595b6-012e-4c0d-b750-0ebf592b51d2",
                        "exec": [
                          "pm.test(\"Response status code is 200\", function () {",
                          "  pm.expect(pm.response.code).to.equal(200);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content-Type header is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Validate the meta object\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
                          "});",
                          "",
                          "",
                          "pm.test(\"Ensure that the status object has a 'success' key with a value of true\", function () {",
                          "  const responseData = pm.response.json();",
                          "  ",
                          "  pm.expect(responseData.status.success).to.be.true;",
                          "});",
                          "",
                          "",
                          "pm.test(\"Data and errors objects should be empty\", function () {",
                          "  const responseData = pm.response.json();",
                          "",
                          "  pm.expect(responseData.data).to.be.an('object').that.is.empty;",
                          "  pm.expect(responseData.errors).to.be.an('object').that.is.empty;",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "53e85c87-6e7f-4ceb-892a-7e8916864467",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins/{{admin_id}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins", "{{admin_id}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "DELETE /api/admins?ids={{docIds}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "42bec59f-8c1f-4576-84aa-67aee987f422",
                        "exec": [
                          "// Send a GET request to fetch the admin list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching admins:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const admins = responseData.data;\r",
                          "\r",
                          "        console.log(admins)\r",
                          "\r",
                          "        if (admins && admins.length > 0) {\r",
                          "            // Extract all admin IDs\r",
                          "            const adminIds = admins.map(admin => admin._id);\r",
                          "\r",
                          "            // Convert the array of IDs into a comma-separated string\r",
                          "            const ids = adminIds.join(',');\r",
                          "\r",
                          "            // Set as an environment variable\r",
                          "            pm.environment.set(\"docIds\", ids);\r",
                          "\r",
                          "            console.log(\"Document IDs set:\", ids);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"docIds\", '');\r",
                          "            console.log(\"No admins found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "f587ec96-ed5e-4c6d-976f-d652e488878a",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 5000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "d7282f14-a1fa-4b28-849f-e0aadade0f5f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins?ids={{docIds}}",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins"],
                      "query": [
                        {
                          "key": "ids",
                          "value": "{{docIds}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "DELETE /api/admins/delete-list?ids={{docIds}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e42e226b-7752-46d9-b816-104c5a1d48e6",
                        "exec": [
                          "// Send a GET request to fetch the admin list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching admins:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const admins = responseData.data;\r",
                          "\r",
                          "        console.log(admins)\r",
                          "\r",
                          "        if (admins && admins.length > 0) {\r",
                          "            // Extract all admin IDs\r",
                          "            const adminIds = admins.map(admin => admin._id);\r",
                          "\r",
                          "            // Convert the array of IDs into a comma-separated string\r",
                          "            const ids = adminIds.join(',');\r",
                          "\r",
                          "            // Set as an environment variable\r",
                          "            pm.environment.set(\"docIds\", ids);\r",
                          "\r",
                          "            console.log(\"Document IDs set:\", ids);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"docIds\", '');\r",
                          "            console.log(\"No admins found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "52b22c2a-83c6-4ab6-bf80-c2d102705a8d",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Content type is application/json\", function () {\r",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Response time is less than 5000ms\", function () {\r",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Verify the response body format\", function () {\r",
                          "    const responseBody = pm.response.json();\r",
                          "\r",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');\r",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;\r",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "f4d61f7c-8216-451e-9d9f-b7d91fbd260d",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins/delete-list",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins", "delete-list"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "DELETE /api/admins/delete-by-list?ids={{docIds}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "40162a05-84ed-4d9c-aa27-ee70d6d08dd5",
                        "exec": [
                          "// Send a GET request to fetch the admin list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching admins:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const admins = responseData.data;\r",
                          "\r",
                          "        console.log(admins)\r",
                          "\r",
                          "        if (admins && admins.length > 0) {\r",
                          "            // Extract all admin IDs\r",
                          "            const adminIds = admins.map(admin => admin._id);\r",
                          "\r",
                          "            // Convert the array of IDs into a comma-separated string\r",
                          "            const ids = adminIds.join(',');\r",
                          "\r",
                          "            // Set as an environment variable\r",
                          "            pm.environment.set(\"docIds\", ids);\r",
                          "\r",
                          "            console.log(\"Document IDs set:\", ids);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"docIds\", '');\r",
                          "            console.log(\"No admins found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "9eaaef77-139b-4254-832e-1bf90c66c4c0",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Content type is application/json\", function () {\r",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Response time is less than 5000ms\", function () {\r",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Verify the response body format\", function () {\r",
                          "    const responseBody = pm.response.json();\r",
                          "\r",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');\r",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;\r",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "ce9e334a-d8ff-4351-8524-2590d38079ef",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins/delete-by-list",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins", "delete-by-list"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "DELETE /api/admins/destroy-list?ids={{docIds}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "50e6216b-a684-4932-8fa7-8e493f128c53",
                        "exec": [
                          "// Send a GET request to fetch the admin list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching admins:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const admins = responseData.data;\r",
                          "\r",
                          "        console.log(admins)\r",
                          "\r",
                          "        if (admins && admins.length > 0) {\r",
                          "            // Extract all admin IDs\r",
                          "            const adminIds = admins.map(admin => admin._id);\r",
                          "\r",
                          "            // Convert the array of IDs into a comma-separated string\r",
                          "            const ids = adminIds.join(',');\r",
                          "\r",
                          "            // Set as an environment variable\r",
                          "            pm.environment.set(\"docIds\", ids);\r",
                          "\r",
                          "            console.log(\"Document IDs set:\", ids);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"docIds\", '');\r",
                          "            console.log(\"No admins found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "f84ab132-45fd-4e7f-ab19-9cf8d5c23e06",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Content type is application/json\", function () {\r",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Response time is less than 5000ms\", function () {\r",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Verify the response body format\", function () {\r",
                          "    const responseBody = pm.response.json();\r",
                          "\r",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');\r",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;\r",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "03e4653c-e971-4940-96f9-7de265f5d3f1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins/destroy-list",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins", "destroy-list"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "DELETE /api/admins/destroy-by-list?ids={{docIds}}",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "7735d3e5-e58e-47da-8ade-5620bd2f8be6",
                        "exec": [
                          "// Send a GET request to fetch the admin list\r",
                          "pm.sendRequest({\r",
                          "    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
                          "    method: 'GET',\r",
                          "    header: {\r",
                          "        'Content-Type': 'application/json'\r",
                          "    }\r",
                          "}, function (err, res) {\r",
                          "    if (err) {\r",
                          "        console.log(\"Error fetching admins:\", err);\r",
                          "    } else {\r",
                          "        const responseData = res.json();\r",
                          "        const admins = responseData.data;\r",
                          "\r",
                          "        console.log(admins)\r",
                          "\r",
                          "        if (admins && admins.length > 0) {\r",
                          "            // Extract all admin IDs\r",
                          "            const adminIds = admins.map(admin => admin._id);\r",
                          "\r",
                          "            // Convert the array of IDs into a comma-separated string\r",
                          "            const ids = adminIds.join(',');\r",
                          "\r",
                          "            // Set as an environment variable\r",
                          "            pm.environment.set(\"docIds\", ids);\r",
                          "\r",
                          "            console.log(\"Document IDs set:\", ids);\r",
                          "        } else {\r",
                          "            pm.environment.set(\"docIds\", '');\r",
                          "            console.log(\"No admins found in the response.\");\r",
                          "        }\r",
                          "    }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "28b891c3-d054-4ef0-a6f4-a6080e98eda0",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Content type is application/json\", function () {\r",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Response time is less than 5000ms\", function () {\r",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "pm.test(\"Verify the response body format\", function () {\r",
                          "    const responseBody = pm.response.json();\r",
                          "\r",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');\r",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;\r",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "30ce5f33-a9b7-4cc7-9a2e-c7606b81d511",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins/destroy-by-list",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins", "destroy-by-list"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "DELETE /api/admin/delete/all",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "c76226db-550c-4edc-b7f8-c27ae5e12184",
                        "exec": [""],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "b4497282-8019-4010-93e8-ee8dc954550e",
                        "exec": [
                          "pm.test(\"Status code is 200, 400, 404 or 500\", function () {",
                          "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404, 500]);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Content type is application/json\", function () {",
                          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 8000ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(8000);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Verify the response body format\", function () {",
                          "    const responseBody = pm.response.json();",
                          "",
                          "    pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
                          "    pm.expect(Object.keys(responseBody.data)).to.be.empty;",
                          "    pm.expect(Object.keys(responseBody.errors)).to.be.empty;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "id": "5fb9052a-3ff6-4ee6-ae62-652222eff7ac",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{SERVER_URL}}/api/admins/delete/all",
                      "host": ["{{SERVER_URL}}"],
                      "path": ["api", "admins", "delete", "all"]
                    }
                  },
                  "response": []
                }
              ],
              "id": "69455901-a160-4387-90ed-1cf1fdba6dae",
              "description": "Routes for DELETE requests for admins"
            }
          ],
          "id": "c295f643-1488-4ad4-a930-33412f34435f",
          "description": "Dynamic routes for admins"
        },
        {
          "name": "routes-info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Content-Type is application/json\", function () {",
                  "  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"Meta object should exist and be non-empty\", function () {",
                  "  const responseData = pm.response.json();",
                  "",
                  "  pm.expect(responseData).to.be.an('object');",
                  "  pm.expect(responseData.meta).to.exist.and.to.not.be.empty;",
                  "});",
                  "",
                  "",
                  "pm.test(\"Verify success status and message in the status object\", function () {",
                  "  const responseData = pm.response.json();",
                  "  ",
                  "  pm.expect(responseData).to.have.property('status');",
                  "  pm.expect(responseData.status).to.have.property('success', true);",
                  "  pm.expect(responseData.status).to.have.property('message').that.is.a('string');",
                  "});",
                  "",
                  "",
                  "pm.test(\"Data object should contain users and admins with their respective HTTP methods and endpoints\", function () {",
                  "  const responseData = pm.response.json();",
                  "  ",
                  "  pm.expect(responseData.data).to.be.an('object');",
                  "  pm.expect(responseData.data.users).to.be.an('object');",
                  "  pm.expect(responseData.data.users.POST).to.be.an('array');",
                  "  pm.expect(responseData.data.users.GET).to.be.an('array');",
                  "  pm.expect(responseData.data.users.PATCH).to.be.an('array');",
                  "  pm.expect(responseData.data.users.DELETE).to.be.an('array');",
                  "  ",
                  "  pm.expect(responseData.data.admins).to.be.an('object');",
                  "  pm.expect(responseData.data.admins.POST).to.be.an('array');",
                  "  pm.expect(responseData.data.admins.GET).to.be.an('array');",
                  "  pm.expect(responseData.data.admins.PATCH).to.be.an('array');",
                  "  pm.expect(responseData.data.admins.DELETE).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript",
                "id": "2d0132ee-2d7e-4136-9c6f-ba6de43c868f"
              }
            }
          ],
          "id": "ccbbb139-55ef-4cd6-a146-ca0f0f5e0fbe",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{SERVER_URL}}/api/routes-info",
              "host": ["{{SERVER_URL}}"],
              "path": ["api", "routes-info"]
            }
          },
          "response": [
            {
              "id": "edda788c-338e-4cc3-be17-939f19a74541",
              "name": "OK 200",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{SERVER_URL}}/api/routes-info",
                  "host": ["{{SERVER_URL}}"],
                  "path": ["api", "routes-info"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Security-Policy-Report-Only",
                  "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                  "uuid": "97311309-6c66-4161-a89f-c1419593347a"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin",
                  "uuid": "9fb11f68-393c-4550-9a9e-8a6c57615e5f"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin",
                  "uuid": "6b2c426e-f7f5-42c5-ae57-83e3e0ef8138"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1",
                  "uuid": "2c15d19e-56c1-4cc9-8791-8784785ebe9b"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "strict-origin-when-cross-origin",
                  "uuid": "ba37a810-0586-40bd-bac6-48209b31e34a"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=31536000; includeSubDomains",
                  "uuid": "b83bb936-963e-4d23-9e30-1eedb6959c50"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff",
                  "uuid": "f7c7d022-5ecc-4fc3-874a-11397ffaa2e0"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off",
                  "uuid": "283b2a59-ae32-4dc9-9153-61eebdb1a99a"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen",
                  "uuid": "0107e3c5-e080-466f-abee-780a2855a689"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN",
                  "uuid": "f3f3e5ec-30f6-4a4c-b5fe-d58ed31cfc4a"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none",
                  "uuid": "81e8fffb-eeb9-4d05-9e8f-3c97bb73b698"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0",
                  "uuid": "0347c8b1-97ff-4f56-bd29-0965733828de"
                },
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding",
                  "uuid": "8050d038-a41d-4b7f-a366-ee7b15347ede"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true",
                  "uuid": "cbca38c4-93e8-4680-bc75-2cc21e05af17"
                },
                {
                  "key": "Content-Encoding",
                  "value": "gzip",
                  "uuid": "4282ba33-a5af-45fd-b5e8-94a36fca743e"
                },
                {
                  "key": "Content-Length",
                  "value": "344",
                  "uuid": "3b731f3d-629c-4654-9e8e-03732fafebe8"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json",
                  "uuid": "5ed96b58-4be9-460d-846d-5642b7ca48df"
                },
                {
                  "key": "Date",
                  "value": "Tue, 11 Feb 2025 11:02:53 GMT",
                  "uuid": "8a9c5f53-d8b1-440a-8c66-6a1c2c89a829"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive",
                  "uuid": "62cebdc1-8f44-4eda-bad0-5440c45352e7"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5",
                  "uuid": "53fed05f-e1fa-417a-bbf6-deb145300672"
                }
              ],
              "cookie": [],
              "body": "{\n    \"meta\": {\n        \"route\": \"/api/routes-info\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Successfully retrieved available routes.\"\n    },\n    \"data\": {\n        \"users\": {\n            \"POST\": [\n                \"/api/users/\",\n                \"/api/users/create\",\n                \"/api/users/new\",\n                \"/api/users/create/dummy\",\n                \"/api/users/create-dummy\",\n                \"/api/users/create-dummy-data\",\n                \"/api/users/create-fake\",\n                \"/api/users/create-fake-data\",\n                \"/api/users/create-sample\",\n                \"/api/users/create-sample-data\",\n                \"/api/users/generate-sample\",\n                \"/api/users/generate-sample-data\"\n            ],\n            \"GET\": [\n                \"/api/users/\",\n                \"/api/users/all\",\n                \"/api/users/list\",\n                \"/api/users/read\",\n                \"/api/users/show\",\n                \"/api/users/view\",\n                \"/api/users/:id\",\n                \"/api/users/read/:id\",\n                \"/api/users/show/:id\",\n                \"/api/users/view/:id\"\n            ],\n            \"PATCH\": [\n                \"/api/users/:id\",\n                \"/api/users/edit/:id\",\n                \"/api/users/update/:id\"\n            ],\n            \"DELETE\": [\n                \"/api/users/:id\",\n                \"/api/users/delete/:id\",\n                \"/api/users/destroy/:id\",\n                \"/api/users/\",\n                \"/api/users/delete-list\",\n                \"/api/users/delete-by-list\",\n                \"/api/users/destroy-list\",\n                \"/api/users/destroy-by-list\"\n            ]\n        },\n        \"admins\": {\n            \"POST\": [\n                \"/api/admins/\"\n            ],\n            \"GET\": [\n                \"/api/admins/\",\n                \"/api/admins/all\",\n                \"/api/admins/list\",\n                \"/api/admins/:id\"\n            ],\n            \"PATCH\": [\n                \"/api/admins/:id\"\n            ],\n            \"DELETE\": [\n                \"/api/admins/:id\",\n                \"/api/admins/\",\n                \"/api/admins/delete-list\",\n                \"/api/admins/delete-by-list\",\n                \"/api/admins/destroy-list\",\n                \"/api/admins/destroy-by-list\"\n            ]\n        }\n    },\n    \"errors\": {}\n}"
            },
            {
              "id": "ad310463-c634-4dea-9704-0f337a2eb660",
              "name": "NOT_FOUND 404",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{SERVER_URL}}/api/routes-infos",
                  "host": ["{{SERVER_URL}}"],
                  "path": ["api", "routes-infos"]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "raw",
              "header": [
                {
                  "key": "Content-Security-Policy-Report-Only",
                  "value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
                  "uuid": "c7383922-1c61-402e-b27d-393d5931af5a"
                },
                {
                  "key": "Cross-Origin-Opener-Policy",
                  "value": "same-origin",
                  "uuid": "7007e427-b5ea-4b56-8576-6e7fc7f52476"
                },
                {
                  "key": "Cross-Origin-Resource-Policy",
                  "value": "same-origin",
                  "uuid": "923030e5-13b9-4455-a9f5-a985c81ac261"
                },
                {
                  "key": "Origin-Agent-Cluster",
                  "value": "?1",
                  "uuid": "cd158060-0cc1-4a9d-9a8d-d984c2226e91"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "strict-origin-when-cross-origin",
                  "uuid": "739015c8-832a-4f5d-9434-9eb316d4aa95"
                },
                {
                  "key": "Strict-Transport-Security",
                  "value": "max-age=31536000; includeSubDomains",
                  "uuid": "4d0f5129-205f-49d5-ab9f-a7c9129a8584"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff",
                  "uuid": "d1f10a4a-b678-419b-87c6-d8b88f9a9cfc"
                },
                {
                  "key": "X-DNS-Prefetch-Control",
                  "value": "off",
                  "uuid": "a1e59fa4-4d36-4c2a-9cc4-50fb700dc2e3"
                },
                {
                  "key": "X-Download-Options",
                  "value": "noopen",
                  "uuid": "44405e9e-d102-454c-8051-b89c3d52e02c"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "SAMEORIGIN",
                  "uuid": "003ec2da-f538-4882-a555-f4df8b73a62c"
                },
                {
                  "key": "X-Permitted-Cross-Domain-Policies",
                  "value": "none",
                  "uuid": "00719280-b18e-460a-942f-5738c5983d26"
                },
                {
                  "key": "X-XSS-Protection",
                  "value": "0",
                  "uuid": "22c4bdde-4ab4-4f13-b96c-75e9aafbdcbe"
                },
                {
                  "key": "Vary",
                  "value": "Origin",
                  "uuid": "d9eb9146-7f4a-411a-8abe-3171f9ec65e8"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true",
                  "uuid": "f267cc2d-b86a-4d11-865f-aa7cb961d9b8"
                },
                {
                  "key": "Content-Encoding",
                  "value": "gzip",
                  "uuid": "bbdb3983-1241-47f3-9a40-f9ed86e5a1d2"
                },
                {
                  "key": "Content-Length",
                  "value": "121",
                  "uuid": "3ca91748-8589-41e3-b9bd-b6ac0d02811a"
                },
                {
                  "key": "Content-Type",
                  "value": "[object Object]",
                  "uuid": "f14ff759-0a8a-47dc-9d8c-c09d3b12c8ff"
                },
                {
                  "key": "Date",
                  "value": "Tue, 11 Feb 2025 11:03:07 GMT",
                  "uuid": "1e2b4be8-2e77-4f25-a23f-6d38fe78c072"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive",
                  "uuid": "31890029-db70-4df4-9fce-791bee893405"
                },
                {
                  "key": "Keep-Alive",
                  "value": "timeout=5",
                  "uuid": "766fe19e-05b0-48b1-a324-d6056436234f"
                }
              ],
              "cookie": [],
              "body": "{\"meta\":{\"route\":\"/api/routes-infos\"},\"status\":{\"message\":\"Not Found: The route GET /api/routes-infos does not exist.\"},\"data\":{},\"errors\":{}}"
            }
          ]
        }
      ],
      "id": "c42cbf5c-4580-4222-82f1-2fd821723cd6"
    }
  ]
}
