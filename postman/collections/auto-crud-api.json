{
	"info": {
		"title": "auto-crud-api",
		"version": "3.0.0",
		"description": "A collection generated from dynamic API routes grouped by HTTP method."
	},
	"paths": [
		{
			"name": "users",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "POST /api/users/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da8129e0-168a-47c0-998b-9d500dd3268c",
										"exec": [
											"// Generate random data with valid name\r",
											"const randomId = Math.floor(Math.random() * 1000);\r",
											"const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
											"\r",
											"pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
											"pm.environment.set(\"phone\", randomPhone);\r",
											"pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ed85972-c839-4a64-ab3d-4fc073ad27a9",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"\r",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });\r",
											"\r",
											"\r",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });\r",
											"\r",
											"\r",
											"pm.test(\"Verify the response body format\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    if (pm.response.code === 201) {\r",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');\r",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');\r",
											"        pm.expect(responseBody.status).to.have.property('success', true);\r",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success: New Users created with ID\"); // More flexible message check\r",
											"        pm.expect(responseBody.data).to.have.all.keys('_id', 'name', 'avatarUrl', 'email', 'nid', 'phone', 'bio', 'portfolio', 'age', 'isActive', 'createdAt', 'updatedAt');\r",
											"\r",
											"        // Dynamically check types and values within data\r",
											"        pm.expect(responseBody.data._id).to.be.a('string');\r",
											"        pm.expect(responseBody.data.name).to.be.a('string');\r",
											"        pm.expect(responseBody.data.avatarUrl).to.be.a('string');\r",
											"        pm.expect(responseBody.data.email).to.be.a('string');\r",
											"        pm.expect(responseBody.data.nid).to.be.a('string');\r",
											"        pm.expect(responseBody.data.phone).to.be.a('string');\r",
											"        pm.expect(responseBody.data.bio).to.be.a('string');\r",
											"        pm.expect(responseBody.data.portfolio).to.be.a('string');\r",
											"        pm.expect(responseBody.data.age).to.be.a('number');\r",
											"        pm.expect(responseBody.data.isActive).to.be.a('boolean');\r",
											"        pm.expect(responseBody.data.createdAt).to.be.a('string');\r",
											"        pm.expect(responseBody.data.updatedAt).to.be.a('string');\r",
											"\r",
											"        // You can add more specific value checks here if needed, for example:\r",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain\r",
											"\r",
											"    } else if (pm.response.code === 409) {\r",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');\r",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');\r",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check\r",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty\r",
											"        pm.expect(responseBody.errors).to.be.empty;\r",
											"    } else {\r",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "daf75592-cf54-43a6-befa-62235ce18bdc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{$randomFirstName}}\",\n    \"avatarUrl\": \"{{$randomAvatarImage}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{$randomLoremSentence}}\",\n    \"portfolio\": \"{{$randomUrl}}\",\n    \"age\": {{age}},\n    \"isActive\": {{$randomBoolean}}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}/api/users",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": [
								{
									"id": "14da3a85-3d13-44f1-a2c9-4c5b7b7f0ef8",
									"name": "OK 201",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/users",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy-Report-Only",
											"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
											"uuid": "b90f2e7e-1b5d-4b9b-8beb-a0a701896ae7"
										},
										{
											"key": "Cross-Origin-Opener-Policy",
											"value": "same-origin",
											"uuid": "f6027205-f2fd-4faa-b845-59e5e9c77804"
										},
										{
											"key": "Cross-Origin-Resource-Policy",
											"value": "same-origin",
											"uuid": "62376eda-ba99-4d19-8107-96aeef2ab4cd"
										},
										{
											"key": "Origin-Agent-Cluster",
											"value": "?1",
											"uuid": "71b84e57-4c45-42fc-980f-3cf82d2b9b58"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin",
											"uuid": "8c3ed1e9-37fc-4a91-826b-8b4651149740"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains",
											"uuid": "0eee7e9a-8aac-435e-ac77-8a653f075c61"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff",
											"uuid": "03daff5c-49d4-4126-862e-f035ae96310d"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off",
											"uuid": "61efc537-9f3b-427f-b440-500e14477591"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen",
											"uuid": "b6e6cfb6-a75a-40f3-9986-214837784db9"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN",
											"uuid": "3eeae9d5-0a47-4bf7-859e-3932c1a9c8af"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none",
											"uuid": "9b7a7868-18e5-4a86-8e3d-43afade5812f"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0",
											"uuid": "d6ad9d41-f003-4cd4-9220-781abf8a3cc3"
										},
										{
											"key": "Vary",
											"value": "Origin, Accept-Encoding",
											"uuid": "461b1eb2-c9d0-4302-8138-3f3380071ede"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true",
											"uuid": "22a5341c-95d3-4b80-a2eb-0b688cd9194e"
										},
										{
											"key": "RateLimit-Policy",
											"value": "100;w=60",
											"uuid": "26bf026f-0719-4a02-95cb-d09b4032b3d7"
										},
										{
											"key": "RateLimit-Limit",
											"value": "100",
											"uuid": "d1e2cf8c-861e-4e92-a87e-476525f8beee"
										},
										{
											"key": "RateLimit-Remaining",
											"value": "99",
											"uuid": "510a6c7e-7ebe-46fc-8e31-418bc6cd1a9f"
										},
										{
											"key": "RateLimit-Reset",
											"value": "60",
											"uuid": "47b688c6-509a-4246-bd18-48f9c0316e24"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"uuid": "75a7b49d-99c5-47c1-8176-a7434242cf9f"
										},
										{
											"key": "Content-Length",
											"value": "314",
											"uuid": "f47aaf90-610d-4bef-bce5-3d1ded12b654"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"uuid": "78153416-e872-4b43-bab0-f816905eefea"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Feb 2025 09:35:28 GMT",
											"uuid": "18195a79-58c4-4429-a1c8-e02c5c315616"
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"uuid": "8ae0894c-d310-4b69-9fb6-4bb9a676b6dc"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5",
											"uuid": "6723584a-4fdf-4559-83ee-014621a9a0fd"
										}
									],
									"cookie": [],
									"body": "{\n    \"meta\": {\n        \"route\": \"/\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: New Users created with ID \\\"67ab19e051cb68b48e9a9146\\\".\"\n    },\n    \"data\": {\n        \"_id\": \"67ab19e051cb68b48e9a9146\",\n        \"name\": \"Emily Davis\",\n        \"avatarUrl\": \"http://example.com/avatar.png\",\n        \"email\": \"user553@example.com\",\n        \"nid\": \"1000000553\",\n        \"phone\": \"+8801758126687\",\n        \"bio\": \"This is a sample bio.\",\n        \"portfolio\": \"http://example.com/553\",\n        \"age\": 54,\n        \"isActive\": true,\n        \"createdAt\": \"2025-02-11T09:35:28.449Z\",\n        \"updatedAt\": \"2025-02-11T09:35:28.449Z\"\n    },\n    \"errors\": {}\n}"
								},
								{
									"id": "8180ab5a-efc3-47ea-8856-a0e4776d6a9c",
									"name": "BAD_REQUEST 400",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/users",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "raw",
									"header": [
										{
											"key": "Content-Security-Policy-Report-Only",
											"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
											"uuid": "e955871b-9f5c-4556-8992-814b2868506b"
										},
										{
											"key": "Cross-Origin-Opener-Policy",
											"value": "same-origin",
											"uuid": "e95478e4-8c08-4d78-bf3e-195fe28362f2"
										},
										{
											"key": "Cross-Origin-Resource-Policy",
											"value": "same-origin",
											"uuid": "525e3571-667c-48bd-8a1f-413917987c97"
										},
										{
											"key": "Origin-Agent-Cluster",
											"value": "?1",
											"uuid": "3ea6431f-d78a-4753-929c-c85f3ce66a48"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin",
											"uuid": "8b9c7ee9-af21-4e61-81d1-a71a1ae0f15b"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains",
											"uuid": "f7129851-1e87-418f-84db-6b7189087019"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff",
											"uuid": "4185b4dc-cdeb-49c5-bd80-be552acf6494"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off",
											"uuid": "96ae5132-c4cd-4b8f-a5ee-dd80b2c9b685"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen",
											"uuid": "6bb174c6-9e6b-45a0-b90d-d80c7cc08bc8"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN",
											"uuid": "eee4ef09-78df-4745-bb99-3c00d7b9bfca"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none",
											"uuid": "666613ee-1566-4982-808a-959eccccba19"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0",
											"uuid": "e193c26f-e6af-4335-8e2d-24266280caec"
										},
										{
											"key": "Vary",
											"value": "Origin",
											"uuid": "8d74d7ce-fb5f-4093-9841-17b411877d9a"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true",
											"uuid": "d738dc7c-708e-48f0-85ba-4defb76a229f"
										},
										{
											"key": "RateLimit-Policy",
											"value": "100;w=60",
											"uuid": "e0ee6a94-32ed-4a09-ac55-3e87e8633fab"
										},
										{
											"key": "RateLimit-Limit",
											"value": "100",
											"uuid": "44f41025-272d-4d52-9031-2acf5540c993"
										},
										{
											"key": "RateLimit-Remaining",
											"value": "98",
											"uuid": "83e13026-1cc7-42c5-a8ba-c70180eea2a6"
										},
										{
											"key": "RateLimit-Reset",
											"value": "27",
											"uuid": "6c86c1fb-9509-4c40-ac8a-4b0cb1b6af06"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"uuid": "49fdfee8-796e-441a-9079-9ca5c8c22c5e"
										},
										{
											"key": "Content-Length",
											"value": "158",
											"uuid": "88fc0aca-a9b1-46f4-afc2-4ac2be4edbc0"
										},
										{
											"key": "Content-Type",
											"value": "[object Object]",
											"uuid": "80e0d047-6401-4f39-88bf-72569587b53b"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Feb 2025 09:36:01 GMT",
											"uuid": "45afe95e-528e-4070-9b63-4e0a093b3387"
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"uuid": "11986cc3-8304-4101-b113-c00b08e015fc"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5",
											"uuid": "6d7d9feb-cc59-4f80-b60b-5c02d6b11d0e"
										}
									],
									"cookie": [],
									"body": "{\"meta\":{\"route\":\"/\"},\"status\":{\"message\":\"Data validation failed\"},\"data\":{},\"errors\":[{\"field\":\"name\",\"message\":\"Name must be between 3 and 50 characters and contain only letters and spaces\"}]}"
								},
								{
									"id": "7a6070ed-4b60-42c0-94de-6156269eacac",
									"name": "FORBIDDEN 403",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/users",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy-Report-Only",
											"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
											"uuid": "b0abb85f-2a5c-456c-adb7-43797e6d03a5"
										},
										{
											"key": "Cross-Origin-Opener-Policy",
											"value": "same-origin",
											"uuid": "3d33b94a-65ab-4f77-8f0a-83a76e188beb"
										},
										{
											"key": "Cross-Origin-Resource-Policy",
											"value": "same-origin",
											"uuid": "3b830e78-d186-4fcf-8c5c-7321e13166b5"
										},
										{
											"key": "Origin-Agent-Cluster",
											"value": "?1",
											"uuid": "9d338f83-968e-46a7-a166-e6b01d2497dd"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin",
											"uuid": "96be1cac-9bd4-4ffa-94bb-a3d97967c96b"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains",
											"uuid": "42b97b43-7279-47bb-9d3f-484397652863"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff",
											"uuid": "61067c52-8a39-465a-aa25-fb7cdfcc9acf"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off",
											"uuid": "33f186a5-a250-4730-a982-dbe547d97263"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen",
											"uuid": "f1d9922b-f157-4ec1-bf42-544c91a0c9af"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN",
											"uuid": "3f67c5c6-67a8-47a9-8f17-eac6aa2a21de"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none",
											"uuid": "cc94d379-8a80-4a1c-a84a-b0134029f202"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0",
											"uuid": "b0f7f194-051f-404f-871e-9b679609a29e"
										},
										{
											"key": "Vary",
											"value": "Origin",
											"uuid": "1e97f6f6-d7a5-4968-af51-b2b98c227541"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true",
											"uuid": "e88e508d-e8e9-49f9-abe7-d447e46b9664"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"uuid": "45e0e8b1-5c37-4591-b9c7-7b5a518f21f7"
										},
										{
											"key": "Content-Length",
											"value": "102",
											"uuid": "24c67bb2-8773-47a0-81af-f47e738aa043"
										},
										{
											"key": "ETag",
											"value": "W/\"66-RMZ3/ejO/1q/Hwq4XIYQOzOO7WU\"",
											"uuid": "ccd5f731-4114-4cfc-85f3-3f379c5ee387"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Feb 2025 11:50:05 GMT",
											"uuid": "a730e9c3-2019-4978-9322-cea0dbf88988"
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"uuid": "bb64bf59-2e93-4b1c-9122-2fc33cecf171"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5",
											"uuid": "28e373f1-398d-4d07-8923-23f5c52aa640"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"Missing 'X-Site-Identifier' header in the request.\",\n    \"errorCode\": \"MISSING_IDENTIFIER_HEADER\"\n}"
								}
							]
						},
						{
							"name": "POST /api/users/create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "650d957d-7f9d-4829-b945-86ff16899023",
										"exec": [
											"// Generate random data with valid name\r",
											"const randomId = Math.floor(Math.random() * 1000);\r",
											"const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
											"const isActive = Math.random() < 0.5;\r",
											"\r",
											"// Generate a valid name (3-50 characters, letters, and spaces only)\r",
											"const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
											"const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"\r",
											"pm.environment.set(\"name\", randomName);\r",
											"pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
											"pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
											"pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
											"pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
											"pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
											"pm.environment.set(\"phone\", randomPhone);\r",
											"pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d425aaa5-fcd8-4c64-b052-3d75673f05a0",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseBody = pm.response.json();",
											"",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/create');",
											"        pm.expect(responseBody.status).to.have.property('success', true);",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success: New Users created with ID\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.have.all.keys('_id', 'name', 'avatarUrl', 'email', 'nid', 'phone', 'bio', 'portfolio', 'age', 'isActive', 'createdAt', 'updatedAt');",
											"",
											"        // Dynamically check types and values within data",
											"        pm.expect(responseBody.data._id).to.be.a('string');",
											"        pm.expect(responseBody.data.name).to.be.a('string');",
											"        pm.expect(responseBody.data.avatarUrl).to.be.a('string');",
											"        pm.expect(responseBody.data.email).to.be.a('string');",
											"        pm.expect(responseBody.data.nid).to.be.a('string');",
											"        pm.expect(responseBody.data.phone).to.be.a('string');",
											"        pm.expect(responseBody.data.bio).to.be.a('string');",
											"        pm.expect(responseBody.data.portfolio).to.be.a('string');",
											"        pm.expect(responseBody.data.age).to.be.a('number');",
											"        pm.expect(responseBody.data.isActive).to.be.a('boolean');",
											"        pm.expect(responseBody.data.createdAt).to.be.a('string');",
											"        pm.expect(responseBody.data.updatedAt).to.be.a('string');",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4b60b186-7b1b-486c-aab6-5390265e4122",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}/api/users/create",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/users/new",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d2dc817b-f7e4-4de4-9b79-0037757af45e",
										"exec": [
											"// Generate random data with valid name\r",
											"const randomId = Math.floor(Math.random() * 1000);\r",
											"const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
											"const isActive = Math.random() < 0.5;\r",
											"\r",
											"// Generate a valid name (3-50 characters, letters, and spaces only)\r",
											"const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
											"const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"\r",
											"pm.environment.set(\"name\", randomName);\r",
											"pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
											"pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
											"pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
											"pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
											"pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
											"pm.environment.set(\"phone\", randomPhone);\r",
											"pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
											"pm.environment.set(\"isActive\", isActive);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b3118d36-cdbf-473e-95e4-3db0b583563c",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseBody = pm.response.json();",
											"",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/new');",
											"        pm.expect(responseBody.status).to.have.property('success', true);",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success: New Users created with ID\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.have.all.keys('_id', 'name', 'avatarUrl', 'email', 'nid', 'phone', 'bio', 'portfolio', 'age', 'isActive', 'createdAt', 'updatedAt');",
											"",
											"        // Dynamically check types and values within data",
											"        pm.expect(responseBody.data._id).to.be.a('string');",
											"        pm.expect(responseBody.data.name).to.be.a('string');",
											"        pm.expect(responseBody.data.avatarUrl).to.be.a('string');",
											"        pm.expect(responseBody.data.email).to.be.a('string');",
											"        pm.expect(responseBody.data.nid).to.be.a('string');",
											"        pm.expect(responseBody.data.phone).to.be.a('string');",
											"        pm.expect(responseBody.data.bio).to.be.a('string');",
											"        pm.expect(responseBody.data.portfolio).to.be.a('string');",
											"        pm.expect(responseBody.data.age).to.be.a('number');",
											"        pm.expect(responseBody.data.isActive).to.be.a('boolean');",
											"        pm.expect(responseBody.data.createdAt).to.be.a('string');",
											"        pm.expect(responseBody.data.updatedAt).to.be.a('string');",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c6f2b47b-e80f-49b5-ae37-fba947deea75",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}/api/users/new",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"new"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/users/create/dummy?count={{count}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "df72f033-305d-4273-a84b-2a29bcc98150",
										"exec": [
											"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2b7ad0c5-64d3-43e9-880d-a68e66a56e22",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"        responseData.data.forEach(function (user) {",
											"            pm.expect(user).to.be.an('object');",
											"            pm.expect(user._id).to.be.a('string');",
											"            pm.expect(user.name).to.be.a('string');",
											"            pm.expect(user.avatarUrl).to.be.a('string');",
											"            pm.expect(user.email).to.be.a('string');",
											"            pm.expect(user.nid).to.be.a('string');",
											"            pm.expect(user.phone).to.be.a('string');",
											"            pm.expect(user.bio).to.be.a('string');",
											"            pm.expect(user.portfolio).to.be.a('string');",
											"            pm.expect(user.age).to.be.a('number');",
											"            pm.expect(user.isActive).to.be.a('boolean');",
											"            pm.expect(user.createdAt).to.be.a('string');",
											"            pm.expect(user.updatedAt).to.be.a('string');",
											"        });",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c42f3694-e0e6-4b8b-95fc-8d594ddb04c7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/create/dummy?count={{count}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"create",
										"dummy"
									],
									"query": [
										{
											"key": "count",
											"value": "{{count}}"
										}
									]
								}
							},
							"response": [
								{
									"id": "dd3b3e57-1d4b-4497-8165-5a607caa18e8",
									"name": "OK 200",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/create/dummy?count={{count}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"create",
												"dummy"
											],
											"query": [
												{
													"key": "count",
													"value": "{{count}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy-Report-Only",
											"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
											"uuid": "4e8f7c03-d588-4fe2-81d8-611b78d8ec1c"
										},
										{
											"key": "Cross-Origin-Opener-Policy",
											"value": "same-origin",
											"uuid": "7105608b-8601-4dc0-93f2-61c8e69783d9"
										},
										{
											"key": "Cross-Origin-Resource-Policy",
											"value": "same-origin",
											"uuid": "3a46d480-31bd-4f02-8eaa-4000136ec9af"
										},
										{
											"key": "Origin-Agent-Cluster",
											"value": "?1",
											"uuid": "32e077ab-1866-4d53-9118-5740fff9645f"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin",
											"uuid": "dace2d50-c816-4e4d-bed0-21ee9613e5cf"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains",
											"uuid": "fb4cdba7-dfde-4f88-b0fe-648fd8f1ebc5"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff",
											"uuid": "7dba5a95-23dd-450e-9fdd-9071eb497d32"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off",
											"uuid": "b4afb81e-1851-4aed-bc70-e7e5ee9e01d9"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen",
											"uuid": "253b1c8a-2c78-4dff-814d-f624cc4a200e"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN",
											"uuid": "ce0ae76e-cbac-450e-be5e-737be219cc5d"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none",
											"uuid": "cc19be1b-e485-4c2b-b8ba-7d9c107df843"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0",
											"uuid": "10e22b66-d6d9-499c-b01d-c062dcf8ca44"
										},
										{
											"key": "Vary",
											"value": "Origin, Accept-Encoding",
											"uuid": "9265aced-65cf-456d-ab21-9d9ef3609ff9"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true",
											"uuid": "467aceb9-a9b0-439b-9daf-d63af27909e7"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"uuid": "0575cd84-340a-40ea-94d4-3e0140cefb9c"
										},
										{
											"key": "Content-Length",
											"value": "6321",
											"uuid": "b8d30c45-4784-4f8c-816e-0927a7a57352"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"uuid": "00779e5d-f83d-4f29-9ab7-7259afed3177"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Feb 2025 10:33:20 GMT",
											"uuid": "02085061-b34c-46c0-80a0-2b96c66dbb42"
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"uuid": "8b835a13-d59e-4560-9956-f7c8d96d0fed"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5",
											"uuid": "74136ee9-ff37-4f6f-a150-f01e68c634b1"
										}
									],
									"cookie": [],
									"body": "{\n    \"meta\": {\n        \"route\": \"/create/dummy?count=56\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 56 Userss created with dummy data.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67ab276fe8de5d3e450769e6\",\n            \"name\": \"Usque molestiae \",\n            \"avatarUrl\": \"Templum aegrotatio\",\n            \"email\": \"jared93@gmail.com\",\n            \"nid\": \"4165601751\",\n            \"phone\": \"+01405606656\",\n            \"bio\": \"Defessus accedo fugiat utpote verecundia valeo.\",\n            \"portfolio\": \"https://example.com/PVGce\",\n            \"age\": 80,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-15T04:37:01.654Z\",\n            \"updatedAt\": \"2024-07-22T23:13:58.723Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769e8\",\n            \"name\": \"Fuga conculco am\",\n            \"avatarUrl\": \"Culpo amet demergo\",\n            \"email\": \"gabriella.rodriguez48@hotmail.com\",\n            \"nid\": \"2227024215\",\n            \"phone\": \"+01703237657\",\n            \"bio\": \"Sulum vicissitudo denique compello considero demonstro.\",\n            \"portfolio\": \"https://example.com/FUaOM\",\n            \"age\": 40,\n            \"isActive\": true,\n            \"createdAt\": \"2024-03-02T14:29:11.068Z\",\n            \"updatedAt\": \"2025-01-27T11:36:46.553Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769e9\",\n            \"name\": \"Voco aureus cano\",\n            \"avatarUrl\": \"Collum vivo\",\n            \"email\": \"luella69@hotmail.com\",\n            \"nid\": \"4020610221\",\n            \"phone\": \"8801424537746\",\n            \"bio\": \"Nisi defungo nesciunt umquam usitas nulla collum accendo valens conservo.\",\n            \"portfolio\": \"https://example.com/8jnIc\",\n            \"age\": 96,\n            \"isActive\": true,\n            \"createdAt\": \"2024-07-28T11:09:22.323Z\",\n            \"updatedAt\": \"2024-04-01T12:56:20.221Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ea\",\n            \"name\": \"Caute cotidie te\",\n            \"avatarUrl\": \"Spargo tergum\",\n            \"email\": \"harold_wisozk67@gmail.com\",\n            \"nid\": \"1024083945\",\n            \"phone\": \"01718044037\",\n            \"bio\": \"Molestiae contego tamen volaticus blanditiis tumultus crudelis adfectus.\",\n            \"portfolio\": \"https://example.com/ZtFlg\",\n            \"age\": 69,\n            \"isActive\": false,\n            \"createdAt\": \"2024-02-17T17:17:35.021Z\",\n            \"updatedAt\": \"2024-10-03T06:48:29.341Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ec\",\n            \"name\": \"Incidunt deduco \",\n            \"avatarUrl\": \"Angelus despecto\",\n            \"email\": \"myra.schmidt@yahoo.com\",\n            \"nid\": \"0519207223\",\n            \"phone\": \"8801557074366\",\n            \"bio\": \"Cauda tabella cervus ad corpus neque.\",\n            \"portfolio\": \"https://example.com/iOg9Z\",\n            \"age\": 64,\n            \"isActive\": true,\n            \"createdAt\": \"2024-03-26T12:10:13.888Z\",\n            \"updatedAt\": \"2024-11-21T04:20:07.786Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ed\",\n            \"name\": \"Ater abstergo de\",\n            \"avatarUrl\": \"Suscipit officiis\",\n            \"email\": \"darron12@gmail.com\",\n            \"nid\": \"8017579556\",\n            \"phone\": \"8801760769413\",\n            \"bio\": \"Amplus amiculum spes.\",\n            \"portfolio\": \"https://example.com/ddLKg\",\n            \"age\": 39,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-27T05:38:58.172Z\",\n            \"updatedAt\": \"2024-12-05T17:45:23.356Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ee\",\n            \"name\": \"Tonsor a adempti\",\n            \"avatarUrl\": \"Curtus custodia\",\n            \"email\": \"everardo.casper49@gmail.com\",\n            \"nid\": \"2506279295\",\n            \"phone\": \"8801848375950\",\n            \"bio\": \"Dicta error adipiscor.\",\n            \"portfolio\": \"https://example.com/1dh1A\",\n            \"age\": 43,\n            \"isActive\": true,\n            \"createdAt\": \"2024-02-17T04:59:18.749Z\",\n            \"updatedAt\": \"2024-12-14T13:09:35.570Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ef\",\n            \"name\": \"Cerno approbo de\",\n            \"avatarUrl\": \"Tenax subiungo\",\n            \"email\": \"kyla6@yahoo.com\",\n            \"nid\": \"3100963505\",\n            \"phone\": \"+8801972516004\",\n            \"bio\": \"Corrumpo benevolentia deludo.\",\n            \"portfolio\": \"https://example.com/nS0ra\",\n            \"age\": 113,\n            \"isActive\": true,\n            \"createdAt\": \"2024-08-02T12:30:00.698Z\",\n            \"updatedAt\": \"2024-11-23T16:18:39.489Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f0\",\n            \"name\": \"Coniuratio bland\",\n            \"avatarUrl\": \"Accusantium curvo\",\n            \"email\": \"bethel.nikolaus71@yahoo.com\",\n            \"nid\": \"3128702300\",\n            \"phone\": \"+8801859654199\",\n            \"bio\": \"Aspicio compono alo qui non animadverto.\",\n            \"portfolio\": \"https://example.com/MgqcE\",\n            \"age\": 36,\n            \"isActive\": true,\n            \"createdAt\": \"2024-08-22T16:07:48.867Z\",\n            \"updatedAt\": \"2024-08-21T12:21:41.959Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f1\",\n            \"name\": \"Vivo sortitus pr\",\n            \"avatarUrl\": \"Averto dolor\",\n            \"email\": \"tillman10@gmail.com\",\n            \"nid\": \"5079988777\",\n            \"phone\": \"8801516030568\",\n            \"bio\": \"Beneficium artificiose circumvenio apud ademptio.\",\n            \"portfolio\": \"https://example.com/sMhEe\",\n            \"age\": 101,\n            \"isActive\": true,\n            \"createdAt\": \"2025-01-29T12:33:32.538Z\",\n            \"updatedAt\": \"2024-04-03T09:20:45.518Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f2\",\n            \"name\": \"Umerus tener nam\",\n            \"avatarUrl\": \"Neque sophismata ex\",\n            \"email\": \"jarret_dach48@yahoo.com\",\n            \"nid\": \"0270582586\",\n            \"phone\": \"+8801920285783\",\n            \"bio\": \"Defaeco absum aestas tunc chirographum auctus.\",\n            \"portfolio\": \"https://example.com/BQfI2\",\n            \"age\": 87,\n            \"isActive\": true,\n            \"createdAt\": \"2024-08-29T15:04:02.983Z\",\n            \"updatedAt\": \"2024-07-05T22:01:37.027Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f3\",\n            \"name\": \"Tui clarus porro\",\n            \"avatarUrl\": \"Tribuo fuga sollers\",\n            \"email\": \"brandi_lockman@hotmail.com\",\n            \"nid\": \"4823128419\",\n            \"phone\": \"+01985496511\",\n            \"bio\": \"Cupio debitis depereo cibo sonitus.\",\n            \"portfolio\": \"https://example.com/edqr2\",\n            \"age\": 82,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-26T05:20:28.040Z\",\n            \"updatedAt\": \"2024-03-14T14:27:37.180Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f4\",\n            \"name\": \"Aliquam ustilo c\",\n            \"avatarUrl\": \"Conscendo\",\n            \"email\": \"fatima.runolfsson@gmail.com\",\n            \"nid\": \"1674663504\",\n            \"phone\": \"8801663526141\",\n            \"bio\": \"Deprecator aliquid spiritus suscipit alioqui angulus tamen.\",\n            \"portfolio\": \"https://example.com/HC0sA\",\n            \"age\": 23,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-10T02:04:24.815Z\",\n            \"updatedAt\": \"2024-11-06T09:10:47.112Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f5\",\n            \"name\": \"Ab pectus conspe\",\n            \"avatarUrl\": \"Nihil auxilium\",\n            \"email\": \"aditya.goyette68@hotmail.com\",\n            \"nid\": \"6574413698\",\n            \"phone\": \"+01695828022\",\n            \"bio\": \"Facilis avaritia desino ut aestivus ciminatio defungo corrumpo coaegresco.\",\n            \"portfolio\": \"https://example.com/xhQmw\",\n            \"age\": 90,\n            \"isActive\": true,\n            \"createdAt\": \"2024-04-15T06:50:43.951Z\",\n            \"updatedAt\": \"2024-06-02T04:28:32.396Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f6\",\n            \"name\": \"Confero pecus an\",\n            \"avatarUrl\": \"Totus ulciscor\",\n            \"email\": \"adolph.kunde71@yahoo.com\",\n            \"nid\": \"6164094261\",\n            \"phone\": \"01929911501\",\n            \"bio\": \"Alter turbo cernuus.\",\n            \"portfolio\": \"https://example.com/z3GiJ\",\n            \"age\": 96,\n            \"isActive\": true,\n            \"createdAt\": \"2024-11-04T09:16:20.749Z\",\n            \"updatedAt\": \"2024-07-11T04:28:53.890Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f7\",\n            \"name\": \"Demitto vos alia\",\n            \"avatarUrl\": \"Desolo deputo\",\n            \"email\": \"marian99@hotmail.com\",\n            \"nid\": \"0504320085\",\n            \"phone\": \"01482042777\",\n            \"bio\": \"Fugiat alioqui quam altus architecto colo colo sufficio.\",\n            \"portfolio\": \"https://example.com/voH76\",\n            \"age\": 42,\n            \"isActive\": false,\n            \"createdAt\": \"2024-09-25T13:06:11.678Z\",\n            \"updatedAt\": \"2024-07-12T10:52:55.251Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f8\",\n            \"name\": \"Eaque aeternus e\",\n            \"avatarUrl\": \"Corrigo esse\",\n            \"email\": \"myriam8@hotmail.com\",\n            \"nid\": \"4170951397\",\n            \"phone\": \"+8801904475854\",\n            \"bio\": \"Benigne annus carus depereo demum sapiente.\",\n            \"portfolio\": \"https://example.com/hDLti\",\n            \"age\": 105,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-23T21:56:35.849Z\",\n            \"updatedAt\": \"2025-02-02T20:51:24.590Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769f9\",\n            \"name\": \"Vinco vinco repu\",\n            \"avatarUrl\": \"Ulciscor damnatio\",\n            \"email\": \"lafayette5@gmail.com\",\n            \"nid\": \"7719992680\",\n            \"phone\": \"+8801322240239\",\n            \"bio\": \"Trepide censura quo.\",\n            \"portfolio\": \"https://example.com/RShxt\",\n            \"age\": 83,\n            \"isActive\": false,\n            \"createdAt\": \"2024-07-14T11:49:10.367Z\",\n            \"updatedAt\": \"2024-08-13T00:39:42.739Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fa\",\n            \"name\": \"Templum decet te\",\n            \"avatarUrl\": \"Curatio video cito\",\n            \"email\": \"hailie.senger16@gmail.com\",\n            \"nid\": \"9084989709\",\n            \"phone\": \"8801920949522\",\n            \"bio\": \"Tener bibo cribro censura vesper.\",\n            \"portfolio\": \"https://example.com/gG5yi\",\n            \"age\": 96,\n            \"isActive\": true,\n            \"createdAt\": \"2024-05-25T03:14:12.070Z\",\n            \"updatedAt\": \"2024-07-06T08:10:30.950Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fb\",\n            \"name\": \"Debitis tersus a\",\n            \"avatarUrl\": \"Cetera adsidue via.\",\n            \"email\": \"beryl98@gmail.com\",\n            \"nid\": \"6858515636\",\n            \"phone\": \"01802038028\",\n            \"bio\": \"Terror vito currus creta nesciunt turbo.\",\n            \"portfolio\": \"https://example.com/t61cs\",\n            \"age\": 64,\n            \"isActive\": true,\n            \"createdAt\": \"2024-06-01T06:02:23.836Z\",\n            \"updatedAt\": \"2024-02-13T04:17:15.846Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fc\",\n            \"name\": \"Nemo tandem carp\",\n            \"avatarUrl\": \"Delinquo bene\",\n            \"email\": \"gerry_pfeffer6@yahoo.com\",\n            \"nid\": \"9225230893\",\n            \"phone\": \"8801403120329\",\n            \"bio\": \"Umbra spiculum validus thesis optio sono decipio.\",\n            \"portfolio\": \"https://example.com/s4vWD\",\n            \"age\": 39,\n            \"isActive\": false,\n            \"createdAt\": \"2024-02-19T03:36:12.755Z\",\n            \"updatedAt\": \"2024-04-02T17:25:44.501Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fd\",\n            \"name\": \"Reprehenderit ce\",\n            \"avatarUrl\": \"Caecus nesciunt\",\n            \"email\": \"ruthe.maggio25@gmail.com\",\n            \"nid\": \"4087375185\",\n            \"phone\": \"+01751730054\",\n            \"bio\": \"Pauci rerum coruscus accusamus uterque.\",\n            \"portfolio\": \"https://example.com/gPdM0\",\n            \"age\": 68,\n            \"isActive\": false,\n            \"createdAt\": \"2024-02-24T06:24:38.257Z\",\n            \"updatedAt\": \"2024-03-27T04:00:29.208Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769fe\",\n            \"name\": \"Corporis comis v\",\n            \"avatarUrl\": \"Dolores coepi adamo.\",\n            \"email\": \"camren79@yahoo.com\",\n            \"nid\": \"0047494867\",\n            \"phone\": \"+01765802496\",\n            \"bio\": \"Accusator quod veritatis colo.\",\n            \"portfolio\": \"https://example.com/bv2oA\",\n            \"age\": 28,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-07T02:14:40.539Z\",\n            \"updatedAt\": \"2024-12-07T21:13:24.086Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e450769ff\",\n            \"name\": \"Appositus tenus \",\n            \"avatarUrl\": \"Ascit ater\",\n            \"email\": \"annabel_purdy@yahoo.com\",\n            \"nid\": \"0639936859\",\n            \"phone\": \"8801808175718\",\n            \"bio\": \"Capio curtus bis damnatio voluntarius arceo caute totus suscipit.\",\n            \"portfolio\": \"https://example.com/oPciC\",\n            \"age\": 107,\n            \"isActive\": true,\n            \"createdAt\": \"2024-07-17T09:01:44.244Z\",\n            \"updatedAt\": \"2024-04-16T19:42:42.813Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a00\",\n            \"name\": \"Nam statua appel\",\n            \"avatarUrl\": \"Demonstro adipiscor\",\n            \"email\": \"brody26@hotmail.com\",\n            \"nid\": \"4963682076\",\n            \"phone\": \"+01370023155\",\n            \"bio\": \"Tenus cibus eum verbum tantillus adnuo cura tutamen debilito.\",\n            \"portfolio\": \"https://example.com/ngvnY\",\n            \"age\": 80,\n            \"isActive\": false,\n            \"createdAt\": \"2024-08-12T05:13:18.054Z\",\n            \"updatedAt\": \"2024-04-23T15:29:23.435Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a01\",\n            \"name\": \"Iusto magnam cur\",\n            \"avatarUrl\": \"Perspiciatis\",\n            \"email\": \"guido72@yahoo.com\",\n            \"nid\": \"8411411792\",\n            \"phone\": \"8801315883112\",\n            \"bio\": \"Tabula appello blandior tepesco cras depromo.\",\n            \"portfolio\": \"https://example.com/gGGN6\",\n            \"age\": 77,\n            \"isActive\": false,\n            \"createdAt\": \"2024-04-10T19:54:01.148Z\",\n            \"updatedAt\": \"2024-04-25T13:26:58.518Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a02\",\n            \"name\": \"Dicta spes suppo\",\n            \"avatarUrl\": \"Subnecto tyrannus\",\n            \"email\": \"cristina13@yahoo.com\",\n            \"nid\": \"4450546006\",\n            \"phone\": \"+01807783221\",\n            \"bio\": \"Articulus amicitia sed antiquus utrum censura cur vere quisquam.\",\n            \"portfolio\": \"https://example.com/oGIzl\",\n            \"age\": 51,\n            \"isActive\": true,\n            \"createdAt\": \"2024-10-30T09:48:57.350Z\",\n            \"updatedAt\": \"2025-01-31T13:24:53.990Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a03\",\n            \"name\": \"Volaticus creber\",\n            \"avatarUrl\": \"Utrimque velociter\",\n            \"email\": \"perry.heidenreich-abshire@gmail.com\",\n            \"nid\": \"8571318683\",\n            \"phone\": \"+01844628900\",\n            \"bio\": \"Sui bibo cornu deinde tot certe.\",\n            \"portfolio\": \"https://example.com/y0kPU\",\n            \"age\": 115,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-01T06:36:28.134Z\",\n            \"updatedAt\": \"2024-04-30T12:14:13.586Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a04\",\n            \"name\": \"Caries adsuesco \",\n            \"avatarUrl\": \"Universe numquam\",\n            \"email\": \"claudie53@gmail.com\",\n            \"nid\": \"0490873132\",\n            \"phone\": \"01828531262\",\n            \"bio\": \"Desino ventosus ter.\",\n            \"portfolio\": \"https://example.com/7OiKm\",\n            \"age\": 117,\n            \"isActive\": true,\n            \"createdAt\": \"2024-05-28T12:01:56.389Z\",\n            \"updatedAt\": \"2024-03-31T11:27:28.094Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a05\",\n            \"name\": \"Sumo toties perf\",\n            \"avatarUrl\": \"Vomica tergo\",\n            \"email\": \"marley93@yahoo.com\",\n            \"nid\": \"7545461286\",\n            \"phone\": \"+01401478565\",\n            \"bio\": \"Confugo sum eligendi utrum.\",\n            \"portfolio\": \"https://example.com/hW8CB\",\n            \"age\": 72,\n            \"isActive\": false,\n            \"createdAt\": \"2024-04-13T04:52:40.603Z\",\n            \"updatedAt\": \"2024-10-29T01:56:18.368Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a06\",\n            \"name\": \"Defungo accommod\",\n            \"avatarUrl\": \"Degusto quod uredo\",\n            \"email\": \"darion33@gmail.com\",\n            \"nid\": \"6290918144\",\n            \"phone\": \"01958837049\",\n            \"bio\": \"Vos tandem aegrus.\",\n            \"portfolio\": \"https://example.com/EblFe\",\n            \"age\": 30,\n            \"isActive\": true,\n            \"createdAt\": \"2024-05-19T12:41:20.756Z\",\n            \"updatedAt\": \"2024-05-22T06:16:08.834Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a07\",\n            \"name\": \"Audio sonitus co\",\n            \"avatarUrl\": \"Demum tui ager\",\n            \"email\": \"zelma80@yahoo.com\",\n            \"nid\": \"3827989719\",\n            \"phone\": \"01588428062\",\n            \"bio\": \"Veniam sophismata combibo conatus atqui suasoria amplitudo commodi denego vivo.\",\n            \"portfolio\": \"https://example.com/GzuG9\",\n            \"age\": 56,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-21T08:58:42.212Z\",\n            \"updatedAt\": \"2024-07-26T08:43:38.586Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a08\",\n            \"name\": \"Creta advenio al\",\n            \"avatarUrl\": \"Tamdiu una\",\n            \"email\": \"savanna49@hotmail.com\",\n            \"nid\": \"8493653373\",\n            \"phone\": \"+01859947328\",\n            \"bio\": \"Territo delicate torqueo dolorem carmen.\",\n            \"portfolio\": \"https://example.com/DIUcF\",\n            \"age\": 120,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-18T07:43:18.833Z\",\n            \"updatedAt\": \"2025-01-27T21:41:42.483Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a09\",\n            \"name\": \"Pecus thymum tho\",\n            \"avatarUrl\": \"Fugit repellendus\",\n            \"email\": \"amy_conroy@gmail.com\",\n            \"nid\": \"8978868946\",\n            \"phone\": \"01397088338\",\n            \"bio\": \"Clementia depulso cupiditas mollitia velut celebrer uberrime clamo.\",\n            \"portfolio\": \"https://example.com/yEbDN\",\n            \"age\": 26,\n            \"isActive\": false,\n            \"createdAt\": \"2024-07-16T14:56:14.760Z\",\n            \"updatedAt\": \"2024-07-10T23:25:16.425Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0a\",\n            \"name\": \"Umerus vorax cal\",\n            \"avatarUrl\": \"Vomito benigne\",\n            \"email\": \"bernie.bruen-ondricka59@gmail.com\",\n            \"nid\": \"6808190207\",\n            \"phone\": \"+01422881828\",\n            \"bio\": \"Beatus verto sed voco carcer cursus.\",\n            \"portfolio\": \"https://example.com/ksRoy\",\n            \"age\": 72,\n            \"isActive\": true,\n            \"createdAt\": \"2024-02-16T11:24:14.198Z\",\n            \"updatedAt\": \"2024-09-02T13:25:53.319Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0b\",\n            \"name\": \"Advoco subnecto \",\n            \"avatarUrl\": \"Abundans damno\",\n            \"email\": \"orin.mayert@hotmail.com\",\n            \"nid\": \"3588566313\",\n            \"phone\": \"+01331438527\",\n            \"bio\": \"Credo est textus adsuesco capillus talus decumbo est vix thorax.\",\n            \"portfolio\": \"https://example.com/POvh2\",\n            \"age\": 55,\n            \"isActive\": true,\n            \"createdAt\": \"2024-06-11T10:21:41.988Z\",\n            \"updatedAt\": \"2024-07-30T16:22:51.938Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0c\",\n            \"name\": \"Assentator solli\",\n            \"avatarUrl\": \"Tepidus amo\",\n            \"email\": \"isaias_waelchi70@hotmail.com\",\n            \"nid\": \"3443123639\",\n            \"phone\": \"+8801895785858\",\n            \"bio\": \"Qui utilis conculco audax antea.\",\n            \"portfolio\": \"https://example.com/WTPlD\",\n            \"age\": 21,\n            \"isActive\": true,\n            \"createdAt\": \"2025-01-22T17:52:08.377Z\",\n            \"updatedAt\": \"2024-12-05T03:35:44.855Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0d\",\n            \"name\": \"Turpis pauper as\",\n            \"avatarUrl\": \"Nostrum et desidero\",\n            \"email\": \"marley_smitham23@yahoo.com\",\n            \"nid\": \"3655890641\",\n            \"phone\": \"01795231643\",\n            \"bio\": \"Truculenter vulgivagus vallum crinis eligendi.\",\n            \"portfolio\": \"https://example.com/jrcM7\",\n            \"age\": 45,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-17T22:37:05.681Z\",\n            \"updatedAt\": \"2024-06-28T12:53:59.732Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0e\",\n            \"name\": \"Quaerat bellicus\",\n            \"avatarUrl\": \"Aiunt antea\",\n            \"email\": \"cedrick_kuvalis@gmail.com\",\n            \"nid\": \"0031691223\",\n            \"phone\": \"01999840662\",\n            \"bio\": \"Adfectus contigo comparo custodia creator animus voco.\",\n            \"portfolio\": \"https://example.com/LccHZ\",\n            \"age\": 68,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-19T19:04:42.112Z\",\n            \"updatedAt\": \"2024-08-03T10:10:17.860Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a0f\",\n            \"name\": \"Surculus magni p\",\n            \"avatarUrl\": \"Derelinquo capto\",\n            \"email\": \"edmund_vonrueden@hotmail.com\",\n            \"nid\": \"0010936746\",\n            \"phone\": \"01434535142\",\n            \"bio\": \"Creta assentator acceptus laborum varius cur decens.\",\n            \"portfolio\": \"https://example.com/ZjuSb\",\n            \"age\": 28,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-10T13:13:04.660Z\",\n            \"updatedAt\": \"2024-07-04T22:26:38.177Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a10\",\n            \"name\": \"Viscus aspicio t\",\n            \"avatarUrl\": \"Blandior corrupti\",\n            \"email\": \"buddy85@hotmail.com\",\n            \"nid\": \"0338402204\",\n            \"phone\": \"+01725589888\",\n            \"bio\": \"Credo decretum conspergo quasi.\",\n            \"portfolio\": \"https://example.com/qmszV\",\n            \"age\": 84,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-08T05:46:06.913Z\",\n            \"updatedAt\": \"2025-02-10T05:02:15.968Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a11\",\n            \"name\": \"Strenuus vigor v\",\n            \"avatarUrl\": \"Cena tricesimus qui\",\n            \"email\": \"raegan58@gmail.com\",\n            \"nid\": \"9826221883\",\n            \"phone\": \"+01837549031\",\n            \"bio\": \"Acsi coerceo sequi arcesso.\",\n            \"portfolio\": \"https://example.com/V8uBn\",\n            \"age\": 21,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-12T12:28:07.953Z\",\n            \"updatedAt\": \"2024-09-27T08:11:52.379Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a12\",\n            \"name\": \"Turpis corrigo v\",\n            \"avatarUrl\": \"Voluptatem urbanus\",\n            \"email\": \"hazle_bins@yahoo.com\",\n            \"nid\": \"8801535029\",\n            \"phone\": \"+8801809545006\",\n            \"bio\": \"Uredo territo civis carus uterque vir.\",\n            \"portfolio\": \"https://example.com/busP9\",\n            \"age\": 40,\n            \"isActive\": false,\n            \"createdAt\": \"2024-10-26T20:51:08.661Z\",\n            \"updatedAt\": \"2024-03-16T01:49:27.253Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a13\",\n            \"name\": \"Aqua correptius \",\n            \"avatarUrl\": \"Vigilo vix apto\",\n            \"email\": \"eloy_jaskolski@gmail.com\",\n            \"nid\": \"8118323352\",\n            \"phone\": \"8801549362998\",\n            \"bio\": \"Xiphias tibi audeo vesper vicinus laudantium.\",\n            \"portfolio\": \"https://example.com/7ZKUh\",\n            \"age\": 84,\n            \"isActive\": false,\n            \"createdAt\": \"2024-07-07T17:39:32.304Z\",\n            \"updatedAt\": \"2024-03-18T19:14:27.206Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a14\",\n            \"name\": \"Centum altus app\",\n            \"avatarUrl\": \"Templum comburo\",\n            \"email\": \"irma.hermiston-ruecker@hotmail.com\",\n            \"nid\": \"4670756720\",\n            \"phone\": \"8801678481273\",\n            \"bio\": \"Terga cum claudeo cunabula cursus appono dicta quaerat astrum spes.\",\n            \"portfolio\": \"https://example.com/f7V5U\",\n            \"age\": 67,\n            \"isActive\": false,\n            \"createdAt\": \"2025-01-02T10:53:14.541Z\",\n            \"updatedAt\": \"2024-10-08T23:47:51.198Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a15\",\n            \"name\": \"Carmen vis confo\",\n            \"avatarUrl\": \"Auctor surculus\",\n            \"email\": \"annamae_gerhold58@yahoo.com\",\n            \"nid\": \"0284379838\",\n            \"phone\": \"+01724602837\",\n            \"bio\": \"Contego traho verus appello animus acidus.\",\n            \"portfolio\": \"https://example.com/HoWCH\",\n            \"age\": 108,\n            \"isActive\": false,\n            \"createdAt\": \"2024-03-07T00:11:32.612Z\",\n            \"updatedAt\": \"2024-09-01T19:50:46.405Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a16\",\n            \"name\": \"Crustulum vapulu\",\n            \"avatarUrl\": \"Rerum causa benigne\",\n            \"email\": \"anita3@gmail.com\",\n            \"nid\": \"9181455743\",\n            \"phone\": \"+01889490291\",\n            \"bio\": \"Curatio tot cura deinde tutis sonitus subiungo summa.\",\n            \"portfolio\": \"https://example.com/rXDeS\",\n            \"age\": 35,\n            \"isActive\": true,\n            \"createdAt\": \"2024-11-10T08:36:06.892Z\",\n            \"updatedAt\": \"2024-09-19T05:59:51.245Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a17\",\n            \"name\": \"Urbs clibanus vu\",\n            \"avatarUrl\": \"Vobis adulescens\",\n            \"email\": \"victoria_ledner56@gmail.com\",\n            \"nid\": \"2674253851\",\n            \"phone\": \"8801904963730\",\n            \"bio\": \"Umerus cursim cenaculum surculus cultura blanditiis.\",\n            \"portfolio\": \"https://example.com/qkLDD\",\n            \"age\": 80,\n            \"isActive\": false,\n            \"createdAt\": \"2024-06-23T17:30:33.320Z\",\n            \"updatedAt\": \"2024-08-23T02:48:38.898Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a18\",\n            \"name\": \"Tergeo unde amit\",\n            \"avatarUrl\": \"Cras occaecati iste\",\n            \"email\": \"rashawn92@gmail.com\",\n            \"nid\": \"5723803331\",\n            \"phone\": \"01965293619\",\n            \"bio\": \"Dedecor utroque creber aliquid trans.\",\n            \"portfolio\": \"https://example.com/HObzu\",\n            \"age\": 56,\n            \"isActive\": true,\n            \"createdAt\": \"2024-09-26T02:30:23.658Z\",\n            \"updatedAt\": \"2025-02-04T22:35:51.647Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a19\",\n            \"name\": \"Commemoro suasor\",\n            \"avatarUrl\": \"Coruscus curto\",\n            \"email\": \"lue.walsh25@yahoo.com\",\n            \"nid\": \"2005062830\",\n            \"phone\": \"+8801384918375\",\n            \"bio\": \"Toties adiuvo patior sulum asporto terminatio vetus viduo exercitationem.\",\n            \"portfolio\": \"https://example.com/Pijph\",\n            \"age\": 22,\n            \"isActive\": true,\n            \"createdAt\": \"2024-10-04T17:58:18.346Z\",\n            \"updatedAt\": \"2024-03-06T18:35:28.441Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1a\",\n            \"name\": \"Conitor caritas \",\n            \"avatarUrl\": \"Cenaculum uredo\",\n            \"email\": \"sage_stark37@gmail.com\",\n            \"nid\": \"8135499898\",\n            \"phone\": \"8801617432400\",\n            \"bio\": \"Vulnus vel rem.\",\n            \"portfolio\": \"https://example.com/kVf8N\",\n            \"age\": 18,\n            \"isActive\": true,\n            \"createdAt\": \"2024-06-07T04:45:25.849Z\",\n            \"updatedAt\": \"2024-06-21T13:39:45.183Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1b\",\n            \"name\": \"Curatio tenax va\",\n            \"avatarUrl\": \"Fuga quod cetera\",\n            \"email\": \"alfonzo7@hotmail.com\",\n            \"nid\": \"8258919865\",\n            \"phone\": \"+01526774098\",\n            \"bio\": \"Cimentarius ascit defetiscor spargo.\",\n            \"portfolio\": \"https://example.com/OSGJX\",\n            \"age\": 79,\n            \"isActive\": false,\n            \"createdAt\": \"2024-11-05T22:44:18.577Z\",\n            \"updatedAt\": \"2024-05-08T13:12:31.676Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1c\",\n            \"name\": \"Curriculum compo\",\n            \"avatarUrl\": \"Quos pax verbera\",\n            \"email\": \"raphaelle.crist77@gmail.com\",\n            \"nid\": \"7972140208\",\n            \"phone\": \"+8801504720084\",\n            \"bio\": \"Volutabrum vicissitudo vulgivagus votum terga.\",\n            \"portfolio\": \"https://example.com/ecR8s\",\n            \"age\": 117,\n            \"isActive\": true,\n            \"createdAt\": \"2024-07-15T09:32:38.365Z\",\n            \"updatedAt\": \"2024-02-18T01:15:28.834Z\"\n        },\n        {\n            \"_id\": \"67ab276fe8de5d3e45076a1d\",\n            \"name\": \"Claudeo accusant\",\n            \"avatarUrl\": \"Tolero velociter\",\n            \"email\": \"amely55@yahoo.com\",\n            \"nid\": \"0215393649\",\n            \"phone\": \"+8801861044705\",\n            \"bio\": \"Depono veritas solitudo comes coniecto velut admitto sonitus.\",\n            \"portfolio\": \"https://example.com/nHrXn\",\n            \"age\": 81,\n            \"isActive\": true,\n            \"createdAt\": \"2024-04-10T07:04:37.760Z\",\n            \"updatedAt\": \"2025-02-07T06:30:56.425Z\"\n        }\n    ],\n    \"errors\": {}\n}"
								},
								{
									"id": "de2d40f9-9f75-4f59-8faa-2bc78e796009",
									"name": "BAD_REQUEST 400",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users/create/dummy?counts={{count}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"create",
												"dummy"
											],
											"query": [
												{
													"key": "counts",
													"value": "{{count}}"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy-Report-Only",
											"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
											"uuid": "b548feec-adb4-41df-bde9-2b2d4c916aed"
										},
										{
											"key": "Cross-Origin-Opener-Policy",
											"value": "same-origin",
											"uuid": "69a44dfc-a599-4d48-87e4-8a56d2899c21"
										},
										{
											"key": "Cross-Origin-Resource-Policy",
											"value": "same-origin",
											"uuid": "5b7dfaf6-ed2e-45c8-95b6-78757b3521a3"
										},
										{
											"key": "Origin-Agent-Cluster",
											"value": "?1",
											"uuid": "b92d81fd-7034-4238-887c-835a632bdc55"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin",
											"uuid": "969371ff-6ad1-4be6-a23c-932509c0595f"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains",
											"uuid": "6a307ba0-1825-4118-87d1-d2a236f8af5d"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff",
											"uuid": "48f7d9a2-994b-4ecc-88f8-22d33a5a2644"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off",
											"uuid": "e953c4dd-e2e5-4411-8266-8bcff56270fc"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen",
											"uuid": "04288c18-1651-4e5e-8eb6-823190dd1f07"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN",
											"uuid": "ca8ec609-8a95-4ccf-a09e-95635d8a00d3"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none",
											"uuid": "f85609e0-0464-416e-bfc9-f8a2448a541f"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0",
											"uuid": "5c3fbe77-762e-4c01-a7cb-a4f54581c57c"
										},
										{
											"key": "Vary",
											"value": "Origin, Accept-Encoding",
											"uuid": "c37831dd-fbef-45b0-ada7-81f93832407b"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true",
											"uuid": "b0ea7113-f259-4ab6-b39d-553c25fa9cd6"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"uuid": "aaab2b2c-1a78-4730-b309-94897bffd352"
										},
										{
											"key": "Content-Length",
											"value": "142",
											"uuid": "1bf2d8b9-1cbe-41b0-bdc8-578b10f2d178"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"uuid": "10664a92-18ed-47bc-98b5-28cc63e6499c"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Feb 2025 10:37:05 GMT",
											"uuid": "6d6ccabe-2545-4cda-8728-565b40fd05e3"
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"uuid": "305a0db5-b716-41b9-b623-0a7da6d87052"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5",
											"uuid": "9d1f7d1b-5f3b-4991-a580-fb01e58a74ca"
										}
									],
									"cookie": [],
									"body": "{\n    \"meta\": {\n        \"route\": \"/create/dummy?counts=34\"\n    },\n    \"status\": {\n        \"message\": \"Bad Request: The \\\"count\\\" parameter is required to create dummy data.\"\n    },\n    \"data\": {},\n    \"errors\": {}\n}"
								}
							]
						},
						{
							"name": "POST /api/users/create-dummy?count={{count}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8c466ff2-d2f3-4414-8b80-f8a4b4d6f47c",
										"exec": [
											"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cefbcb44-8c33-49d6-8536-3277adcea8ba",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"        responseData.data.forEach(function (user) {",
											"            pm.expect(user).to.be.an('object');",
											"            pm.expect(user._id).to.be.a('string');",
											"            pm.expect(user.name).to.be.a('string');",
											"            pm.expect(user.avatarUrl).to.be.a('string');",
											"            pm.expect(user.email).to.be.a('string');",
											"            pm.expect(user.nid).to.be.a('string');",
											"            pm.expect(user.phone).to.be.a('string');",
											"            pm.expect(user.bio).to.be.a('string');",
											"            pm.expect(user.portfolio).to.be.a('string');",
											"            pm.expect(user.age).to.be.a('number');",
											"            pm.expect(user.isActive).to.be.a('boolean');",
											"            pm.expect(user.createdAt).to.be.a('string');",
											"            pm.expect(user.updatedAt).to.be.a('string');",
											"        });",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8dc38268-7d15-498b-80e6-b3ab1df0f83b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/create-dummy?count={{count}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"create-dummy"
									],
									"query": [
										{
											"key": "count",
											"value": "{{count}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/users/create-dummy-data?count={{count}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6fe73e60-3a0e-4d80-a196-6b30a9fe9c5a",
										"exec": [
											"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c669f7f8-7cf5-4d83-82a4-360bf43acac6",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"        responseData.data.forEach(function (user) {",
											"            pm.expect(user).to.be.an('object');",
											"            pm.expect(user._id).to.be.a('string');",
											"            pm.expect(user.name).to.be.a('string');",
											"            pm.expect(user.avatarUrl).to.be.a('string');",
											"            pm.expect(user.email).to.be.a('string');",
											"            pm.expect(user.nid).to.be.a('string');",
											"            pm.expect(user.phone).to.be.a('string');",
											"            pm.expect(user.bio).to.be.a('string');",
											"            pm.expect(user.portfolio).to.be.a('string');",
											"            pm.expect(user.age).to.be.a('number');",
											"            pm.expect(user.isActive).to.be.a('boolean');",
											"            pm.expect(user.createdAt).to.be.a('string');",
											"            pm.expect(user.updatedAt).to.be.a('string');",
											"        });",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "13e0443f-03d1-4e2f-a735-9ec84be0a630",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/create-dummy-data?count={{count}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"create-dummy-data"
									],
									"query": [
										{
											"key": "count",
											"value": "{{count}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/users/create-fake?count={{count}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0d051aa9-228d-4216-8ca7-e1a28d818e68",
										"exec": [
											"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bd88cc2c-3f1e-4941-90ee-94b779cb0434",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"        responseData.data.forEach(function (user) {",
											"            pm.expect(user).to.be.an('object');",
											"            pm.expect(user._id).to.be.a('string');",
											"            pm.expect(user.name).to.be.a('string');",
											"            pm.expect(user.avatarUrl).to.be.a('string');",
											"            pm.expect(user.email).to.be.a('string');",
											"            pm.expect(user.nid).to.be.a('string');",
											"            pm.expect(user.phone).to.be.a('string');",
											"            pm.expect(user.bio).to.be.a('string');",
											"            pm.expect(user.portfolio).to.be.a('string');",
											"            pm.expect(user.age).to.be.a('number');",
											"            pm.expect(user.isActive).to.be.a('boolean');",
											"            pm.expect(user.createdAt).to.be.a('string');",
											"            pm.expect(user.updatedAt).to.be.a('string');",
											"        });",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "81cb00db-e7c8-45f5-b8db-3c6884ee5f5d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/create-fake?count={{count}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"create-fake"
									],
									"query": [
										{
											"key": "count",
											"value": "{{count}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/users/create-fake-data?count={{count}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1ff10d69-5d73-4721-92f7-35b6848ea9ca",
										"exec": [
											"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "59769bf0-4140-4678-a03f-b5b225debe8a",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"        responseData.data.forEach(function (user) {",
											"            pm.expect(user).to.be.an('object');",
											"            pm.expect(user._id).to.be.a('string');",
											"            pm.expect(user.name).to.be.a('string');",
											"            pm.expect(user.avatarUrl).to.be.a('string');",
											"            pm.expect(user.email).to.be.a('string');",
											"            pm.expect(user.nid).to.be.a('string');",
											"            pm.expect(user.phone).to.be.a('string');",
											"            pm.expect(user.bio).to.be.a('string');",
											"            pm.expect(user.portfolio).to.be.a('string');",
											"            pm.expect(user.age).to.be.a('number');",
											"            pm.expect(user.isActive).to.be.a('boolean');",
											"            pm.expect(user.createdAt).to.be.a('string');",
											"            pm.expect(user.updatedAt).to.be.a('string');",
											"        });",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a4565065-2d33-41d4-bd9c-66c3a166752f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/create-fake-data?count={{count}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"create-fake-data"
									],
									"query": [
										{
											"key": "count",
											"value": "{{count}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/users/create-sample?count={{count}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2e8da93b-6acc-4e64-a45b-c4c34341937d",
										"exec": [
											"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b75473ab-b16a-472e-b357-f2d071fd4ba1",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"        responseData.data.forEach(function (user) {",
											"            pm.expect(user).to.be.an('object');",
											"            pm.expect(user._id).to.be.a('string');",
											"            pm.expect(user.name).to.be.a('string');",
											"            pm.expect(user.avatarUrl).to.be.a('string');",
											"            pm.expect(user.email).to.be.a('string');",
											"            pm.expect(user.nid).to.be.a('string');",
											"            pm.expect(user.phone).to.be.a('string');",
											"            pm.expect(user.bio).to.be.a('string');",
											"            pm.expect(user.portfolio).to.be.a('string');",
											"            pm.expect(user.age).to.be.a('number');",
											"            pm.expect(user.isActive).to.be.a('boolean');",
											"            pm.expect(user.createdAt).to.be.a('string');",
											"            pm.expect(user.updatedAt).to.be.a('string');",
											"        });",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8efd4eda-60da-463b-85b1-eda8eba7693b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/create-sample?count={{count}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"create-sample"
									],
									"query": [
										{
											"key": "count",
											"value": "{{count}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/users/create-sample-data?count={{count}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "14368f00-b2fa-4964-aeca-688482014e35",
										"exec": [
											"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0db6b8eb-81d2-4c78-a0aa-f16631bf89e5",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"        responseData.data.forEach(function (user) {",
											"            pm.expect(user).to.be.an('object');",
											"            pm.expect(user._id).to.be.a('string');",
											"            pm.expect(user.name).to.be.a('string');",
											"            pm.expect(user.avatarUrl).to.be.a('string');",
											"            pm.expect(user.email).to.be.a('string');",
											"            pm.expect(user.nid).to.be.a('string');",
											"            pm.expect(user.phone).to.be.a('string');",
											"            pm.expect(user.bio).to.be.a('string');",
											"            pm.expect(user.portfolio).to.be.a('string');",
											"            pm.expect(user.age).to.be.a('number');",
											"            pm.expect(user.isActive).to.be.a('boolean');",
											"            pm.expect(user.createdAt).to.be.a('string');",
											"            pm.expect(user.updatedAt).to.be.a('string');",
											"        });",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "17a6eddc-6ee0-4716-82db-d00d21786e66",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/create-sample-data?count={{count}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"create-sample-data"
									],
									"query": [
										{
											"key": "count",
											"value": "{{count}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/users/generate-sample?count={{count}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9937303-59b4-49c9-806e-00a7ad6b4a7a",
										"exec": [
											"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "170cbdfc-02f6-422a-a41c-5f70a3279b06",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"        responseData.data.forEach(function (user) {",
											"            pm.expect(user).to.be.an('object');",
											"            pm.expect(user._id).to.be.a('string');",
											"            pm.expect(user.name).to.be.a('string');",
											"            pm.expect(user.avatarUrl).to.be.a('string');",
											"            pm.expect(user.email).to.be.a('string');",
											"            pm.expect(user.nid).to.be.a('string');",
											"            pm.expect(user.phone).to.be.a('string');",
											"            pm.expect(user.bio).to.be.a('string');",
											"            pm.expect(user.portfolio).to.be.a('string');",
											"            pm.expect(user.age).to.be.a('number');",
											"            pm.expect(user.isActive).to.be.a('boolean');",
											"            pm.expect(user.createdAt).to.be.a('string');",
											"            pm.expect(user.updatedAt).to.be.a('string');",
											"        });",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "51316883-279f-43b1-9c1a-b340dc62e955",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/generate-sample?count={{count}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"generate-sample"
									],
									"query": [
										{
											"key": "count",
											"value": "{{count}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/users/generate-sample-data?count={{count}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8eb5874e-79b2-4e37-8142-d9385cd6916a",
										"exec": [
											"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d5736159-b5e2-48cc-8142-aa41508e2a69",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"        responseData.data.forEach(function (user) {",
											"            pm.expect(user).to.be.an('object');",
											"            pm.expect(user._id).to.be.a('string');",
											"            pm.expect(user.name).to.be.a('string');",
											"            pm.expect(user.avatarUrl).to.be.a('string');",
											"            pm.expect(user.email).to.be.a('string');",
											"            pm.expect(user.nid).to.be.a('string');",
											"            pm.expect(user.phone).to.be.a('string');",
											"            pm.expect(user.bio).to.be.a('string');",
											"            pm.expect(user.portfolio).to.be.a('string');",
											"            pm.expect(user.age).to.be.a('number');",
											"            pm.expect(user.isActive).to.be.a('boolean');",
											"            pm.expect(user.createdAt).to.be.a('string');",
											"            pm.expect(user.updatedAt).to.be.a('string');",
											"        });",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d3d0aeab-4632-4aa6-a816-38cb4795e996",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/generate-sample-data?count={{count}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"generate-sample-data"
									],
									"query": [
										{
											"key": "count",
											"value": "{{count}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "14b5d528-ca1f-41b2-825d-398c240b4ac5",
					"description": "Routes for POST requests for users"
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "GET /api/users/",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2eab55d-17f8-4af7-823c-0d25603bbcb7",
										"exec": [
											"const responseData = pm.response.json();",
											"const users = responseData.data;",
											"",
											"pm.test(\"Response status code is 200 or 404\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
											"});",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"  const responseBody = pm.response.json();",
											"",
											"  // Check top-level keys",
											"  pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"",
											"  // Validate meta properties",
											"  pm.expect(responseBody.meta).to.have.property('route', '/');",
											"",
											"  if (pm.response.code === 200) {",
											"      // For a successful GET request, expect a success status",
											"      pm.expect(responseBody.status).to.have.property('success', true);",
											"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success:\");",
											"",
											"      // Validate that data is an array",
											"      pm.expect(responseBody.data).to.be.an('array');",
											"",
											"      // For each user, validate required keys and their types",
											"      responseBody.data.forEach(user => {",
											"          pm.expect(user).to.be.an('object');",
											"          pm.expect(user).to.have.all.keys(",
											"              '_id',",
											"              'name',",
											"              'avatarUrl',",
											"              'email',",
											"              'nid',",
											"              'phone',",
											"              'bio',",
											"              'portfolio',",
											"              'age',",
											"              'isActive',",
											"              'createdAt',",
											"              'updatedAt'",
											"          );",
											"",
											"          // Check that each field is of the expected type",
											"          pm.expect(user._id).to.be.a('string');",
											"          pm.expect(user.name).to.be.a('string');",
											"          pm.expect(user.avatarUrl).to.be.a('string');",
											"          pm.expect(user.email).to.be.a('string');",
											"          pm.expect(user.nid).to.be.a('string');",
											"          pm.expect(user.phone).to.be.a('string');",
											"          pm.expect(user.bio).to.be.a('string');",
											"          pm.expect(user.portfolio).to.be.a('string');",
											"          pm.expect(user.age).to.be.a('number');",
											"          pm.expect(user.isActive).to.be.a('boolean');",
											"          pm.expect(user.createdAt).to.be.a('string');",
											"          pm.expect(user.updatedAt).to.be.a('string');",
											"      });",
											"  } else if (pm.response.code === 409) {",
											"      // In case of a conflict error, verify that the response is formatted as expected",
											"      pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Users with email\");",
											"      pm.expect(responseBody.data).to.be.empty;",
											"      pm.expect(responseBody.errors).to.be.empty;",
											"  } else {",
											"      pm.expect.fail(\"Unexpected status code: \" + pm.response.code);",
											"  }",
											"});",
											"",
											"// Define groups",
											"const groups = {",
											"  \"20s\": [],",
											"  \"30s\": [],",
											"  \"40s\": [],",
											"  \"50s\": [],",
											"  \"60s\": []",
											"};",
											"",
											"// Group users by age",
											"users.forEach(user => {",
											"  if (user.age < 30) {",
											"    groups[\"20s\"].push(user);",
											"  } else if (user.age < 40) {",
											"    groups[\"30s\"].push(user);",
											"  } else if (user.age < 50) {",
											"    groups[\"40s\"].push(user);",
											"  } else if (user.age < 60) {",
											"    groups[\"50s\"].push(user);",
											"  } else {",
											"    groups[\"60s\"].push(user);",
											"  }",
											"});",
											"",
											"// Convert groups object into an array for easier iteration in Handlebars",
											"const groupArray = [];",
											"for (let key in groups) {",
											"  if (groups[key].length > 0) {",
											"    groupArray.push({ group: key, users: groups[key] });",
											"  }",
											"}",
											"",
											"// Prepare data for the pie chart",
											"const chartLabels = groupArray.map(g => g.group);",
											"const chartCounts = groupArray.map(g => g.users.length);",
											"// Define colors for each slice of the pie chart",
											"const chartColors = [\"#3b82f6\", \"#f97316\", \"#10b981\", \"#f59e0b\", \"#8b5cf6\"];",
											"",
											"// Pre-stringify chart data to inject valid JSON into the template",
											"const chartLabelsJSON = JSON.stringify(chartLabels);",
											"const chartCountsJSON = JSON.stringify(chartCounts);",
											"const chartColorsJSON = JSON.stringify(chartColors);",
											"",
											"// Set the Handlebars template for the Visualizer with Tailwind CSS and Chart.js",
											"pm.visualizer.set(`",
											"<html>",
											"  <head>",
											"    <!-- Load Tailwind CSS from CDN -->",
											"    <script src=\"https://cdn.tailwindcss.com\"></script>",
											"",
											"    <!-- Load Chart.js from CDN -->",
											"    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
											"  </head>",
											"",
											"  <body class=\"bg-gray-100 font-sans\">",
											"    <div class=\"container mx-auto p-4\">",
											"      <!-- Pie Chart Section -->",
											"      <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden p-4\">",
											"        <h2 class=\"text-xl font-bold text-blue-500 mb-4\">User Distribution by Age Group</h2>",
											"         <canvas id=\"pieChart\" class=\"w-[25vw] mx-auto\"></canvas>",
											"      </div>",
											"      ",
											"      <!-- Tables for Each Age Group -->",
											"      {{#each groups}}",
											"        <div class=\"mb-8 bg-white shadow-lg rounded-lg overflow-hidden\">",
											"          <div class=\"bg-blue-500 px-4 py-1\">",
											"            <h2 class=\"text-lg font-bold text-white\">Age Group: {{group}}</h2>",
											"          </div>",
											"          <div class=\"overflow-x-auto\">",
											"            <table class=\"min-w-full divide-y divide-gray-200\">",
											"              <thead class=\"bg-gray-50\">",
											"                <tr>",
											"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Name</th>",
											"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Age</th>",
											"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>",
											"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Phone</th>",
											"                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Bio</th>",
											"                </tr>",
											"              </thead>",
											"              <tbody class=\"bg-white divide-y divide-gray-200\">",
											"                {{#each users}}",
											"                  <tr class=\"hover:bg-gray-100\">",
											"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{name}}</td>",
											"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{age}}</td>",
											"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{email}}</td>",
											"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{phone}}</td>",
											"                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{{bio}}</td>",
											"                  </tr>",
											"                {{/each}}",
											"              </tbody>",
											"            </table>",
											"          </div>",
											"        </div>",
											"      {{/each}}",
											"    </div>",
											"    ",
											"    <!-- Inline Script to Initialize the Pie Chart -->",
											"    <script>",
											"      // Get the 2D drawing context of the pieChart canvas",
											"      const ctx = document.getElementById('pieChart').getContext('2d');",
											"      // Create a new pie chart using Chart.js",
											"      new Chart(ctx, {",
											"        type: 'pie',",
											"        data: {",
											"          labels: {{{chartLabels}}},",
											"          datasets: [{",
											"            data: {{{chartCounts}}},",
											"            backgroundColor: {{{chartColors}}}",
											"          }]",
											"        },",
											"        options: {",
											"          responsive: true,",
											"          plugins: {",
											"            legend: {",
											"              position: 'bottom'",
											"            }",
											"          }",
											"        }",
											"      });",
											"    </script>",
											"  </body>",
											"</html>",
											"`, { ",
											"  groups: groupArray,",
											"  chartLabels: chartLabelsJSON,",
											"  chartCounts: chartCountsJSON,",
											"  chartColors: chartColorsJSON",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d293426e-81f8-47f2-82d9-93f2c8652149",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "32f8e77a-cdf0-41cf-999b-437504f87c06",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": [
								{
									"id": "8330e1b3-9b33-47a1-8b60-b7b9a96d04c9",
									"name": "OK 200",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{SERVER_URL}}/api/users",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Security-Policy-Report-Only",
											"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
											"uuid": "c744e22c-24be-4f19-83d4-dca84fdbb05d"
										},
										{
											"key": "Cross-Origin-Opener-Policy",
											"value": "same-origin",
											"uuid": "687a42ab-6b29-4bf8-935b-1943968ec582"
										},
										{
											"key": "Cross-Origin-Resource-Policy",
											"value": "same-origin",
											"uuid": "28e4b9aa-3d42-435b-aab3-237304aa93aa"
										},
										{
											"key": "Origin-Agent-Cluster",
											"value": "?1",
											"uuid": "52bc62ce-8871-47a8-a8e6-c9b3eed2e956"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin",
											"uuid": "01dd139d-a0ce-4f9e-9f9a-059807a403dc"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains",
											"uuid": "37d67d9a-f763-4898-8a51-ade73429d4d6"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff",
											"uuid": "c5016bdf-5b3a-4771-b350-172464305c4f"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off",
											"uuid": "35add1a1-c368-4cc3-9948-56984b016783"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen",
											"uuid": "88460418-975b-4e32-895b-b3485f8500aa"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN",
											"uuid": "ca77ef6e-3523-47fc-b389-15d86f0e72cf"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none",
											"uuid": "c060a917-ecaa-46ba-aadf-16253367a69b"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0",
											"uuid": "1889c217-4db0-4678-83e5-d376c5bcec5b"
										},
										{
											"key": "Vary",
											"value": "Origin, Accept-Encoding",
											"uuid": "8c3e6db3-f9bc-4230-9659-8cd4ca029108"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true",
											"uuid": "3a77b015-2c7e-4fc4-918f-bf01518e1dc8"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"uuid": "023c3291-7f3c-4c10-abcb-3f9bdc7fc513"
										},
										{
											"key": "Content-Length",
											"value": "1053",
											"uuid": "850953a8-fd29-4abf-b6d1-e60c91182b02"
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"uuid": "960cce72-a4cc-45f2-8ecd-a02282385e4e"
										},
										{
											"key": "Date",
											"value": "Wed, 12 Feb 2025 11:03:31 GMT",
											"uuid": "802fbbf4-e9ed-4b90-acb6-3cbbeac8fe37"
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"uuid": "e4565208-65c7-483c-9f69-c22b61dbbd55"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5",
											"uuid": "8f30a516-c9e1-4f5d-a438-9f0a3de454ae"
										}
									],
									"cookie": [],
									"body": "{\n    \"meta\": {\n        \"route\": \"/\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Success: 10 Userss found with filters: None, sorted by '-createdAt', page 1, limit 10.\"\n    },\n    \"data\": [\n        {\n            \"_id\": \"67ac69c1b73620249f25e387\",\n            \"name\": \"Thomas\",\n            \"avatarUrl\": \"https://avatars.githubusercontent.com/u/85088082\",\n            \"email\": \"Daphney_Torphy@gmail.com\",\n            \"nid\": \"1000000732\",\n            \"phone\": \"+8801750501605\",\n            \"bio\": \"Veritatis sit voluptatem.\",\n            \"portfolio\": \"https://claudie.name\",\n            \"age\": 21,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-12T09:28:33.207Z\",\n            \"updatedAt\": \"2025-02-12T09:28:33.207Z\"\n        },\n        {\n            \"_id\": \"67ac69a6b73620249f25e381\",\n            \"name\": \"Tony Kertzmann\",\n            \"avatarUrl\": \"https://avatars.githubusercontent.com/u/68896972\",\n            \"email\": \"Carissa_Feeney@gmail.com\",\n            \"nid\": \"1000000401\",\n            \"phone\": \"+8801734669415\",\n            \"bio\": \"Velit et iste aliquam et voluptates ex.\",\n            \"portfolio\": \"http://arlene.info\",\n            \"age\": 27,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-12T09:28:06.326Z\",\n            \"updatedAt\": \"2025-02-12T09:28:06.326Z\"\n        },\n        {\n            \"_id\": \"67ac69a1b73620249f25e37b\",\n            \"name\": \"Lillie Hintz\",\n            \"avatarUrl\": \"https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1011.jpg\",\n            \"email\": \"Rashawn23@hotmail.com\",\n            \"nid\": \"1000000004\",\n            \"phone\": \"+8801718463621\",\n            \"bio\": \"Inventore libero ad ut est ratione ea.\",\n            \"portfolio\": \"http://bryana.name\",\n            \"age\": 40,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-12T09:28:01.194Z\",\n            \"updatedAt\": \"2025-02-12T09:28:01.194Z\"\n        },\n        {\n            \"_id\": \"67ac681eb73620249f25e375\",\n            \"name\": \"Andre Sporer\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"Nia44@yahoo.com\",\n            \"nid\": \"1000000041\",\n            \"phone\": \"+8801724256094\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/41\",\n            \"age\": 23,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-12T09:21:34.866Z\",\n            \"updatedAt\": \"2025-02-12T09:21:34.866Z\"\n        },\n        {\n            \"_id\": \"67ac6817b73620249f25e36f\",\n            \"name\": \"Marty Sipes\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"Nicholaus_Stehr@hotmail.com\",\n            \"nid\": \"1000000153\",\n            \"phone\": \"+8801741837241\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/153\",\n            \"age\": 44,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-12T09:21:27.863Z\",\n            \"updatedAt\": \"2025-02-12T09:21:27.863Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b90\",\n            \"name\": \"Alice Johnson\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user226@example.com\",\n            \"nid\": \"1000000226\",\n            \"phone\": \"+8801792028713\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/226\",\n            \"age\": 44,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-11T12:40:43.127Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.127Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b8e\",\n            \"name\": \"Jane Smith\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user682@example.com\",\n            \"nid\": \"1000000682\",\n            \"phone\": \"+8801752993212\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/682\",\n            \"age\": 34,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-11T12:40:43.125Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.125Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b8c\",\n            \"name\": \"Emily Davis\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user148@example.com\",\n            \"nid\": \"1000000148\",\n            \"phone\": \"+8801780771528\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/148\",\n            \"age\": 27,\n            \"isActive\": true,\n            \"createdAt\": \"2025-02-11T12:40:43.123Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.123Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b8a\",\n            \"name\": \"John Doe\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user258@example.com\",\n            \"nid\": \"1000000258\",\n            \"phone\": \"+8801790854544\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/258\",\n            \"age\": 19,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-11T12:40:43.122Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.122Z\"\n        },\n        {\n            \"_id\": \"67ab454b8b80582313b88b87\",\n            \"name\": \"Jane Smith\",\n            \"avatarUrl\": \"http://example.com/avatar.png\",\n            \"email\": \"user140@example.com\",\n            \"nid\": \"1000000140\",\n            \"phone\": \"+8801792123970\",\n            \"bio\": \"This is a sample bio.\",\n            \"portfolio\": \"http://example.com/140\",\n            \"age\": 62,\n            \"isActive\": false,\n            \"createdAt\": \"2025-02-11T12:40:43.112Z\",\n            \"updatedAt\": \"2025-02-11T12:40:43.112Z\"\n        }\n    ],\n    \"errors\": {}\n}"
								}
							]
						},
						{
							"name": "GET /api/users/all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('data').that.is.an('array');",
											"    ",
											"    responseData.data.forEach(function(user) {",
											"        pm.expect(user).to.have.property('_id').that.is.a('string');",
											"        pm.expect(user).to.have.property('name').that.is.a('string');",
											"        pm.expect(user).to.have.property('avatarUrl').that.is.a('string');",
											"        pm.expect(user).to.have.property('email').that.is.a('string');",
											"        pm.expect(user).to.have.property('nid').that.is.a('string');",
											"        pm.expect(user).to.have.property('phone').that.is.a('string');",
											"        pm.expect(user).to.have.property('bio').that.is.a('string');",
											"        pm.expect(user).to.have.property('portfolio').that.is.a('string');",
											"        pm.expect(user).to.have.property('age').that.is.a('number');",
											"        pm.expect(user).to.have.property('isActive').that.is.a('boolean');",
											"        pm.expect(user).to.have.property('createdAt').that.is.a('string');",
											"        pm.expect(user).to.have.property('updatedAt').that.is.a('string');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Data array should not be empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    responseData.data.forEach(function(user) {",
											"        pm.expect(user.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Phone is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.data).to.be.an('array');",
											"  responseData.data.forEach(function(user) {",
											"    pm.expect(user.phone).to.match(/^\\d{3}-\\d{3}-\\d{4}$/);",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Meta object contains the 'route' field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.meta).to.exist;",
											"    pm.expect(responseData.meta.route).to.exist;",
											"});"
										],
										"type": "text/javascript",
										"id": "5a83cb1c-b971-48aa-ad6f-b8ff2597c8bc"
									}
								}
							],
							"id": "013617cb-90ff-4ae4-bc0b-d321dce923d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/all",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/users/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is set to application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Meta object should exist and be an object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Data array is present and not empty\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Data array should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the fields in the data array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('array');",
											"",
											"    responseData.data.forEach((user) => {",
											"        pm.expect(user).to.have.property('_id').that.is.a('string');",
											"        pm.expect(user).to.have.property('name').that.is.a('string');",
											"        pm.expect(user).to.have.property('avatarUrl').that.is.a('string');",
											"        pm.expect(user).to.have.property('email').that.is.a('string');",
											"        pm.expect(user).to.have.property('nid').that.is.a('string');",
											"        pm.expect(user).to.have.property('phone').that.is.a('string');",
											"        pm.expect(user).to.have.property('bio').that.is.a('string');",
											"        pm.expect(user).to.have.property('portfolio').that.is.a('string');",
											"        pm.expect(user).to.have.property('age').that.is.a('number');",
											"        pm.expect(user).to.have.property('isActive').that.is.a('boolean');",
											"        pm.expect(user).to.have.property('createdAt').that.is.a('string');",
											"        pm.expect(user).to.have.property('updatedAt').that.is.a('string');",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"id": "49392ce1-c0b1-4f46-9da2-e5387f7f2cba"
									}
								}
							],
							"id": "4084ebda-56b0-48c3-9085-7f30c316ebfb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/list",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/users/read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Meta object should exist and be an object\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Data array is present and not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Data array should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the fields in the data array\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"    responseData.data.forEach(function(user) {",
											"        pm.expect(user._id).to.be.a('string');",
											"        pm.expect(user.name).to.be.a('string');",
											"        pm.expect(user.avatarUrl).to.be.a('string');",
											"        pm.expect(user.email).to.be.a('string');",
											"        pm.expect(user.nid).to.be.a('string');",
											"        pm.expect(user.phone).to.be.a('string');",
											"        pm.expect(user.bio).to.be.a('string');",
											"        pm.expect(user.portfolio).to.be.a('string');",
											"        pm.expect(user.age).to.be.a('number');",
											"        pm.expect(user.isActive).to.be.a('boolean');",
											"        pm.expect(user.createdAt).to.be.a('string');",
											"        pm.expect(user.updatedAt).to.be.a('string');",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"id": "dd554ce2-f7e7-4f1b-8afd-d908f951c0fd"
									}
								}
							],
							"id": "191f783f-37ea-42e8-b558-c3dd830f71b5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/read",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"read"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/users/show",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    const requiredFields = [\"_id\", \"name\", \"avatarUrl\", \"email\", \"nid\", \"phone\", \"bio\", \"portfolio\", \"age\", \"isActive\", \"createdAt\", \"updatedAt\"];",
											"    ",
											"    requiredFields.forEach(field => {",
											"        pm.expect(responseData).to.have.property(field);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"  ",
											"  responseData.data.forEach(function(user) {",
											"    pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Phone is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  responseData.data.forEach(function(user) {",
											"    pm.expect(user.phone).to.match(/^\\d{3}-\\d{3}-\\d{4}$/);",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Data array is present and contains expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist;",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    pm.expect(responseData.data).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "162141d8-0724-4f68-9cb1-129ea3c93da7"
									}
								}
							],
							"id": "c2434250-136b-4455-9169-fe99d8f9bf19",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/show",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"show"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/users/view",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the meta object\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Data array should not be empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Data array should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Each object in data array contains non-empty values for specified properties\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    responseData.data.forEach(function(user) {",
											"        pm.expect(user._id).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"        pm.expect(user.name).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"        pm.expect(user.email).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"        pm.expect(user.nid).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"        pm.expect(user.phone).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"        pm.expect(user.bio).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"        pm.expect(user.portfolio).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"        pm.expect(user.age).to.exist.and.to.be.a('number');",
											"        pm.expect(user.isActive).to.exist.and.to.be.a('boolean');",
											"        pm.expect(user.createdAt).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"        pm.expect(user.updatedAt).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"id": "8b4f7c02-968f-469b-9d8a-499632f29b9f"
									}
								}
							],
							"id": "61ac7307-fff6-46e7-a8ff-8a286bb2cd92",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/view",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"view"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/users/{{user_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0eb15024-af1b-483a-b43e-9b2ccb46c285",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        // Parse the response to extract user data\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Select a random user from the list\r",
											"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"user_id\", randomUser._id);\r",
											"            console.log(\"User ID set:\", randomUser._id);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the data object\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"  pm.expect(responseData.data._id).to.be.a('string');",
											"  pm.expect(responseData.data.name).to.be.a('string');",
											"  pm.expect(responseData.data.avatarUrl).to.be.a('string');",
											"  pm.expect(responseData.data.email).to.be.a('string');",
											"  pm.expect(responseData.data.nid).to.be.a('string');",
											"  pm.expect(responseData.data.phone).to.be.a('string');",
											"  pm.expect(responseData.data.bio).to.be.a('string');",
											"  pm.expect(responseData.data.portfolio).to.be.a('string');",
											"  pm.expect(responseData.data.age).to.be.a('number');",
											"  pm.expect(responseData.data.isActive).to.be.a('boolean');",
											"  pm.expect(responseData.data.createdAt).to.be.a('string');",
											"  pm.expect(responseData.data.updatedAt).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
											"});",
											"",
											"",
											"pm.test(\"Bio is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data.bio).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Bio should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"id": "42cb9c3f-4d50-4c5b-99a2-81a0fd2dfab0"
									}
								}
							],
							"id": "8d8dc806-9abe-4824-8874-2d0508244067",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/{{user_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/users/read/{{user_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4018bff5-d1f3-40c7-89ea-7217a7a41b40",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        // Parse the response to extract user data\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Select a random user from the list\r",
											"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
											"\r",
											"            console.log(randomUser)\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"user_id\", randomUser._id);\r",
											"            console.log(\"User ID set:\", randomUser._id);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the data object properties\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.data).to.be.an('object');",
											"    pm.expect(responseData.data).to.have.property('_id');",
											"    pm.expect(responseData.data).to.have.property('name');",
											"    pm.expect(responseData.data).to.have.property('avatarUrl');",
											"    pm.expect(responseData.data).to.have.property('email');",
											"    pm.expect(responseData.data).to.have.property('nid');",
											"    pm.expect(responseData.data).to.have.property('phone');",
											"    pm.expect(responseData.data).to.have.property('bio');",
											"    pm.expect(responseData.data).to.have.property('portfolio');",
											"    pm.expect(responseData.data).to.have.property('age');",
											"    pm.expect(responseData.data).to.have.property('isActive');",
											"    pm.expect(responseData.data).to.have.property('createdAt');",
											"    pm.expect(responseData.data).to.have.property('updatedAt');",
											"});",
											"",
											"",
											"pm.test(\"Meta object is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.meta).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Verify the presence and properties of 'status' object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.status).to.have.property('success');",
											"    pm.expect(responseData.status).to.have.property('message');",
											"});"
										],
										"type": "text/javascript",
										"id": "97f17e44-10f2-4655-b55b-62bfa1f8aaa3"
									}
								}
							],
							"id": "ae1e0832-31fd-4ff4-91ac-8e5f23ac617a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/read/{{user_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"read",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/users/show/{{user_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "77aad527-e178-4dc8-9ccd-23f5f3119321",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        // Parse the response to extract user data\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Select a random user from the list\r",
											"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
											"\r",
											"            console.log(randomUser)\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"user_id\", randomUser._id);\r",
											"            console.log(\"User ID set:\", randomUser._id);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the meta object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
											"});",
											"",
											"",
											"pm.test(\"Data object contains expected fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.data).to.be.an('object');",
											"    pm.expect(responseData.data).to.have.property('_id');",
											"    pm.expect(responseData.data).to.have.property('name');",
											"    pm.expect(responseData.data).to.have.property('avatarUrl');",
											"    pm.expect(responseData.data).to.have.property('email');",
											"    pm.expect(responseData.data).to.have.property('nid');",
											"    pm.expect(responseData.data).to.have.property('phone');",
											"    pm.expect(responseData.data).to.have.property('bio');",
											"    pm.expect(responseData.data).to.have.property('portfolio');",
											"    pm.expect(responseData.data).to.have.property('age');",
											"    pm.expect(responseData.data).to.have.property('isActive');",
											"    pm.expect(responseData.data).to.have.property('createdAt');",
											"    pm.expect(responseData.data).to.have.property('updatedAt');",
											"});",
											"",
											"",
											"pm.test(\"CreatedAt and updatedAt fields are in valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt field is not in valid date format\");",
											"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt field is not in valid date format\");",
											"});"
										],
										"type": "text/javascript",
										"id": "898cb2c9-57f6-4007-b21c-773e14e648f4"
									}
								}
							],
							"id": "a232eee1-b55e-4487-9c4a-4c037fada1d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/show/{{user_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"show",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/users/view/{{user_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bc40be6d-fab9-4357-926f-1de4c155a0eb",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        // Parse the response to extract user data\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Select a random user from the list\r",
											"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
											"\r",
											"            console.log(randomUser)\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"user_id\", randomUser._id);\r",
											"            console.log(\"User ID set:\", randomUser._id);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the data object properties\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.data).to.be.an('object');",
											"  pm.expect(responseData.data).to.have.property('_id');",
											"  pm.expect(responseData.data).to.have.property('name');",
											"  pm.expect(responseData.data).to.have.property('avatarUrl');",
											"  pm.expect(responseData.data).to.have.property('email');",
											"  pm.expect(responseData.data).to.have.property('nid');",
											"  pm.expect(responseData.data).to.have.property('phone');",
											"  pm.expect(responseData.data).to.have.property('bio');",
											"  pm.expect(responseData.data).to.have.property('portfolio');",
											"  pm.expect(responseData.data).to.have.property('age');",
											"  pm.expect(responseData.data).to.have.property('isActive');",
											"  pm.expect(responseData.data).to.have.property('createdAt');",
											"  pm.expect(responseData.data).to.have.property('updatedAt');",
											"});",
											"",
											"",
											"pm.test(\"Meta object has a non-empty route value\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.meta).to.exist;",
											"  pm.expect(responseData.meta.route).to.exist.and.to.have.lengthOf.at.least(1, \"Route value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the success field in the status object is true\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.status).to.have.property('success', true);",
											"});"
										],
										"type": "text/javascript",
										"id": "46399ad5-fa2f-4624-8ffc-cfeb63c22feb"
									}
								}
							],
							"id": "251f6543-53af-42ac-be9f-43acb54d4775",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/view/{{user_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"view",
										"{{user_id}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "288fdf6d-df9f-4f2f-9e29-83df3d5138fc",
					"description": "Routes for GET requests for users"
				},
				{
					"name": "PATCH",
					"item": [
						{
							"name": "PATCH /api/users/{{user_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8d89783e-e056-4311-9af9-62b652d55d16",
										"exec": [
											"// Step 1: Fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Step 2: Select a random user\r",
											"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"user_id\", randomUser._id);\r",
											"            console.log(\"User ID set:\", randomUser._id);\r",
											"\r",
											"            // Step 3: Generate random data\r",
											"            const randomId = Math.floor(Math.random() * 1000);\r",
											"            const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
											"            const isActive = Math.random() < 0.5;\r",
											"\r",
											"            const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
											"            const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"\r",
											"            pm.environment.set(\"name\", randomName);\r",
											"            pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
											"            pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
											"            pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
											"            pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
											"            pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
											"            pm.environment.set(\"phone\", randomPhone);\r",
											"            pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
											"            pm.environment.set(\"isActive\", isActive);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 409\", function () {",
											"    pm.expect(pm.response.code).to.equal(409);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - meta, status, data, and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('meta');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('data');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											"",
											"pm.test(\"Meta object should have a non-empty route\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.meta).to.be.an('object');",
											"  pm.expect(responseData.meta.route).to.exist.and.to.have.lengthOf.at.least(1, \"Route should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Status object should have a non-empty message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status.message).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Data and errors objects should be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.empty;",
											"    pm.expect(responseData.errors).to.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"id": "306bb3a6-997f-4b4a-9766-6e06c2cb02e7"
									}
								}
							],
							"id": "959a6e73-16be-42a6-b637-3fa434925ed4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}/api/users/{{user_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": [
								{
									"id": "58fe7f6f-3f56-4caa-8d22-3da8c7021191",
									"name": "INTERNAL_SERVER_ERROR 500",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{SERVER_URL}}/api/users/{{user_id}}",
											"host": [
												"{{SERVER_URL}}"
											],
											"path": [
												"api",
												"users",
												"{{user_id}}"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "raw",
									"header": [
										{
											"key": "Content-Security-Policy-Report-Only",
											"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
											"uuid": "868076c1-ca01-4255-b7d0-8bdf41d5e317"
										},
										{
											"key": "Cross-Origin-Opener-Policy",
											"value": "same-origin",
											"uuid": "2fa52de3-dc42-4c3b-8572-e2ffa5477ac2"
										},
										{
											"key": "Cross-Origin-Resource-Policy",
											"value": "same-origin",
											"uuid": "999ecabb-60e1-4339-a065-94eb5a4da2fb"
										},
										{
											"key": "Origin-Agent-Cluster",
											"value": "?1",
											"uuid": "4a35f029-bb7e-4d34-9f3b-156e96951c85"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin-when-cross-origin",
											"uuid": "33337356-cc8b-413e-9834-3a6e833f29dc"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains",
											"uuid": "44bb00fa-32eb-474c-9956-4a410e7850d5"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff",
											"uuid": "3d2577aa-f14c-4482-b8e9-eeb653e757a4"
										},
										{
											"key": "X-DNS-Prefetch-Control",
											"value": "off",
											"uuid": "2361deae-35dd-41d9-9615-011fcd61c8ce"
										},
										{
											"key": "X-Download-Options",
											"value": "noopen",
											"uuid": "dba22f84-4736-4257-bf1d-faf938b0c15e"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN",
											"uuid": "100f8476-316a-43be-910b-ae67b8777a00"
										},
										{
											"key": "X-Permitted-Cross-Domain-Policies",
											"value": "none",
											"uuid": "3fe4c21e-3f5b-4b88-8472-8812bf5d06df"
										},
										{
											"key": "X-XSS-Protection",
											"value": "0",
											"uuid": "93bdb4da-b4b4-416a-8f51-e1a419860206"
										},
										{
											"key": "Vary",
											"value": "Origin",
											"uuid": "0b453e2a-7918-4b33-bfa6-f988bc9fa19c"
										},
										{
											"key": "Access-Control-Allow-Credentials",
											"value": "true",
											"uuid": "28ff8f92-a334-4423-8439-0cf508768bdb"
										},
										{
											"key": "RateLimit-Policy",
											"value": "100;w=60",
											"uuid": "1ac1765d-cebc-4228-8ac6-5d0bc0ec2360"
										},
										{
											"key": "RateLimit-Limit",
											"value": "100",
											"uuid": "242d723f-85f0-460c-b1ab-89cb7855d44b"
										},
										{
											"key": "RateLimit-Remaining",
											"value": "98",
											"uuid": "b09468ca-8cd3-434e-83c2-c9e1d747781b"
										},
										{
											"key": "RateLimit-Reset",
											"value": "60",
											"uuid": "9857d39c-3f42-49ed-ac1a-ec21b77d4770"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip",
											"uuid": "5c1e7a4c-bc8d-48b9-b031-c214982ccc8e"
										},
										{
											"key": "Content-Length",
											"value": "292",
											"uuid": "b5443314-77aa-4089-a9ee-a70a48f8d61b"
										},
										{
											"key": "Content-Type",
											"value": "[object Object]",
											"uuid": "82c79340-1f59-4b60-9c66-de88eb3fc1f3"
										},
										{
											"key": "Date",
											"value": "Tue, 11 Feb 2025 11:11:32 GMT",
											"uuid": "a74dae12-ed8f-4c6f-a89a-91f86216d464"
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"uuid": "36e0bb06-c70c-4ef1-8be2-ad7dbe5ec6c6"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5",
											"uuid": "ff5f8d7b-879a-4d87-bbe6-f471d9581e61"
										}
									],
									"cookie": [],
									"body": "{\"meta\":{\"route\":\"/67ab2ebed3c81db68b98f2d1\"},\"status\":{\"message\":\"model.findById(...).aggregate is not a function\"},\"data\":{},\"errors\":\"TypeError: model.findById(...).aggregate is not a function\\n    at updateADocument (file:///E:/PERSONAL/auto-crud-api/src/service/updateADocument.js:59:52)\\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\\n    at async file:///E:/PERSONAL/auto-crud-api/src/utils/asyncHandler.js:26:13\"}"
								}
							]
						},
						{
							"name": "PATCH /api/users/edit/{{user_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cd04d65c-0fb9-47d0-9828-8d3ff9b33b22",
										"exec": [
											"// Step 1: Fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Step 2: Select a random user\r",
											"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"user_id\", randomUser._id);\r",
											"            console.log(\"User ID set:\", randomUser._id);\r",
											"\r",
											"            // Step 3: Generate random data\r",
											"            const randomId = Math.floor(Math.random() * 1000);\r",
											"            const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
											"            const isActive = Math.random() < 0.5;\r",
											"\r",
											"            const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
											"            const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"\r",
											"            pm.environment.set(\"name\", randomName);\r",
											"            pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
											"            pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
											"            pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
											"            pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
											"            pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
											"            pm.environment.set(\"phone\", randomPhone);\r",
											"            pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
											"            pm.environment.set(\"isActive\", isActive);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the meta object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Data object contains the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('object');",
											"    pm.expect(responseData.data).to.have.property('_id');",
											"    pm.expect(responseData.data).to.have.property('name');",
											"    pm.expect(responseData.data).to.have.property('avatarUrl');",
											"    pm.expect(responseData.data).to.have.property('email');",
											"    pm.expect(responseData.data).to.have.property('nid');",
											"    pm.expect(responseData.data).to.have.property('phone');",
											"    pm.expect(responseData.data).to.have.property('bio');",
											"    pm.expect(responseData.data).to.have.property('portfolio');",
											"    pm.expect(responseData.data).to.have.property('age');",
											"    pm.expect(responseData.data).to.have.property('isActive');",
											"    pm.expect(responseData.data).to.have.property('updatedAt');",
											"});",
											"",
											"",
											"pm.test(\"Age is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.age).to.be.a('number').and.to.satisfy((age) => age >= 0, \"Age must be a non-negative integer\");",
											"});"
										],
										"type": "text/javascript",
										"id": "b5e8ef63-bafa-46c5-ac5f-4a3008ccb334"
									}
								}
							],
							"id": "1b6c2404-ee51-4c9b-87a7-99b7856175ca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}/api/users/edit/{{user_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"edit",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH /api/users/update/{{user_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2ff74aa8-6bde-4e09-9c7b-ea0e496ba431",
										"exec": [
											"// Step 1: Fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Step 2: Select a random user\r",
											"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"user_id\", randomUser._id);\r",
											"            console.log(\"User ID set:\", randomUser._id);\r",
											"\r",
											"            // Step 3: Generate random data\r",
											"            const randomId = Math.floor(Math.random() * 1000);\r",
											"            const randomPhone = `+88017${Math.floor(10000000 + Math.random() * 90000000)}`;\r",
											"            const isActive = Math.random() < 0.5;\r",
											"\r",
											"            const names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\", \"Michael Brown\", \"Emily Davis\"];\r",
											"            const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"\r",
											"            pm.environment.set(\"name\", randomName);\r",
											"            pm.environment.set(\"avatarUrl\", \"http://example.com/avatar.png\");\r",
											"            pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
											"            pm.environment.set(\"nid\", `${1000000000 + randomId}`);\r",
											"            pm.environment.set(\"bio\", \"This is a sample bio.\");\r",
											"            pm.environment.set(\"portfolio\", `http://example.com/${randomId}`);\r",
											"            pm.environment.set(\"phone\", randomPhone);\r",
											"            pm.environment.set(\"age\", Math.floor(Math.random() * 50) + 18);\r",
											"            pm.environment.set(\"isActive\", isActive);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the meta object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.have.property('data');",
											"    pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
											"});",
											"",
											"",
											"pm.test(\"Data object contains the expected fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('object');",
											"    pm.expect(responseData.data).to.have.property('_id');",
											"    pm.expect(responseData.data).to.have.property('name');",
											"    pm.expect(responseData.data).to.have.property('avatarUrl');",
											"    pm.expect(responseData.data).to.have.property('email');",
											"    pm.expect(responseData.data).to.have.property('nid');",
											"    pm.expect(responseData.data).to.have.property('phone');",
											"    pm.expect(responseData.data).to.have.property('bio');",
											"    pm.expect(responseData.data).to.have.property('portfolio');",
											"    pm.expect(responseData.data).to.have.property('age');",
											"    pm.expect(responseData.data).to.have.property('isActive');",
											"    pm.expect(responseData.data).to.have.property('updatedAt');",
											"});",
											"",
											"",
											"pm.test(\"Updated date is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
											"});"
										],
										"type": "text/javascript",
										"id": "a5947da2-f6cc-4e88-a1ce-85cb914ce48e"
									}
								}
							],
							"id": "5b700133-2aaf-4200-874e-ef8614052d62",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"avatarUrl\": \"{{avatarUrl}}\",\n    \"email\": \"{{email}}\",\n    \"nid\": \"{{nid}}\",\n    \"phone\": \"{{phone}}\",\n    \"bio\": \"{{bio}}\",\n    \"portfolio\": \"{{portfolio}}\",\n    \"age\": {{age}},\n    \"isActive\": {{isActive}}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}/api/users/update/{{user_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"update",
										"{{user_id}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "7257a515-823a-4ff7-ba3d-2feb1a880147",
					"description": "Routes for PATCH requests for users"
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "DELETE /api/users/{{user_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "72c85933-02c0-428c-9b60-df4ef8b56e5e",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Select a random user from the list\r",
											"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
											"\r",
											"            console.log(\"Selected User:\", randomUser);\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"user_id\", randomUser._id);\r",
											"            console.log(\"User ID set:\", randomUser._id);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Meta object should exist and be an object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Status object contains the 'success' key with a boolean value\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.status.success).to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Data object is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('object').that.is.empty;",
											"});",
											"",
											"",
											"pm.test(\"Errors object should be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.be.an('object').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"id": "c2eb6b2c-8eeb-45e5-b0b6-330954947e46"
									}
								}
							],
							"id": "38f9703c-5dda-4a17-a4e2-43291398728a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/{{user_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/delete/{{user_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3d2fcb97-4e6b-4718-bb63-8ae0e651b362",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Select a random user from the list\r",
											"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
											"\r",
											"            console.log(\"Selected User:\", randomUser);\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"user_id\", randomUser._id);\r",
											"            console.log(\"User ID set:\", randomUser._id);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response has a meta object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.have.property('meta');",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'success' key inside the 'status' object is true\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.status).to.exist;",
											"  pm.expect(responseData.status.success).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Data and errors objects should be empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('object').that.is.empty;",
											"    pm.expect(responseData.errors).to.be.an('object').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"id": "ccb4702b-1a64-43e7-8e6c-c2d811e51ba3"
									}
								}
							],
							"id": "0750df36-6783-49d3-baa2-bff3d4cb6e45",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/delete/{{user_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"delete",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/destroy/{{user_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "63d28736-9d45-47df-8b9f-2539a43e5097",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Select a random user from the list\r",
											"            const randomUser = users[Math.floor(Math.random() * users.length)];\r",
											"\r",
											"            console.log(\"Selected User:\", randomUser);\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"user_id\", randomUser._id);\r",
											"            console.log(\"User ID set:\", randomUser._id);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Meta object exists in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Success status is true\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status.success).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Data object is empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.eql({});",
											"});"
										],
										"type": "text/javascript",
										"id": "32d2c2a0-3fec-45f9-8908-082b576aeb2c"
									}
								}
							],
							"id": "d2a61506-af62-4708-9b70-0de313a71070",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/destroy/{{user_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"destroy",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/users?ids={{docIds}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "080facc3-ef49-4a34-8d38-35cad3110aa6",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        console.log(users)\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Extract all user IDs\r",
											"            const userIds = users.map(user => user._id);\r",
											"\r",
											"            // Convert the array of IDs into a comma-separated string\r",
											"            const ids = userIds.join(',');\r",
											"\r",
											"            // Set as an environment variable\r",
											"            pm.environment.set(\"docIds\", ids);\r",
											"\r",
											"            console.log(\"Document IDs set:\", ids);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the meta object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Validate the status object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Data and errors objects should be empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.an('object').that.is.empty;",
											"  pm.expect(responseData.errors).to.be.an('object').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"id": "eb195995-3114-4eb2-92a5-2ea44c97766a"
									}
								}
							],
							"id": "539c3db2-f05f-4a6e-8881-96cb8e72779b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users?ids={{docIds}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{docIds}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/delete-list?ids={{docIds}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "62efebcc-a3f5-404c-b843-d146d7cb2290",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        console.log(users)\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Extract all user IDs\r",
											"            const userIds = users.map(user => user._id);\r",
											"\r",
											"            // Convert the array of IDs into a comma-separated string\r",
											"            const ids = userIds.join(',');\r",
											"\r",
											"            // Set as an environment variable\r",
											"            pm.environment.set(\"docIds\", ids);\r",
											"\r",
											"            console.log(\"Document IDs set:\", ids);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is present and has a valid value\", function () {",
											"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.meta).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.data).to.exist;",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Errors array is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.errors).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'ids' parameter is correctly parsed and processed by the API\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.errors).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"    responseData.errors.forEach(function(error) {",
											"        pm.expect(error.field).to.equal('ids');",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"id": "88755af1-2448-47cb-87f9-a8623cc41fa8"
									}
								}
							],
							"id": "5049ffa8-81f1-49a1-b695-ffc0a9e6fd1c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/delete-list?ids={{docIds}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"delete-list"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{docIds}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/delete-by-list?ids={{docIds}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "56c03b4f-0dc2-485b-9001-8e50e241b932",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        console.log(users)\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Extract all user IDs\r",
											"            const userIds = users.map(user => user._id);\r",
											"\r",
											"            // Convert the array of IDs into a comma-separated string\r",
											"            const ids = userIds.join(',');\r",
											"\r",
											"            // Set as an environment variable\r",
											"            pm.environment.set(\"docIds\", ids);\r",
											"\r",
											"            console.log(\"Document IDs set:\", ids);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('meta');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('data');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is present and has a valid value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Errors array is present and contains the expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"    pm.expect(responseData.errors).to.be.an('array');",
											"    pm.expect(responseData.errors).to.have.lengthOf(1);",
											"});",
											"",
											"",
											"pm.test(\"Field and message in errors array are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.errors).to.be.an('array');",
											"    responseData.errors.forEach(function(error) {",
											"        pm.expect(error.field).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Field should not be empty\");",
											"        pm.expect(error.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"id": "cc15eaa0-7244-452a-af57-8ff6ee4b45de"
									}
								}
							],
							"id": "bea34581-7a0c-4709-bdfc-b180c6136e57",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/delete-by-list?ids={{docIds}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"delete-by-list"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{docIds}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/destroy-list?ids={{docIds}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "12cb1188-3346-4573-9592-2ecd5670fad4",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        console.log(users)\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Extract all user IDs\r",
											"            const userIds = users.map(user => user._id);\r",
											"\r",
											"            // Convert the array of IDs into a comma-separated string\r",
											"            const ids = userIds.join(',');\r",
											"\r",
											"            // Set as an environment variable\r",
											"            pm.environment.set(\"docIds\", ids);\r",
											"\r",
											"            console.log(\"Document IDs set:\", ids);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - meta, status, data, errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('meta');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('data');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is present and has a valid value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.oneOf(['application/json', 'text/plain', 'application/xml']);",
											"});",
											"",
											"",
											"pm.test(\"Ids parameter is present in the request URL\", function () {",
											"    const requestUrl = pm.request.url.toString();",
											"    pm.expect(requestUrl).to.include(\"ids=\", \"Ids parameter is present in the request URL\");",
											"});",
											"",
											"",
											"pm.test(\"Errors array contains non-empty field and message for each error\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.be.an('array');",
											"    ",
											"    responseData.errors.forEach(function(error) {",
											"        pm.expect(error.field).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Field should not be empty\");",
											"        pm.expect(error.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"id": "fd24bf15-41e9-4f91-acf7-a6b84cac68e0"
									}
								}
							],
							"id": "231f7548-a94d-491e-aa4a-58d59443c535",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/destroy-list?ids={{docIds}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"destroy-list"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{docIds}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/users/destroy-by-list?ids={{docIds}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5ca93783-a173-465c-b60b-311d9f0f2793",
										"exec": [
											"// Send a GET request to fetch the user list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/users/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching users:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const users = responseData.data;\r",
											"\r",
											"        console.log(users)\r",
											"\r",
											"        if (users && users.length > 0) {\r",
											"            // Extract all user IDs\r",
											"            const userIds = users.map(user => user._id);\r",
											"\r",
											"            // Convert the array of IDs into a comma-separated string\r",
											"            const ids = userIds.join(',');\r",
											"\r",
											"            // Set as an environment variable\r",
											"            pm.environment.set(\"docIds\", ids);\r",
											"\r",
											"            console.log(\"Document IDs set:\", ids);\r",
											"        } else {\r",
											"            console.log(\"No users found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - meta, status, data, and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.meta).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.data).to.exist;",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is present and has a valid format\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^application\\/json/);",
											"});",
											"",
											"",
											"pm.test(\"Errors array is present and contains at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.exist;",
											"    pm.expect(responseData.errors).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Field and message in errors array are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errors).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"    ",
											"    responseData.errors.forEach(function(error) {",
											"        pm.expect(error.field).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Field should not be empty\");",
											"        pm.expect(error.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"id": "88cb9cac-a857-4486-87ac-86e0c63a121e"
									}
								}
							],
							"id": "19cf814d-c5e2-46d0-89af-2b61179faef5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/users/destroy-by-list?ids={{docIds}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"users",
										"destroy-by-list"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{docIds}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "5806f1de-8f46-4367-8c82-ab6ee9ae705b",
					"description": "Routes for DELETE requests for users"
				}
			],
			"id": "cb87b97c-50b3-4ee1-b719-dd370365915a",
			"description": "Dynamic routes for users"
		},
		{
			"name": "admins",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "POST /api/admins/",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a8b586b7-5d16-4630-b29f-8878a67bd3ca",
										"exec": [
											"// Generate random data with valid name\r",
											"const randomId = Math.floor(Math.random() * 1000);\r",
											"const isActive = Math.random() < 0.5;\r",
											"\r",
											"// Generate a valid name (3-50 characters, letters, and spaces only)\r",
											"const names = [\"Admin John Doe\", \"Admin Jane Smith\", \"Admin Alice Johnson\", \"Admin Michael Brown\", \"Admin Emily Davis\"];\r",
											"const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"\r",
											"pm.environment.set(\"name\", randomName);\r",
											"pm.environment.set(\"email\", `user${randomId}@example.com`);\r",
											"pm.environment.set(\"isActive\", isActive);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b86dc2e-8341-4b47-b91e-7a1447b6989c",
										"exec": [
											"pm.test(\"Status code is 409 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([409, 201]);",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response body contains data\", function () { pm.expect(pm.response.json()).to.be.an('object').that.is.not.empty; });",
											"",
											"// pm.test(\"Cache-Control header is present\", function () { pm.expect(pm.response.headers.has('Cache-Control')).to.be.true; });",
											"",
											"// pm.test(\"Cache-Control value is no-cache\", function () { pm.expect(pm.response.headers.get('Cache-Control')).to.equal('no-cache'); });",
											"",
											"pm.test(\"Verify the response body format\", function () {",
											"    const responseBody = pm.response.json();",
											"",
											"    if (pm.response.code === 201) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('success', true);",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Success: New Admins created with ID\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.have.all.keys('_id', 'name', 'email', 'isActive', 'createdAt', 'updatedAt');",
											"",
											"        // Dynamically check types and values within data",
											"        pm.expect(responseBody.data._id).to.be.a('string');",
											"        pm.expect(responseBody.data.name).to.be.a('string');",
											"        pm.expect(responseBody.data.email).to.be.a('string');",
											"        pm.expect(responseBody.data.isActive).to.be.a('boolean');",
											"        pm.expect(responseBody.data.createdAt).to.be.a('string');",
											"        pm.expect(responseBody.data.updatedAt).to.be.a('string');",
											"",
											"        // You can add more specific value checks here if needed, for example:",
											"        // pm.expect(responseBody.data.email).to.match(/@example\\.com$/); // Check email domain",
											"",
											"    } else if (pm.response.code === 409) {",
											"        pm.expect(responseBody).to.have.all.keys('meta', 'status', 'data', 'errors');",
											"        pm.expect(responseBody.meta).to.have.property('route', '/');",
											"        pm.expect(responseBody.status).to.have.property('message').that.contains(\"Conflict: Admins with email\"); // More flexible message check",
											"        pm.expect(responseBody.data).to.be.empty; // Check if data is empty",
											"        pm.expect(responseBody.errors).to.be.empty;",
											"    } else {",
											"        pm.expect.fail(\"Unexpected status code: \" + pm.response.code); // Fail if code is not 201 or 409",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d4e06f63-93ae-4c2b-bc8d-99279d325d5f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"email\": \"{{email}}\",\n    \"isActive\": {{isActive}}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}/api/admins",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST /api/admins/create-dummy?count={{count}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d94de0a1-400b-48ff-bf0e-8dd3c3dbd2bd",
										"exec": [
											"pm.environment.set(\"count\", Math.floor(Math.random() * 50) + 18);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"    pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is present and has a valid value\", function () {",
											"    pm.expect(pm.response.headers.has(\"Content-Type\")).to.be.true;",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/^[\\w\\/\\+\\-]+$/);",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('meta');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('data');",
											"    pm.expect(responseData).to.have.property('errors');",
											"});",
											"",
											"",
											"pm.test(\"Route in meta object should be empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.meta.route).to.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Ensure that the message in the status object is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status.message).to.equal(\"\");",
											"});"
										],
										"type": "text/javascript",
										"id": "7cfad12a-2a41-49da-b20f-ee2bfa3722ca"
									}
								}
							],
							"id": "539b5bf6-2026-49dd-9d5c-f73c2aab0202",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/admins/create-dummy?count={{count}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins",
										"create-dummy"
									],
									"query": [
										{
											"key": "count",
											"value": "{{count}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "e79ad5f6-f7de-48d0-8354-ead7e7152bc3",
					"description": "Routes for POST requests for admins"
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "GET /api/admins/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Meta object should exist and be an object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Data array is present and contains expected fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('array');",
											"    ",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item).to.have.property('_id');",
											"        pm.expect(item).to.have.property('name');",
											"        pm.expect(item).to.have.property('email');",
											"        pm.expect(item).to.have.property('isActive');",
											"        pm.expect(item).to.have.property('createdAt');",
											"        pm.expect(item).to.have.property('updatedAt');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.an('array');",
											"  ",
											"  responseData.data.forEach(function(admin) {",
											"    pm.expect(admin.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"id": "e405e4c9-2f9c-4f58-a450-50d6b5fc5c88"
									}
								}
							],
							"id": "a640a752-1750-4ecc-bd41-9287692af41b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/admins",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/admins/all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Meta object should exist and be an object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Data array should not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"",
											"pm.test(\"Each object in the data array contains non-empty values for _id, name, email, isActive, createdAt, and updatedAt properties\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item._id).to.exist.and.to.not.be.empty;",
											"        pm.expect(item.name).to.exist.and.to.not.be.empty;",
											"        pm.expect(item.email).to.exist.and.to.not.be.empty;",
											"        pm.expect(item.isActive).to.exist;",
											"        pm.expect(item.createdAt).to.exist.and.to.not.be.empty;",
											"        pm.expect(item.updatedAt).to.exist.and.to.not.be.empty;",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"id": "82b27a00-2165-4a0a-8457-d6fb52510f09"
									}
								}
							],
							"id": "1008e772-a4c5-4cfd-9825-2f843867d13a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/admins/all",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/admins/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Meta object should exist and be an object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Ensure the data array contains the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;",
											"",
											"    responseData.data.forEach(function(item) {",
											"        pm.expect(item).to.include.all.keys('_id', 'name', 'email', 'isActive', 'createdAt', 'updatedAt');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Verify that isActive field in the data array is a boolean value\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.data).to.be.an('array');",
											"  responseData.data.forEach(function(item) {",
											"    pm.expect(item.isActive).to.be.a('boolean');",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"id": "3610235c-7df3-4050-8305-0ef190e81e6c"
									}
								}
							],
							"id": "9eb1c9f4-2f09-4bb4-807f-f4fbf374528c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/admins/list",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET /api/admins/{{admin_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "44ed238f-5d80-44a1-899d-1ba439e3c9d8",
										"exec": [
											"// Send a GET request to fetch the admin list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching admins:\", err);\r",
											"    } else {\r",
											"        // Parse the response to extract admin data\r",
											"        const responseData = res.json();\r",
											"        const admins = responseData.data;\r",
											"\r",
											"        if (admins && admins.length > 0) {\r",
											"            // Select a random admin from the list\r",
											"            const randomadmin = admins[Math.floor(Math.random() * admins.length)];\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"admin_id\", randomadmin._id);\r",
											"            console.log(\"admin ID set:\", randomadmin._id);\r",
											"        } else {\r",
											"            console.log(\"No admins found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('_id');",
											"    pm.expect(responseData).to.have.property('name');",
											"    pm.expect(responseData).to.have.property('email');",
											"    pm.expect(responseData).to.have.property('isActive');",
											"    pm.expect(responseData).to.have.property('createdAt');",
											"    pm.expect(responseData).to.have.property('updatedAt');",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[\\w-]+@([\\w-]+\\.)+[\\w-]{2,4}$/);",
											"});",
											"",
											"",
											"pm.test(\"Meta object is present and contains expected keys\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.meta).to.exist;",
											"    pm.expect(responseData.meta).to.have.all.keys('route');",
											"});",
											"",
											"",
											"pm.test(\"Status object is present and has a boolean 'success' value\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('status').that.is.an('object');",
											"    pm.expect(responseData.status).to.have.property('success').that.is.a('boolean');",
											"});"
										],
										"type": "text/javascript",
										"id": "e7be232a-3299-4c18-99cb-df64ec985677"
									}
								}
							],
							"id": "724a0ef3-ac6c-4aab-b9fb-aec44a823b7b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/admins/{{admin_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins",
										"{{admin_id}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "0adee9ea-9a40-41fd-9319-5178c6e597bb",
					"description": "Routes for GET requests for admins"
				},
				{
					"name": "PATCH",
					"item": [
						{
							"name": "PATCH /api/admins/{{admin_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "48d685e9-9b1d-47b2-bddf-09e20d43b4ce",
										"exec": [
											"// Step 1: Fetch the admin list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching admins:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const admins = responseData.data;\r",
											"\r",
											"        if (admins && admins.length > 0) {\r",
											"            // Step 2: Select a random admin\r",
											"            const randomadmin = admins[Math.floor(Math.random() * admins.length)];\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"admin_id\", randomadmin._id);\r",
											"            console.log(\"admin ID set:\", randomadmin._id);\r",
											"\r",
											"            // Step 3: Generate random data\r",
											"            const randomId = Math.floor(Math.random() * 1000);\r",
											"            const isActive = Math.random() < 0.5;\r",
											"\r",
											"            const names = [\"Admin John Doe\", \"Admin Jane Smith\", \"Admin Alice Johnson\", \"Admin Michael Brown\", \"Admin Emily Davis\"];\r",
											"            const randomName = names[Math.floor(Math.random() * names.length)];\r",
											"\r",
											"            pm.environment.set(\"name\", randomName);\r",
											"            pm.environment.set(\"email\", `admin${randomId}@example.com`);\r",
											"            pm.environment.set(\"isActive\", isActive);\r",
											"        } else {\r",
											"            console.log(\"No admins found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"",
											"pm.test(\"Meta object should exist and be an object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Status object should exist and have properties\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.status).to.exist.and.to.be.an('object');",
											"  pm.expect(responseData.status.success).to.exist.and.to.be.a('boolean');",
											"  pm.expect(responseData.status.message).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Data object properties are present\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('object');",
											"    pm.expect(responseData.data).to.have.property('name');",
											"    pm.expect(responseData.data).to.have.property('email');",
											"    pm.expect(responseData.data).to.have.property('isActive');",
											"    pm.expect(responseData.data).to.have.property('createdAt');",
											"    pm.expect(responseData.data).to.have.property('updatedAt');",
											"});"
										],
										"type": "text/javascript",
										"id": "0c478815-35e0-49ac-84a5-670d063a6593"
									}
								}
							],
							"id": "d6283d16-8dd4-4839-ac45-99951901a1e9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{name}}\",\n    \"email\": \"{{email}}\",\n    \"isActive\": {{isActive}}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{SERVER_URL}}/api/admins/{{admin_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins",
										"{{admin_id}}"
									]
								}
							},
							"response": []
						}
					],
					"id": "84f3e4cb-f8ab-4eb2-ab8d-8c518c4f0a8f",
					"description": "Routes for PATCH requests for admins"
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "DELETE /api/admins/{{admin_id}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5e26adeb-ad4e-42b9-9f47-fbb57671a284",
										"exec": [
											"// Send a GET request to fetch the admin list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching admins:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const admins = responseData.data;\r",
											"\r",
											"        if (admins && admins.length > 0) {\r",
											"            // Select a random admin from the list\r",
											"            const randomadmin = admins[Math.floor(Math.random() * admins.length)];\r",
											"\r",
											"            console.log(\"Selected admin:\", randomadmin);\r",
											"\r",
											"            // Set the _id as an environment variable\r",
											"            pm.environment.set(\"admin_id\", randomadmin._id);\r",
											"            console.log(\"admin ID set:\", randomadmin._id);\r",
											"        } else {\r",
											"            console.log(\"No admins found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the meta object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Ensure that the status object has a 'success' key with a value of true\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.status.success).to.be.true;",
											"});",
											"",
											"",
											"pm.test(\"Data and errors objects should be empty\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.data).to.be.an('object').that.is.empty;",
											"  pm.expect(responseData.errors).to.be.an('object').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"id": "b2acdd0c-dce8-4d7c-8109-14e65ccd5b07"
									}
								}
							],
							"id": "4b3ecc0c-db6e-4ac9-ab1b-1b21332afc30",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/admins/{{admin_id}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins",
										"{{admin_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/admins?ids={{docIds}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5a97e71a-3d8f-4d34-a327-546c0700403b",
										"exec": [
											"// Send a GET request to fetch the admin list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching admins:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const admins = responseData.data;\r",
											"\r",
											"        console.log(admins)\r",
											"\r",
											"        if (admins && admins.length > 0) {\r",
											"            // Extract all admin IDs\r",
											"            const adminIds = admins.map(admin => admin._id);\r",
											"\r",
											"            // Convert the array of IDs into a comma-separated string\r",
											"            const ids = adminIds.join(',');\r",
											"\r",
											"            // Set as an environment variable\r",
											"            pm.environment.set(\"docIds\", ids);\r",
											"\r",
											"            console.log(\"Document IDs set:\", ids);\r",
											"        } else {\r",
											"            console.log(\"No admins found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.to.have.status(200));",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - meta, status, data, and errors\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.meta).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.data).to.exist;",
											"    pm.expect(responseData.errors).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Route in meta is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.meta.route).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Success in status is a boolean value\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status.success).to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Message in status is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.status.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"id": "9437b6e8-bb2c-408c-be1d-af7d43eb8408"
									}
								}
							],
							"id": "53aa1135-ea11-4d5d-911c-4801e2d99852",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/admins?ids={{docIds}}",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{docIds}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/admins/delete-list?ids={{docIds}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e629da43-33be-4f2d-b42d-eacb662cfd76",
										"exec": [
											"// Send a GET request to fetch the admin list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching admins:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const admins = responseData.data;\r",
											"\r",
											"        console.log(admins)\r",
											"\r",
											"        if (admins && admins.length > 0) {\r",
											"            // Extract all admin IDs\r",
											"            const adminIds = admins.map(admin => admin._id);\r",
											"\r",
											"            // Convert the array of IDs into a comma-separated string\r",
											"            const ids = adminIds.join(',');\r",
											"\r",
											"            // Set as an environment variable\r",
											"            pm.environment.set(\"docIds\", ids);\r",
											"\r",
											"            console.log(\"Document IDs set:\", ids);\r",
											"        } else {\r",
											"            console.log(\"No admins found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "496840bd-d55d-4b50-8807-33c8a0b5f331",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/admins/delete-list",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins",
										"delete-list"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/admins/delete-by-list?ids={{docIds}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ffe08b3e-8848-4278-986c-38f2e99bc588",
										"exec": [
											"// Send a GET request to fetch the admin list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching admins:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const admins = responseData.data;\r",
											"\r",
											"        console.log(admins)\r",
											"\r",
											"        if (admins && admins.length > 0) {\r",
											"            // Extract all admin IDs\r",
											"            const adminIds = admins.map(admin => admin._id);\r",
											"\r",
											"            // Convert the array of IDs into a comma-separated string\r",
											"            const ids = adminIds.join(',');\r",
											"\r",
											"            // Set as an environment variable\r",
											"            pm.environment.set(\"docIds\", ids);\r",
											"\r",
											"            console.log(\"Document IDs set:\", ids);\r",
											"        } else {\r",
											"            console.log(\"No admins found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "96667e28-30a7-4281-ac1c-9e13aa43c252",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/admins/delete-by-list",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins",
										"delete-by-list"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/admins/destroy-list?ids={{docIds}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c4313282-e1b9-44bb-b8d2-c8dee99420a0",
										"exec": [
											"// Send a GET request to fetch the admin list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching admins:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const admins = responseData.data;\r",
											"\r",
											"        console.log(admins)\r",
											"\r",
											"        if (admins && admins.length > 0) {\r",
											"            // Extract all admin IDs\r",
											"            const adminIds = admins.map(admin => admin._id);\r",
											"\r",
											"            // Convert the array of IDs into a comma-separated string\r",
											"            const ids = adminIds.join(',');\r",
											"\r",
											"            // Set as an environment variable\r",
											"            pm.environment.set(\"docIds\", ids);\r",
											"\r",
											"            console.log(\"Document IDs set:\", ids);\r",
											"        } else {\r",
											"            console.log(\"No admins found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5004ca3a-c5ae-4a1c-aff3-ba6022fd63fb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/admins/destroy-list",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins",
										"destroy-list"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE /api/admins/destroy-by-list?ids={{docIds}}",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3dacf91c-0d59-453e-a507-b4ffd83e67fc",
										"exec": [
											"// Send a GET request to fetch the admin list\r",
											"pm.sendRequest({\r",
											"    url: pm.environment.get(\"SERVER_URL\") + '/api/admins/all',\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error fetching admins:\", err);\r",
											"    } else {\r",
											"        const responseData = res.json();\r",
											"        const admins = responseData.data;\r",
											"\r",
											"        console.log(admins)\r",
											"\r",
											"        if (admins && admins.length > 0) {\r",
											"            // Extract all admin IDs\r",
											"            const adminIds = admins.map(admin => admin._id);\r",
											"\r",
											"            // Convert the array of IDs into a comma-separated string\r",
											"            const ids = adminIds.join(',');\r",
											"\r",
											"            // Set as an environment variable\r",
											"            pm.environment.set(\"docIds\", ids);\r",
											"\r",
											"            console.log(\"Document IDs set:\", ids);\r",
											"        } else {\r",
											"            console.log(\"No admins found in the response.\");\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7269f3de-2407-4dbf-bfe9-50e35aedf444",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{SERVER_URL}}/api/admins/destroy-by-list",
									"host": [
										"{{SERVER_URL}}"
									],
									"path": [
										"api",
										"admins",
										"destroy-by-list"
									]
								}
							},
							"response": []
						}
					],
					"id": "9a25a402-460f-45ed-911f-f7671cf745a1",
					"description": "Routes for DELETE requests for admins"
				}
			],
			"id": "677ae799-0719-4d39-8771-b011594ab2f2",
			"description": "Dynamic routes for admins"
		},
		{
			"name": "routes-info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Meta object should exist and be non-empty\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.meta).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Verify success status and message in the status object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('status');",
							"  pm.expect(responseData.status).to.have.property('success', true);",
							"  pm.expect(responseData.status).to.have.property('message').that.is.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Data object should contain users and admins with their respective HTTP methods and endpoints\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data).to.be.an('object');",
							"  pm.expect(responseData.data.users).to.be.an('object');",
							"  pm.expect(responseData.data.users.POST).to.be.an('array');",
							"  pm.expect(responseData.data.users.GET).to.be.an('array');",
							"  pm.expect(responseData.data.users.PATCH).to.be.an('array');",
							"  pm.expect(responseData.data.users.DELETE).to.be.an('array');",
							"  ",
							"  pm.expect(responseData.data.admins).to.be.an('object');",
							"  pm.expect(responseData.data.admins.POST).to.be.an('array');",
							"  pm.expect(responseData.data.admins.GET).to.be.an('array');",
							"  pm.expect(responseData.data.admins.PATCH).to.be.an('array');",
							"  pm.expect(responseData.data.admins.DELETE).to.be.an('array');",
							"});"
						],
						"type": "text/javascript",
						"id": "c2c6ce92-954a-4161-990d-675e0e6ab686"
					}
				}
			],
			"id": "c59efb20-ef8e-4915-8e68-f79ab27bef99",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SERVER_URL}}/api/routes-info",
					"host": [
						"{{SERVER_URL}}"
					],
					"path": [
						"api",
						"routes-info"
					]
				}
			},
			"response": [
				{
					"id": "bab57a4e-4d31-4d4f-a520-87c35b706d9e",
					"name": "OK 200",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{SERVER_URL}}/api/routes-info",
							"host": [
								"{{SERVER_URL}}"
							],
							"path": [
								"api",
								"routes-info"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Security-Policy-Report-Only",
							"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
							"uuid": "dc713c40-01bc-413d-89e1-2b616d982eb6"
						},
						{
							"key": "Cross-Origin-Opener-Policy",
							"value": "same-origin",
							"uuid": "c5e4f11f-1291-40af-acb3-a0cc93f7ba21"
						},
						{
							"key": "Cross-Origin-Resource-Policy",
							"value": "same-origin",
							"uuid": "f41c19cd-9ebe-4197-bd48-e5d654a371ef"
						},
						{
							"key": "Origin-Agent-Cluster",
							"value": "?1",
							"uuid": "38c1ebfd-a117-41ac-9bd0-651e985165d6"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin",
							"uuid": "a00c1f27-cf63-4059-98d4-ea9deff3fdb0"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains",
							"uuid": "790c1864-760e-41e0-bae5-8747f4177e68"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff",
							"uuid": "1f8c7929-284c-4fe8-a17d-9d4effcae0b9"
						},
						{
							"key": "X-DNS-Prefetch-Control",
							"value": "off",
							"uuid": "917ca45b-1b5f-44ef-b9d2-256bde2aa1c7"
						},
						{
							"key": "X-Download-Options",
							"value": "noopen",
							"uuid": "8ebf41d6-cabe-4271-b7e7-c2c806ae530e"
						},
						{
							"key": "X-Frame-Options",
							"value": "SAMEORIGIN",
							"uuid": "f63091bc-0d3f-4378-b68c-a46f61bcb3bd"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none",
							"uuid": "a5802bb5-d595-4cc5-a8c0-5f065de46135"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0",
							"uuid": "d96e7df5-4cf9-49a3-82ce-9208b6cc080d"
						},
						{
							"key": "Vary",
							"value": "Origin, Accept-Encoding",
							"uuid": "d048b73c-29be-4cf8-8b46-a0923f034095"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true",
							"uuid": "8667e4b4-afae-4faa-a819-7b70bdd51a84"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip",
							"uuid": "ab1edb13-ba2f-43b3-97dd-2a0c73a2ee61"
						},
						{
							"key": "Content-Length",
							"value": "344",
							"uuid": "5843e2e9-8cb6-446f-9b4d-513d60d5316b"
						},
						{
							"key": "Content-Type",
							"value": "application/json",
							"uuid": "3cf7325b-d50f-4ea4-902b-13d342adf36e"
						},
						{
							"key": "Date",
							"value": "Tue, 11 Feb 2025 11:02:53 GMT",
							"uuid": "ce8bc236-d67b-4ead-9316-6d5b7cd53849"
						},
						{
							"key": "Connection",
							"value": "keep-alive",
							"uuid": "1809052f-3714-445f-b591-7268fa6b2d72"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5",
							"uuid": "feb91a02-ec8b-461f-b322-a2e5068a2a75"
						}
					],
					"cookie": [],
					"body": "{\n    \"meta\": {\n        \"route\": \"/api/routes-info\"\n    },\n    \"status\": {\n        \"success\": true,\n        \"message\": \"Successfully retrieved available routes.\"\n    },\n    \"data\": {\n        \"users\": {\n            \"POST\": [\n                \"/api/users/\",\n                \"/api/users/create\",\n                \"/api/users/new\",\n                \"/api/users/create/dummy\",\n                \"/api/users/create-dummy\",\n                \"/api/users/create-dummy-data\",\n                \"/api/users/create-fake\",\n                \"/api/users/create-fake-data\",\n                \"/api/users/create-sample\",\n                \"/api/users/create-sample-data\",\n                \"/api/users/generate-sample\",\n                \"/api/users/generate-sample-data\"\n            ],\n            \"GET\": [\n                \"/api/users/\",\n                \"/api/users/all\",\n                \"/api/users/list\",\n                \"/api/users/read\",\n                \"/api/users/show\",\n                \"/api/users/view\",\n                \"/api/users/:id\",\n                \"/api/users/read/:id\",\n                \"/api/users/show/:id\",\n                \"/api/users/view/:id\"\n            ],\n            \"PATCH\": [\n                \"/api/users/:id\",\n                \"/api/users/edit/:id\",\n                \"/api/users/update/:id\"\n            ],\n            \"DELETE\": [\n                \"/api/users/:id\",\n                \"/api/users/delete/:id\",\n                \"/api/users/destroy/:id\",\n                \"/api/users/\",\n                \"/api/users/delete-list\",\n                \"/api/users/delete-by-list\",\n                \"/api/users/destroy-list\",\n                \"/api/users/destroy-by-list\"\n            ]\n        },\n        \"admins\": {\n            \"POST\": [\n                \"/api/admins/\"\n            ],\n            \"GET\": [\n                \"/api/admins/\",\n                \"/api/admins/all\",\n                \"/api/admins/list\",\n                \"/api/admins/:id\"\n            ],\n            \"PATCH\": [\n                \"/api/admins/:id\"\n            ],\n            \"DELETE\": [\n                \"/api/admins/:id\",\n                \"/api/admins/\",\n                \"/api/admins/delete-list\",\n                \"/api/admins/delete-by-list\",\n                \"/api/admins/destroy-list\",\n                \"/api/admins/destroy-by-list\"\n            ]\n        }\n    },\n    \"errors\": {}\n}"
				},
				{
					"id": "d9d24e9e-5743-4cc6-95ea-a9f2579c8f31",
					"name": "NOT_FOUND 404",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{SERVER_URL}}/api/routes-infos",
							"host": [
								"{{SERVER_URL}}"
							],
							"path": [
								"api",
								"routes-infos"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "raw",
					"header": [
						{
							"key": "Content-Security-Policy-Report-Only",
							"value": "default-src 'self';script-src 'self';object-src 'none';img-src 'self';style-src 'self' 'unsafe-inline';upgrade-insecure-requests;report-uri /csp-violation-report;base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';script-src-attr 'none'",
							"uuid": "ae571548-230e-49a2-b0c7-b34c8dfe3b8a"
						},
						{
							"key": "Cross-Origin-Opener-Policy",
							"value": "same-origin",
							"uuid": "e3e14590-cfb6-4d77-9ea7-7e72fe42986f"
						},
						{
							"key": "Cross-Origin-Resource-Policy",
							"value": "same-origin",
							"uuid": "1f6cd24f-a4f6-4dff-ac1e-437c5837d736"
						},
						{
							"key": "Origin-Agent-Cluster",
							"value": "?1",
							"uuid": "2ef44edc-299e-4505-8107-fc04886abb12"
						},
						{
							"key": "Referrer-Policy",
							"value": "strict-origin-when-cross-origin",
							"uuid": "cc5f2365-64e6-42ea-996a-1001c63f6273"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000; includeSubDomains",
							"uuid": "7ca486a0-6941-4baa-8cab-fb7a931c463c"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff",
							"uuid": "464bdfb3-f56b-4537-855b-9c286c31f096"
						},
						{
							"key": "X-DNS-Prefetch-Control",
							"value": "off",
							"uuid": "644cd143-ebbc-4be5-af37-135d345e7acb"
						},
						{
							"key": "X-Download-Options",
							"value": "noopen",
							"uuid": "29c54acb-1767-4a86-ab6d-53ef28ac6c8f"
						},
						{
							"key": "X-Frame-Options",
							"value": "SAMEORIGIN",
							"uuid": "21f43e4b-2397-420d-ae3c-d16208e1a375"
						},
						{
							"key": "X-Permitted-Cross-Domain-Policies",
							"value": "none",
							"uuid": "fde9f170-4b0a-46ca-97ae-d134dc918876"
						},
						{
							"key": "X-XSS-Protection",
							"value": "0",
							"uuid": "ca925d03-9590-4306-ab76-cc118d4eb107"
						},
						{
							"key": "Vary",
							"value": "Origin",
							"uuid": "c6a98e1f-1605-4f4b-8c0b-24a68f1b6ed9"
						},
						{
							"key": "Access-Control-Allow-Credentials",
							"value": "true",
							"uuid": "f910aee6-484f-4251-b4c9-bf9ea8e805ac"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip",
							"uuid": "b31e8f6f-939d-4013-869f-430a7ddf8ca4"
						},
						{
							"key": "Content-Length",
							"value": "121",
							"uuid": "fd79a972-cc21-43a6-aa66-02331f3a17c3"
						},
						{
							"key": "Content-Type",
							"value": "[object Object]",
							"uuid": "05bcf042-02da-420f-99a9-32a7fc82b4ff"
						},
						{
							"key": "Date",
							"value": "Tue, 11 Feb 2025 11:03:07 GMT",
							"uuid": "41b63b78-d27d-4b3b-9e0f-db15eee2f390"
						},
						{
							"key": "Connection",
							"value": "keep-alive",
							"uuid": "571f6a3d-2d7a-4a78-8861-d94cf8fdddaa"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5",
							"uuid": "39dc338c-4340-4dff-9fac-3c38c7ed5d48"
						}
					],
					"cookie": [],
					"body": "{\"meta\":{\"route\":\"/api/routes-infos\"},\"status\":{\"message\":\"Not Found: The route GET /api/routes-infos does not exist.\"},\"data\":{},\"errors\":{}}"
				}
			]
		}
	]
}